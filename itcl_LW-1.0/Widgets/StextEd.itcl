# -*-TCL-*-  TCL mode for Emacs
#
# $Id: StextEd.itcl,v 1.1.5.1 1994/06/05 17:32:41 mark Exp $
#
# itcl_class: StextEd
#------------------------------------------------------------------------
# Description : fast-and-dirty text editor for textBrowser in Type Config
#	Gets a DataEntry as a parameter, locks it, gets text from it
#	and gives a simple text editor window for the text
#
# TCL/TK extensions required: itcl 
#
# INHERITS FROM: DialogShell 
#
# PUBLIC ATTRIBUTES:
#	none
#
# METHODS:
#	raise ............ (virtual) raised the editor, locking the source
#
# STATIC METHODS (proc) :
#	TextEditor ....... creates (if neccessary) an editor and raises it
#-------------------------------------------------------------------------
# Author        : Mark Sterin  ($Locker:  $)
# Creation date : May 26, 1994
#
# Last check-in date: $Date: 1994/06/05 17:32:41 $
#
# (c) Lannet Data Communications Ltd.  1994
#--------------------------------------------------------------------------
#

# Force  auto-loading of base class(es)
DialogShell

itcl_class StextEd {
    inherit DialogShell

    #---------------------------------------------------------------
    # CONSTRUCTOR - Creates new StextEd
    #---------------------------------------------------------------
    constructor {entry config} {
	set where_from $entry

	set x [expr [winfo rootx [$entry get_child label]] + 40]
	set y [expr [winfo rooty [$entry get_child label]] + 30]
	#  last widget name
	set name [winfo name $where_from]

	DialogShell::constructor \
	    -title "Editing $name" \
	    -geometry +$x+$y \
	    -buttons "
		{ok    OK          {$this _ok}     0}
		{apply Apply       {$this _apply}  0}
		{can   Cancel      {$this _cancel} 0}
		{help  Help        {Shell :: Help} 0 right} 
	"

	wm transient $this [winfo toplevel [winfo parent $this]]

	label $this.lab -text " Editing $name ($where_from) "\
	    -relief groove -bd 3 -anchor center -bg gray90
	::pack $this.lab -side top -anchor nw \
	    -fill x  -padx 5 -ipadx 5 -pady 5 -ipady 5


	set f [frame $this.f]
	scrollbar $f.scroll -relief flat -command "$f.text yview"
	::pack $f.scroll -side right -fill y 
	set text_w [text $f.text -bd 1 -relief raised -yscroll "$f.scroll set" \
			-wrap char -width 60 -height 12]
	::pack $f.text -expand yes -fill both
	::pack $f -expand yes -fill both	
    }

    #---------------------------------------------------------------
    # METHOD: raise - raise the editor & waits for OK/cancel
    #---------------------------------------------------------------
    method raise   {args} {
	# lock entry
	$where_from config_widgets -state disabled
	
	# get current entry contents
	_put_text [$where_from get]

	Shell::raise

	global StextEd::$this.v

	tkwait variable StextEd::$this.v
	hide
    }
    
    #---------------------------------------------------------------
    # METHOD: _ok - OK action. Apply changes & hide the editor
    #---------------------------------------------------------------
    method _ok     {args} {
	_apply
	_cancel
    }

    #---------------------------------------------------------------
    # METHOD: _apply - apply changes
    #---------------------------------------------------------------
    method _apply  {args} {
	$where_from config_widgets -state normal
	$where_from config -value [_get_text]
	$where_from config_widgets -state disabled
    }

    #---------------------------------------------------------------
    # METHOD: _cancel - hide the editor
    #---------------------------------------------------------------

    method _cancel {args} {
	global StextEd::$this.v

	$where_from config_widgets -state normal
	set StextEd::$this.v 1
    }

    #---------------------------------------------------------------
    # METHOD: _put_text - writes text into the text widgets
    #---------------------------------------------------------------
    method _put_text {text} {
	$text_w delete 1.0 end
	$text_w insert current $text
    }

    #---------------------------------------------------------------
    # METHOD: _get_text - returns current contents of the text widget
    #---------------------------------------------------------------
    method _get_text {} {
	return [$text_w get 1.0 end]
    }

    #-------------------------------------------------------------------
    # PROC: TextEditor - creates (if neccessary) an editor and raises it
    # 	The editor window is deleted only when the parent is deleted
    #-------------------------------------------------------------------
    proc TextEditor { entry } {
	set name $entry.text_br
	if { "[itcl_info object $name]" == "" } {
	    StextEd $name $entry
	}
	$name raise
    }

    #
    # PROTECTED DATA
    #    text_w ......... text widget for editing
    #	 where_from ..... name of the entry this editor posted from
    #
    protected text_w     ""
    protected where_from ""
}

#
#---------------------------------------------------------------
#
# Modification History:
#
# $Log: StextEd.itcl,v $
# Revision 1.1.5.1  1994/06/05  17:32:41  mark
# Automatic Branch Creation
#
# Revision 1.1  1994/06/05  17:32:41  mark
# Initial revision
#
#
#
