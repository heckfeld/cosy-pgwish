'\"@help: blt/widgets/barchart
'\"
'\" Copyright 1991-1994 by AT&T Bell Laboratories.
'\"
'\" Permission to use, copy, modify, and distribute this software
'\" and its documentation for any purpose and without fee is hereby
'\" granted, provided that the above copyright notice appear in all
'\" copies and that both that the copyright notice and warranty
'\" disclaimer appear in supporting documentation, and that the
'\" names of AT&T Bell Laboratories any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the
'\" software without specific, written prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data
'\" or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\"
'\" Barchart created by George Howlett.
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: Create and manipulate barchart widgets
blt_barchart \- Create and manipulate barchart widgets
.SH SYNOPSIS
\fBblt_barchart\fI \fIpathName \fR?\fIoptions\fR?
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
\fBbackground\fR	\fBcursor\fR	\fBforeground\fR        
\fBborderWidth\fR	\fBfont\fR	\fBrelief\fR            
.fi
.LP
See the ``options'' manual entry for details on the standard options.
.ta 4c
.SH "WIDGET-SPECIFIC OPTIONS"
.LP
.nf
.ta 4c 8c 12c
\fBbottomMargin\fR	\fBleftMargin\fR	\fBtitle\fR     
\fBbufferElements\fR	\fBplotBackground\fR	\fBtopMargin\fR 
\fBhalo\fR	\fBplotBorderWidth\fR	\fBwidth\fR     
\fBheight\fR	\fBplotRelief\fR        
\fBinvertxy\fR	\fBrightMargin\fR       
.fi
.SH DESCRIPTION
.PP
The \fBblt_barchart\fR command creates a new window (given by the 
\fIpathName\fR argument) and makes it into an barchart widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the graph such as its colors and font.
The \fBblt_barchart\fR command returns its
\fIpathName\fR argument.  At the time this command is invoked,
there must not exist a window named \fIpathName\fR, but
\fIpathName\fR's parent must exist.
.PP
The \fBblt_barchart\fR widget plots two-variable data as
rectangular bars in a window.  The x-coordinate values designate
the position of the bar along the x-axis, while the y-coordinate
values designate the magnitude.
The \fBblt_barchart\fR has of several components; coordinate axes, 
crosshairs, a legend, and a collection of elements and tags.
.SS "COORDINATE AXES"
The barchart widget has four axes, two standard (x and y) and two alternate
(x2 and y2).  Graph elements and tags are mapped onto one x-axis and 
one y-axis (by default, they are mapped onto the standard axes).
.PP
Each axis consists of the axis line and major and minor ticks placed 
at set intervals.  At major ticks, labels (text strings) representing 
the coordinate value of the tick are drawn.  By default, the tick labels 
are simply numeric strings.  However, a Tcl procedure may be supplied 
to format individually each tick label.
.PP
The scale of the axis is determined its minimum and maximum limits.
By default, each axis is auto-scaled using the limits of the data.
However either limit can be set to manually scale the graph.
.SS "CROSSHAIRS"
Crosshairs are a set of two lines (vertical and horizontal) which
intersect on the graph.  They are implemented using XOR drawing
primitives, so they do not require the graph to be redrawn when 
they are moved or redisplayed.
.SS "ELEMENTS"
A graph element is a set of data points and configuration options 
which determine how the bar is displayed in the window.  Elements 
are created by the \fBelement create\fP widget command.  The configuration 
options may be specified as the element is created or later by 
the \fBelement configure\fR 
widget command.  There is an internal display list of element names which 
controls the drawing order of the elements. By default, elements are 
appended to the display list as they are created.  The element display list
can be managed by the \fBelement show\fR command.  
.SS "LEGEND"
The legend consists of a list of entries, where each entry is an element
symbol and label.  By default, the legend is located in the right
margin of the graph.  However, the legend may appear anywhere in the
plotting area of the graph by specifying its window coordinates.
.SS "TAGS"
Tags are simple drawing procedures used to annotate or highlight
areas of the graph. A tag may be either a text string, bitmap,
line, window, or polygon.  A tag may be associated with a particular 
element, so that the tag is displayed only if the element is 
displayed.  Tags are the first items drawn when the graph is displayed, 
so that elements, symbols, legend, and axes always appear in front of them.  
.PP
Tags differ from elements in that they do not affect the auto-scaling of 
coordinate axes.  Furthermore, tags can have \fIelastic\fR coordinates
(specified by \fC-Inf\fR and \fCInf\fR respectively) which translate into
the axis minimum or maximum limit.  For example, to place a tag so it
always remains in the lower left corner of the plot, use the coordinates
\fC-Inf\fR,\fC-Inf\fR.
.SH "WIDGET COMMANDS"
.PP
The \fBblt_barchart\fR command creates a new Tcl command whose
name is \fIpathName\fR.  This
command may be used to invoke various
operations on the widget.  It has the general form:
.DS C
\fIpathName option \fR?\fIarg arg ...\fR?
.DE
\fIOption\fR and the \fIarg\fRs
determine the exact behavior of the command.  The following
commands are valid for \fBblt_barchart\fR widgets:
.TP
\fIpathName \fBconfigure \fR?\fIoptions...\fR?
Queries or modifies the configuration options of the widget. 
Valids options are described in
.SB WIDGET OPTIONS.
.TP
\fIpathName \fBcrosshairs configure\fR ?\fIoptions...\fR?
Queries or modifies the configuration options of the crosshairs.
This command is similar to the \fBconfigure\fR command, except that it
applies to the options of the crosshairs, whereas \fBconfigure\fR applies 
to the options for the graph as a whole.  See 
.SB CROSSHAIRS OPTIONS
for a description of valid options.
.TP
\fIpathName \fBcrosshairs toggle\fR
Toggles the current state of the crosshairs, turning them on or off.
This command returns an empty string.
.TP
\fIpathName \fBelement append \fIname coords\fR
Appends pairs of x,y data points to element \fIname\fR.  
\fIcoords\fR is a list of numeric expressions (x,y graph coordinates) 
representing data points.  It returns the empty string.
.TP
\fIpathName \fBelement configure \fIname \fR?\fIoptions...\fR?
This command is similar to the \fBconfigure\fR command, except that it
applies to the options of an individual element, whereas
\fBconfigure\fR applies to the options for the graph as a whole.
\fIOptions\fR may have any of the values accepted by the
\fBelement create\fR widget command. See
.SB ELEMENT OPTIONS
for a description of valid options.
.TP
\fIpathName \fBelement create \fIname \fR?\fIoptions...\fR? 
Creates a new element \fIname\fP in the graph.  Element names must be
unique, so \fIname\fR can not already exist in the graph.  
If additional arguments are present, they specify any of the 
element options (see 
.SB ELEMENT OPTIONS
).
.TP
\fIpathName \fBelement delete ?\fIname ...\fR?
Deletes the element \fIname\fR from the graph.  
Returns the empty string.
.TP
\fIpathName \fBelement names\fR
Returns a list of all elements. This differs from
\fBelement show\fR in that it returns the names of all elements, not
just those in the element display list.
.TP
\fIpathName \fBelement show \fR?\fInames\fR?
Queries or resets the element display list.  
The element display
list defines which elements are drawn and in what order.  
\fINames\fR is a list of the elements to
be displayed.  If there is no \fInames\fR argument, the list of elements 
currently being displayed is returned.
.TP
\fIpathName \fBinvtransform \fIwinX winY\fP 
Performs an inverse coordinate transformation, mapping x,y window 
coordinates to graph coordinates (using the standard x and y axes).  
Returns a list of containing the x and y graph coordinates.
.TP
\fIpathName \fBlegend activate \fIname...\fR
Specifies that the legend entries of the named elements should be drawn 
with the active legend background and foreground colors.  The entries may 
also be drawn with a different relief (using the \fB-activerelief\fR and 
\fB-activeborderwidth\fR options).
\fIName\fR is the name of an element in the graph.
.TP
\fIpathName \fBlegend configure \fR?\fIoptions...\fR?
This command is similar to the \fBconfigure\fR command, except that it
applies to the options for the legend, whereas \fBconfigure\fR applies
to the options for the graph as a whole.  See 
.SB LEGEND OPTIONS
for a description of valid options.  
.TP
\fIpathName \fBlegend deactivate \fIname...\fR
Specifies that the legend enties of the named elements should be drawn 
with the legend background and foreground colors.  \fIName\fR is the 
name of an element in the graph.
.TP
\fIpathName \fBlegend get \fIstring\fR
Returns the name of the graph element at the current screen position
in the legend.  \fIString\fR must be in the form \fI@x,y\fR, where 
\fIx\fR and \fIy\fR are the window coordinates.  If the given screen 
coordinates do not lie over a legend entry, the empty string is returned.
.SB LEGEND OPTIONS
for a description of valid options.  
.TP
\fIpathName \fBpostscript \fR?\fIfileName\fR? ?\fIoptions...\fR?
Generates PostScript commands to print the graph. If no \fIfileName\fR
argument is present, the PostScript output is returned. Otherwise,
\fIfileName\fR is created and will contain the PostScript output.  In
this case the empty string is returned.  If any \fIoption-value\fR
pairs are present, they set configuration options controlling how the
PostScript is generated. See 
.SB POSTSCRIPT OPTIONS
for a description of valid options.
.TP
\fIpathName \fBpsconfigure \fR?\fIoptions...\fR?
Queries or modifies the options of the \fBpostscript\fR command
(see
.SB POSTSCRIPT OPTIONS
).
.TP
\fIpathName \fBtag after \fItagId\fR ?\fItagId\fR?
Reorders the tag display list placing the first tag specified after
the second.  If no second \fItagId\fR argument is specified, the tag
is placed at the end of the list.  This command can be used to control
how tags are displayed since tags are drawn in the order of this
display list.  The empty string is returned.
.TP
\fIpathName \fBtag before \fItagId\fR ?\fItagId\fR?
Reorders the tag display list placing the first tag specified before
the second.  If no second \fItagId\fR argument is specified, the tag
is placed at the beginning of the list.  This command can be used to
control how tags are displayed since tags are drawn in the order of
this display list.  The empty string is returned.
.TP
\fIpathName \fBtag configure \fItagId\fR ?\fIoptions...\fR? 
Queries or modifies the configuration options of the particular tag.
See 
.SB TAG OPTIONS
for a description of valid options.
.TP
\fIpathName \fBtag coords \fItagId\fR ?\fIcoords\fR? 
Queries or resets the coordinates of the tag designated by
\fItagId\fR.  If \fIcoords\fR is present, it is a list of coordinate pairs
representing the points of the tag.  This list is used to re-position the tag.
If the \fIcoords\fR argument is not present, the current list of
coordinates for \fItagId\fR is returned.
.TP
\fIpathName \fBtag create \fItype\fR ?\fIcoords\fR? ?\fIoptions...\fR?
Creates a tag of the selected type. \fIType\fR may be either
\fCtext\fR, \fCline\fR, \fCbitmap\fR, \fCpolygon\fR, or \fCwindow\fR.
\fIcoords\fR is a list of coordinate pairs of points used
to position the tag.  See
.SB TAG OPTIONS
for a description of options are valid.  This command returns a
unique tag identifier, which is used as the \fItagId\fR argument in
other tag-related commands.
.TP
\fIpathName \fBtag delete \fItagId\fR ?\fItagId..\fR?
Deletes each of the specified tags.  This command returns the empty string.
.TP
\fIpathName \fBtag ids\fR ?\fIpattern\fR? 
Returns a list of IDs of tags created.  If \fIpattern\fR is supplied,
only those tags whose IDs matching it will be returned.
.TP
\fIpathName \fBtag type \fItagId\fR 
Returns the type of the tag given by \fItagId\fR, such as
\fCLine\fR or \fCText\fR. 
If \fItagId\fR is not a valid a tag identifier, the empty string is returned.
.TP
\fIpathName \fBtransform \fIx y\fP 
Transforms the graph coordinates into window coordinates, by mapping
the \fIx\fR and \fIy\fR values onto the standard axes (x and y).
Returns a list containing the x and y window coordinates.
Please note that graph coordinates far outside of the axis range are 
not guarenteed to be accurate.
.TP
\fIpathName \fBxaxis configure\fR ?\fIoptions...\fR? 
.TP
\fIpathName \fByaxis configure\fR ?\fIoptions...\fR? 
.TP
\fIpathName \fBx2axis configure\fR ?\fIoptions...\fR? 
.TP
\fIpathName \fBy2axis configure\fR ?\fIoptions...\fR? 
Queries or modifies the configuration options of the coordinate axis.  
The subsection 
.SB AXIS OPTIONS
describes which options are valid.
.TP
\fIpathName \fBxaxis limits\fR
.TP
\fIpathName \fByaxis limits\fR
.TP
\fIpathName \fBx2axis limits\fR
.TP
\fIpathName \fBy2axis limits\fR
Returns a list of two graph coordinates representing the minimum and maximum 
limits of the x-axis.  The format of the list returned is \fCmin max\fR.
.sp 1
.SH "CONFIGURATION OPTIONS"
.SS "WIDGET OPTIONS"
The following widget options are valid for the \fBconfigure\fR command.  
.DS
\fIpathName \fBconfigure\fR ?\fIoption\fR? ?\fIvalue option value ...\fR?
.DE
The \fBconfigure\fR command queries or modifies the configuration options 
of the widget.  If no \fIoption\fR is specified, returns a list 
describing all of the
available options for \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on the format of this list).  
If \fIoption\fR is specified with no \fIvalue\fR, then the command 
returns a list describing the one named option (this list will be 
identical to the corresponding sublist of the value returned if 
no \fIoption\fR is specified).  If one or more \fIoption\-value\fR 
pairs are specified, then the command
modifies the given widget option(s) to have the given value(s); in
this case the command returns the empty string.  
.TP
\fB\-bottommargin \fIpixels\fR
Specifies the size of the margin from the x-coordinate axis to the 
bottom of the window.  The x-axis title is displayed in this margin.  
\fIPixels\fR may be specified in any of the forms described in 
\fBTk_GetPixels\fR.  If \fIpixels\fR is less than one pixel, the 
the margin size is selected automatically.
.TP
\fB\-bufferelements \fIboolean\fR
Specifies whether to use a pixmap to cache the display of elements.
This is especially useful when there are many data points or the
graph is redrawn frequently.  \fBoolean\fR is \fCtrue\fB by default.
.TP
\fB\-halo \fIpixels\fR
Specifies a threshold distance when searching for the closest data 
point (see the \fBelement closest\fR command).  Only data points
within this distance are considered in the search.
\fIPixels\fR may be specified in any of the forms described in 
\fBTk_GetPixels\fR.  If this option isn't specified, 
it defaults to \fC0.5i\fR.
.TP
\fB\-height \fIpixels\fR
Specifies a desired window height that the barchart widget should 
request from its geometry manager.  The default height is \fC400\fR.
.TP
\fB\-invertxy \fIboolean\fR
Specifies that placement of the x and y axes should be inverted.
If \fIboolean\fR is \fCtrue\fR, the x-axis is exchanged with the
y-axis.  By default \fIboolean\fR is \fCfalse\fR.
.TP
\fB\-leftmargin \fIpixels\fR
Sets the size of the margin from the left edge of the window to the
the y-coordinate axis.  The y-axis title is displayed in this
margin.  If \fIpixels\fR is less than one pixel, 
the margin size is selected automatically.
.TP
\fB\-plotbackground \fIcolor\fR
Sets the background color of the plotting area.  
.TP
\fB\-plotborderwidth \fIpixels\fR
Sets the width of the 3-D border to draw around the outside of
the plotting area (if such border is being drawn; the \fBplotrelief\fR option
determines this).  By default is the plot border width is \fC2\fR.
.TP
\fB\-plotrelief \fIstring\fR
Specifies the 3-D effect desired for the plotting area.  
\fIString\fR must be in a form accepted by \fBTk_GetRelief\fR. 
It indicates how the interior of the plotting area should appear 
relative to rest of the graph; for example, \fCraised\fR means the 
plot should appear to protrude from the graph, relative to the surface 
of the graph.  By default, the plot relief is \fCsunken\fR.
.TP
\fB\-rightmargin \fIpixels\fR
Sets the size of marging from the plotting area to the right edge 
of the window.  By default, the legend is displayed in this margin.  
If \Ipixels\fR is than 1, the margin size
is selected automatically.
.TP
\fB\-title \fIstring\fR
Specifies the title of the graph.  If \fIstring\fR is the empty string 
(the default), no title is displayed.
.TP
\fB\-topmargin \fIpixels\fR
Sets the size of the marging the top edge of the window to the plotting area.
The graph title is displayed in this margin.  
If \fIpixels\fR is less than 1, the margin size is selected automatically.
.TP
\fB\-width \fIpixels\fR
Specifies a desired window width that the barchart widget should
request from its geometry manager.  
\fIPixels\fR may be specified in any of the forms described 
in \fBTk_GetPixels\fR.
The default width is \fC400\fR.
.sp 1
.SS "AXIS OPTIONS"
The following options are valid for the \fBxaxis configure\fR, 
\fByaxis configure\fR, \fBx2axis configure\fR, 
and the \fBy2axis configure\fR commands.  
.DS
\fIpathName \fBxaxis configure \fR?\fIoptions...\fR?

\fIpathName \fByaxis configure \fR?\fIoptions...\fR?

\fIpathName \fBx2axis configure \fR?\fIoptions...\fR?

\fIpathName \fBy2axis configure \fR?\fIoptions...\fR?
.DE
In addition, axis configuration options may be initialized by the
\fBoption\fR command.  The name fields in the \fBblt_barchart\fR 
option database are
prefixed by \fCx\fR, \fCy\fR, \fCx2\fR, or \fCy2\fR while 
the class fields are prefixed by \fCAxis\fR. The following example sets 
the color of all axes to blue and the y-axis scale to logarithmic.
.DS
\fCoption add *Blt_barchart.AxisColor blue\fR
\fCoption add *Blt_barchart.yLogscale true\fR
.DE
.TP
\fB\-color \fIcolor\fR
Sets the color of the axis and its labels.
The default color is \fCblack\fR.
.TP
\fB\-command \fIprefix\fR
Specifies a Tcl command to be invoked when formatting the axis labels.
\fIPrefix\fR is typically just the name of a Tcl procedure, but the string
may also contain extra arguments for the procedure.  When invoked, two
arguments (the path name of the barchart widget and the numeric value of
the axis label) are appended to the end of the command.  The procedure
value should be a string representing the formatted label. If the value is
the empty string or if \fIprefix\fR is the empty string, the default axis
label is displayed.  Please note that this procedure is invoked during
the display of the graph.  Resetting barchart configurations within this 
procedure can cause unexpected results.
.TP
\fB\-descending \fIboolean\fR
Specifies whether the values along the axis are increasing or decreasing.  
If \fIboolean\fR is true, the axis values will decrease.
By default, the axis values increase.
.TP
\fB\-font \fIfontName\fR 
Specifies the font for axis labels. If
\fIfontName\fR isn't specified then it defaults to
\fC*-Courier-Bold-R-Normal-*-100-*\fR.
.TP
\fB\-linewidth \fIpixels\fR
Set the line width of the axis and its ticks.  The default line
width is \fC0\fR.
.TP
\fB\-logscale \fIboolean\fR
Sets the scale of the coordinate axis (either logarithmically or
linearly).  If \fIboolean\fR is \fCtrue\fR, the axis will be displayed
in logarithmic scale.  \fIBoolean\fR must be a value accepted by
\fBTcl_GetBoolean\fR.  By default, the scale is linear.
.TP
\fB\-loose \fIboolean\fR
Indicates that when auto-scaling the axis, the axis range 
should fit loosely around the data points at the outer tick intervals.  
Otherwise the axis range fits tightly at the limits of the data displayed. 
By default, the range is tight.
.TP
\fB\-mapped \fIboolean\fR
Specifies if the axis should be displayed. By default, the standard
axes are displayed (x and y), but not the alternate (x2 and y2).
.TP
\fB\-max \fIvalue\fR
Sets the maximum limit of the axis.  Data points exceeding this
limit are clipped at this value. If \fIvalue\fR is the empty string
(the default), the axis is auto-scaled whereby the maximum limit is
determined from the data points of the displayed elements.
.TP
\fB\-min \fIvalue\fR
Sets the minimum limit of the axis. Data points less than this
limit are clipped at this value.  If \fIvalue\fR is the empty string
(the default), the axis is auto-scaled whereby the minimum limit is
determined from the data points of the displayed elements.
.TP
\fB\-rotate \fItheta\fR
Specifies the rotation of the axis labels.  \fITheta\fR is a
real number representing the angle of rotation in degrees.
The default rotation is \fC0.0\fR degrees.
.TP
\fB\-showticks \fIboolean\fR
Indicates if axis ticks should be displayed. If \fIboolean\fR is
\fCtrue\fR (the default), ticks are displayed.
.TP
\fB\-stepsize \fIvalue\fR
Sets the step size between major axis ticks.  \fIValue\fR must be
greater than zero and less than the axis range, or the requested step size 
is ignored and the step size is automatically calculated based
upon the element data points.
.TP
\fB\-subticks \fInumber\fR
Sets the number of minor axis ticks to be displayed.  By default, the
number of minor ticks is \fC5\fR.  If \fInumber\fR is zero, no subticks
will be displayed.
.TP
\fB\-ticklength \fIpixels\fR
Sets the length of the ticks and subticks (subticks are one-half \fIpixels\fR).
If \fIpixels\fR is negative, ticks will point towards the plot, instead
of away from it.  The tick length is \fC0.1i\fR.  
.TP
\fB\-title \fIstring\fR
Sets the title of the axis. If \fIstring\fR is the
empty string, no axis title will be displayed.  
.sp 1
.SS "CROSSHAIRS OPTIONS"
.PP
The following options are valid for the \fBcrosshair configure\fR command.
.DS
\fIpathName \fBcrosshairs configure\fR ?\fIoptions...\fR?
.DE
In addition, crosshairs configuration options may be initialized by the 
\fBoption\fR command.  The name fields in the \fBblt_barchart\fR option database
are prefixed by
by \fCxhairs\fR and classfields are prefixed by \fCXhairs\fR. 
The following example sets the line width of the crosshairs to \fC2\fR.
.DS
\fCoption add *Blt_barchart.xhairsLinewidth 2\fR
.DE
.TP
\fB\-color \fIcolor\fR 
Sets the color of the crosshairs.  
If this option isn't specified, then it defaults to \fCblack\fR.
.TP
\fB\-dashes \fIdashes\fR
Sets the dash style of the crosshairs. \fIdashes\fR
is the number of alternatingly displayed pixels. If \fIdashes\fR is
\fC0\fR (the default), the crosshairs will be drawn as a solid line. 
.TP
\fB\-linewidth \fIpixels\fR
Set the line width of crosshairs.  The default line width is \fC0\fR.
.TP
\fB\-mapped \fIboolean\fR
Specifies if the crosshairs should be displayed. By default, 
the crosshairs are not displayed.  
.TP
\fB\-position \fIstring\fR
Specifies the position of the crosshairs. \fIString\fR must be in the
format \fI@x,y\fR, where \fIx\fR and \fIy\fR 
are window coordinates.  
.sp 1
.SS "ELEMENT OPTIONS"
.PP
The following options are valid for the \fBelement create\fR and 
\fBelement configure\fR commands.
\fIName\fR is the name of the element to be configured.
.DS
\fIpathName \fBelement create \fIname\fR ?\fIoptions...\fR?

\fIpathName \fBelement configure \fIname\fR ?\fIoptions...\fR?
.DE
In addition, element configuration options may be initialized by the 
\fBoption\fR command.  The name fields in the \fBblt_barchart\fR 
option database 
are prefixed by \fCelem\fR. 
The following example creates a 3D effect for bars by setting
the relief and the borderwidth.
.DS
\fCoption add *Blt_barchart.elemBorderwidth 2\fR
\fCoption add *Blt_barchart.Relief sunken\fR
.DE
.TP
\fB\-background \fIcolor\fR
Specifies the the fill color for the bar.
The default background color is \fCwhite\fR.
.TP
\fB\-borderwidth \fIpixels\fR
Sets the width of the 3-D border to draw around the outside of
the bar (if such border is being drawn; the \fBrelief\fR option
determines this).  \fIPixels\fR may be in any form accepted by
\fBTk_GetPixel\fR.  By default is the legend border width is \fC2\fR.
.TP
\fB\-data \fIvalueList\fR
Specifies the graph coordinates representing 
the data points to be plotted.  \fIValueList\fR must be a list of valid
numeric expressions.  It this option isn't specified, it defaults to
the empty string.
.TP
\fB\-foreground \fIcolor\fR  
Sets the foreground color of the bar.
If multiple bar segments are used, \fIcolor\fR may be list of color
names representing a palette colors from which each bar segments is drawn.  
The default foreground color is \fCblack\fR.
.TP
\fB\-label \fIstring\fR
Sets the element label.  Labels are displayed in the 
legend next to the element symbol.  If \fIstring\fR is the empty 
string, no legend entry will be displayed for the element.  By 
default, the label is the name of the element.
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the element's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the element's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-relief \fIstring\fR
Specifies the 3-D effect desired for the bar.  \fIString\fR may be any 
value accepted by \fBTk_GetRelief\fR.  It indicates how
the bar should appear relative to the graph; for
example, \fCraised\fR means the bar should appear to protrude from
the graph, relative to the surface of the graph.  By default, the
legend relief is \fCraised\fR.
.TP
\fB\-stacked \fIboolean\fR
Indicates how the bar should be displayed if it has multiple 
y data points.  If \fIboolean\fR is \fCtrue\fR (the default), the bar
is drawn in segments, one upon the other.
.TP
\fB\-stipple \fIbitmap\fR
Specifies a stipple pattern with which to draw the bar. \fIBitmap\fR is
the name of a bitmap in a form accepted by \fBTk_GetBitmap\fR.
If multiple bar segments are used, \fIbitmap\fR may also be list of bitmap
names representing a palette of stipples from which each bar segments is 
drawn.  If a bitmap name is the empty string (the default) then the bar
is drawn in a solid fashion.
.TP
\fB\-xdata \fIvalue\fR
Specifies the x-coordinate of the bar element.
\fIValue\fR must be a valid numeric expression.  It this 
option isn't specified, it defaults to the empty string.
.TP
\fB\-ydata \fIvalueList\fR
Specifies the y-coordinates of the data points to be plotted.  
\fIValueList\fR must be a valid list of numeric expressions.  It this 
option isn't specified, it defaults to the empty string.
.sp 1
.SS "LEGEND OPTIONS"
The following options are valid for the \fBlegend configure\fR command.
.DS
\fIpathName \fBlegend configure \fR?\fIoptions...\fR?
.DE
In addition, legend configuration options may be initialized by the
\fBoption\fR command.  The name fields in the \fBblt_barchart\fR 
option database are
prefixed by \fClegend\fR.  The following example initializes the
legend foreground color to blue in the option database.
.DS
\fCoption add *Blt_barchart.legendForeground blue\fR
.DE
.TP
\fB\-activebackground \fIcolor\fR
Sets the active background color of the legend.  All legend entries
marked as active (see \fBlegend activate\fR command) are drawn with
this background color.
.TP
\fB\-activeborderwidth \fIpixels\fR
Sets the width of the 3-D border to draw around the outside of
the each active legend entry (if such border is being drawn; 
the \fB-activerelief\fR option determines this).  By default is the 
active border width is \fC2\fR.
.TP
\fB\-activeforeground \fIcolor\fR
Sets the active foreground color of the legend.  All legend entries
marked as active (see \fBlegend activate\fR command) are drawn with
this foreground color.
.TP
\fB\-activerelief \fIstring\fR
Specifies the 3-D effect desired for active legend entries.  \fIString\fR 
must be in a form accepted by \fBTk_GetRelief\fR. 
It indicates how  the interior of the entry should appear relative to 
the legend; for
example, \fCraised\fR means the entry should appear to protrude from
the legend, relative to the surface of the legend.  By default, the
active legend relief is \fCflat\fR.
.TP
\fB\-anchor \fIanchorPos\fR
Tells how to position the legend relative to the positioning point for
the legend; \fIanchorPos\fR may have any of the forms accepted by
\fBTk_GetAnchor\fR.  For example, if \fIanchorPos\fR is \fCcenter\fR
then the legend is centered on the point; if \fIanchorPos\fR is
\fCn\fR then the legend will be drawn such that the top center point
of the rectangular region occupied by the legend will be at the
positioning point.  This option defaults to \fCcenter\fR.
.TP
\fB\-background \fIcolor\fR
Sets the background color of the legend. 
If \fIcolor\fR is the empty string, no background rectangle will be drawn.
.TP
\fB\-borderwidth \fIpixels\fR
Sets the width of the 3-D border to draw around the outside of
the legend (if such border is being drawn; the \fBrelief\fR option
determines this).  By default is the legend border width is \fC2\fR.
.TP
\fB\-font \fIfontName\fR 
\fIFontName\fR specifies a font to use when drawing the labels of each
element into the legend.  If this option isn't specified then it
defaults to \fC*-Helvetica-Bold-R-Normal-*-120-*\fR.
.TP
\fB\-foreground \fIcolor\fR 
Sets the foreground color of the element labels in the legend.  
If this option isn't specified, then it defaults to \fCblack\fR.
.TP
\fB\-ipadx \fIpixels\fR
Sets the internal padding to the width of the legend. 
Padding will be added to both the left and right and
between the elements symbol and label.
By default is the legend border width is \fC2\fR.
.TP
\fB\-ipady \fIpixels\fR
Sets the internal padding to the height of the legend. 
Padding will be added to both the top and bottom and
between the elements labels.
By default is the legend border width is \fC2\fR.
.TP
\fB\-mapped \fIboolean\fR
Indicates if the legend should be displayed. If \fIboolean\fR is
\fCtrue\fR (the default), the legend will be mapped.  
.TP
\fB\-padx \fIpixels\fR
Specifies extra padding on the left and right of the legend.
The default is \fC4\fR.
.TP
\fB\-pady \fIpixels\fR
Specifies extra padding on the top and bottom of the legend.
The default is \fC0\fR.
.TP
\fB\-position \fIstring\fR
Sets the positioning point of the legend in window coordinates.
This option in conjunction with the \fB-anchor\fR option, determines
where the legend is positioned. The format of \fIstring\fR is
\fI@x,y\fR, where \fIx\fR and \fIy\fR are the window coordinate
values.  If \fIstring\fR is the empty string (the default), the legend
will be displayed in the right margin (which is automatically extended
to accommodate the legend).
.TP
\fB\-relief \fIstring\fR
Specifies the 3-D effect desired for the legend.  \fIString\fR must be
in a form accepted by \fBTk_GetRelief\fR. 
It indicates how  the interior of the legend should appear relative to 
the graph; for
example, \fCraised\fR means the legend should appear to protrude from
the graph, relative to the surface of the graph.  By default, the
legend relief is \fCsunken\fR.
.sp 1
.SS "TAG OPTIONS"
.PP
The following options are valid for the \fBtag create\fR and \fBtag configure\fR commands.  
\fITagid\fR is the identifier returned by the \fBtag create\fR command.
.DS
\fIpathName \fBtag create \fItype\fR ?\fIcoords\fR? ?\fIoptions...\fR?

\fIpathName \fBtag configure \fItagId\fR ?\fIoptions...\fR?
.DE
Tag configuration options may be initialized by the
\fBoption\fR command.  The name fields in the \fBblt_barchart\fR
option database are
prefixed by \fCbmTag\fR, \fCtextTag\fR, \fClineTag\fR,
\fCpolyTag\fR, or \fCwinTag\fR with respect to the tag type.
Class fields are prefixed by \fCTag\fR. The following example sets
the background color of all tags to blue and the foreground color of
all text tags to white.
.DS
\fCoption add *Blt_barchart.TagBackground blue\fR
\fCoption add *Blt_barchart.textTagForeground white\fR
.DE
The description of tag options is broken into subsections for each tag type.
.sp 1
.SS "TEXT TAGS"
A text tag displays a string of characters on a single line.  They may
be used to annotate regions of the graph.  Text tags are
created with the following widget command:
.DS
\fIpathName \fBtag create text \fR?\fIcoords\fR? ?\fIoptions...\fR?
.DE
The argument \fIcoords\fR specifies a list of two numeric
expressions representing the graph coordinates of a point 
used to position the text on the graph. 
.P
After the coordinate list there may be any number of
\fIoption\fR-\fIvalue\fR pairs, each of which sets one of the
configuration options for the tag.  These same
\fIoption\fR\-\fIvalue\fR pairs may be used in the \fBtag configure\fR
command to change the tag's configuration.  The following
options are supported for text tags:
.TP
\fB\-anchor \fIanchorPos\fR
\fIAnchorPos\fR tells how to position the text relative to the
positioning point for the text; it may have any of the forms accepted
by \fBTk_GetAnchor\fR.  For example, if \fIanchorPos\fR is
\fCcenter\fR then the text is centered on the point; if
\fIanchorPos\fR is \fCn\fR then the text will be drawn such that the
top center point of the rectangular region occupied by the text will
be at the positioning point.  This option defaults to \fCcenter\fR.
.TP
\fB\-background \fIcolor\fR
Sets the background color of the text string.  
If \fIcolor\fR is the empty string, the background will be transparent.
If this option isn't specified then it defaults to \fCwhite\fR.
.TP
\fB\-font \fIfontName\fR
Specifies the text font.
If this option isn't specified, it defaults 
\fC*-Helvetica-Bold-R-Normal-*-120-*\fR.
.TP
\fB\-foreground \fIcolor\fR
Sets the foreground color of the text.  
If this option isn't specified then it defaults to \fCblack\fR.
.TP
\fB\-element \fIname\fR
Associates the tag with the element \fIname\fR.  If \fIname\fR is not
the empty string (the default), the tag is displayed only if
\fIname\fR exists and is currently being displayed (see \fBelement show\fR).
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the tag's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the tag's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-rotate \fItheta\fR
Specifies how the tag is rotated.
\fITheta\fR is a real number representing the angle of rotation in degrees.
The tag is first rotated along its center and is then displayed according 
to its
anchor position. The default rotation is \fC0.0\fR degrees.
.TP
\fB\-text \fIstring\fR
Sets the text string.  The exact way
in which the text string is displayed may be affected by other options
such as \fB-anchor\fR or \fB-rotate\fR.  This option defaults to the
empty string.
.TP
\fB\-xoffset \fIpixels\fR
Specifies a x-coordinate offset (in window coordinates) from the
specified position.  
.TP
\fB\-yoffset \fIpixels\fR
Specifies a y-coordinate offset (in window coordinates) from the
specified position.  
.sp 1
.SS "LINE TAGS"
A line tag displays one or more connected line segments on the graph.
Line tags are created with widget commands in the form:
.DS
\fIpathName \fBtag create line \fR?\fIcoords\fR? ?\fIoptions...\fR?
.DE
The argument \fIcoords\fR specifies a list of numeric
expressions representing the graph coordinate pairs of the points 
connecting the line.
.P
After the \fIcoords\fR there may be any number of \fIoption\fR-\fIvalue\fR
pairs, each of which sets one of the configuration options
for the tag.  These same \fIoption\fR\-\fIvalue\fR pairs may be
used in the \fBtag configure\fR command to change the tag's
configuration.
The following options are supported for line tags:
.TP
\fB\-background \fIcolor\fR
Sets the background color of the line.
The is only meaningful when used with
the \fB-stipple\fR option.  
If this option isn't specified then it defaults to \fCwhite\fR.
.TP
\fB\-dashes \fIdashes\fR
Sets the dash style of the line. \fIDashes\fR
is the number of alternatingly displayed pixels. If \fIdashes\fR is
\fC0\fR (the default), the tag will be drawn as a solid line. 
.TP
\fB\-element \fIname\fR
Associates the tag with the element \fIname\fR.  The tag is displayed
only if an element \fIname\fR exists and is currently displayed (see
\fBelement show\fR).  If \fIname\fR is the empty
string (the default), the tag is displayed.
.TP
\fB\-foreground \fIcolor\fR
Sets the foreground color.
If this option isn't specified then it defaults to \fCblack\fR.
.TP
\fB\-linewidth \fIpixels\fR
Sets the width of the lines.
The default width is \fC0\fR.
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the tag's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the tag's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-stipple \fIbitmap\fR
Indicates that the line should be drawn with a stippled pattern rather
than solid; \fIbitmap\fR specifies the stipple pattern to use, may be
in any of the forms accepted by \fBTk_GetBitmap\fR.  If \fIbitmap\fR is 
the empty string (the default) then the line is drawn in a solid fashion.
.TP
\fB\-xoffset \fIpixels\fR
Specifies an offset in the x-coordinate direction
(in window coordinates) from the specified position.
The default offset ifs \fC0\fR.
.TP
\fB\-yoffset \fIpixels\fR
Specifies an offset in the y-coordinate direction
(in window coordinates) from the specified position.
The default offset ifs \fC0\fR.
.sp 1
.SS "BITMAP TAGS"
A bitmap tag displays a bitmap on the graph.  Bitmap tags are
created with widget commands in the form:
.DS
\fIpathName \fBtag create bitmap \fR?\fIcoords\fR? ?\fIoptions...\fR?
.DE
The argument \fIcoords\fR specifies a list containing the graph
coordinates of a point used to position the bitmap on the display.
After the coordinate list there may be any number of \fIoption\fR-\fIvalue\fR
pairs, each of which sets one of the configuration options
for the tag.  These same \fIoption\fR\-\fIvalue\fR pairs may be
used in the \fBtag configure\fR command to change the tag's
configuration.
The following options are supported for bitmap tags:
.TP
\fB\-anchor \fIanchorPos\fR
\fIAnchorPos\fR tells how to position the bitmap relative to the
positioning point for the bitmap;  it may have any of the forms
accepted by \fBTk_GetAnchor\fR.  For example, if \fIanchorPos\fR
is \fCcenter\fR then the bitmap is centered on the point;  if
\fIanchorPos\fR is \fCn\fR then the bitmap will be drawn such that
the top center point of the rectangular region occupied by the
bitmap will be at the positioning point.
This option defaults to \fCcenter\fR.
.TP
\fB\-background \fIcolor\fR
Sets the background color of the bitmap.
If \fIcolor\fR is the empty string,
the background color will be transparent.
The default background color is \fCwhite\fR.
.TP
\fB\-foreground \fIcolor\fR
Sets the foreground color of the bitmap.  
The default foreground color is \fCblack\fR.
.TP
\fB\-bitmap \fIbitmap\fR
Specifies the bitmap to be displayed.
\fIBitmap\fR may have any of the forms accepted by \fBTk_GetBitmap\fR.
If \fIbitmap\fR is the empty string (the default), the tag will not be
displayed.
.TP
\fB\-element \fIname\fR
Associates the tag with the element \fIname\fR.  
If \fIname\fR is not the empty string (the default), the tag is displayed 
only if \fIname\fR exists and is being plotted
(see \fBelement show\fR).  
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the tag's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the tag's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-rotate \fItheta\fR
Sets the rotation of the bitmap.
\fITheta\fR is a
real number representing the angle of rotation in degrees.
The tag is first rotated and then placed according to its anchor position.
The default rotation is \fC0.0\fR.
.TP
\fB\-xoffset \fIpixels\fR
Specifies an offset in the x-coordinate direction
(in window coordinates) from the specified position.
The default offset is \fC0\fR.
.TP
\fB\-yoffset \fIpixels\fR
Specifies an offset in the y-coordinate direction
(in window coordinates) from the specified position.
The default offset is \fC0\fR.
.sp 1
.SS "POLYGON TAGS"
A polygon tag displays a closed region described as two or more 
connected line segments on the graph. 
Polygon tags are created with the widget command:
.DS
\fIpathName \fBtag create polygon \fR?\fIcoords\fR? ?\fIoptions...\fR?
.DE
The argument \fIcoords\fR specifies a list of numeric
expressions representing graph coordinates which
describe the closed polygon.
It is assumed the first and last points are connected.
.P
After the coordinate list there may be any number of \fIoption\fR-\fIvalue\fR
pairs, each of which sets one of the configuration options
for the tag.  These same \fIoption\fR\-\fIvalue\fR pairs may be
used in the \fBtag configure\fR command to change the tag's
configuration.
The following options are supported for polygon tags:
.TP
\fB\-background \fIcolor\fR
Sets the background color of the polygon.  The default background color 
is \fCwhite\fR.  If \fIcolor\fR is the empty string, no background color
.TP
\fB\-dashes \fIdashes\fR
Sets the dash style of the outline around the polygon. \fIDashes\fR
is the number of alternatingly displayed pixels. If \fIdashes\fR is
\fC0\fR (the default), the outline will be drawn as a solid line. 
.TP
\fB\-element \fIname\fR
Associates the tag with the element \fIname\fR.  
If \fIname\fR is not the empty string (the default), the tag is displayed 
only if \fIname\fR exists and is currently being displayed
(see \fBelement show\fR).
.TP
\fB\-foreground \fIcolor\fR
Sets the foreground color of the polygon.  
The default foreground color is \fCblack\fR.
.TP
\fB\-linewidth \fIpixels\fR
Sets the width of the outline of the polygon. If \fIpixels\fR is zero, 
no outline
is drawn. The default width is \fC0\fR.
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the tag's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the tag's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-stipple \fIbitmap\fR
Indicates that the polygon should be drawn with a stippled pattern
rather than a solid color;
\fIbitmap\fR specifies the stipple pattern to use, in any of the
forms accepted by \fBTk_GetBitmap\fR.
If \fIbitmap\fR is the empty string (the default), then the polygon
is filled with a solid (foreground) color.
.TP
\fB\-xoffset \fIpixels\fR
Specifies an x-coordinate offset (in window coordinates)
from the specified position.  
The default offset is \fC0\fR.
.TP
\fB\-yoffset \fIpixels\fR
Specifies a y-coordinate offset (in window coordinates)
from the specified position. 
The default is offset \fC0\fR.
.sp 1
.SS "WINDOW TAGS"
A window tag displays a particular window at a given position on the graph.
Window tags are created with the widget command:
.DS
\fIpathName \fBtag create window \fR?\fIcoords\fR? ?\fIoptions...\fR?
.DE
The argument \fIcoords\fR specifies a list containing the graph
coordinates of a point used to position the window on the display 
After \fIcoords\fR, there may be any number of \fIoption\fR-\fIvalue\fR
pairs, each of which sets one of the configuration options
for the tag.  These same \fIoption\fR\-\fIvalue\fR pairs may be
used in the \fBtag configure\fR command to change the tag's
configuration.
The following options are supported for window tags:
.TP
\fB\-anchor \fIanchorPos\fR
\fIAnchorPos\fR tells how to position the window relative to the
positioning point for the window;  it may have any of the forms
accepted by \fBTk_GetAnchor\fR.  For example, if \fIanchorPos\fR
is \fCcenter\fR then the window is centered on the point;  if
\fIanchorPos\fR is \fCn\fR then the window will be displayed such that
the top center point of the rectangular region occupied by the
window will be at the positioning point.
This option defaults to \fCcenter\fR.
.TP
\fB\-element \fIname\fR
Associates the tag with the element \fIname\fR.  
If \fIname\fR is not the empty string, the tag is displayed 
only if \fIname\fR exists and is currently being displayed 
(see \fBelement show\fR).  
This option defaults to the empty string.
.TP
\fB\-height \fIpixels\fR
Specifies the height to assign to the tag's window.
If this option isn't specified, or if it is specified as the empty
string, then the window is given whatever height it requests internally.
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the tag's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the tag's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-width \fIpixels\fR
Specifies the width to assign to the tag's window.
If this option isn't specified, or if it is specified as the empty
string, then the window is given whatever width it requests internally.
.TP
\fB\-window \fIpathName\fR
Specifies the window to be managed by the graph.
The window specified by \fIpathName\fR must be a child of
the \fBblt_barchart\fR widget.
.TP
\fB\-xoffset \fIpixels\fR
Specifies an x-coordinate offset (in window coordinates)
from the specified position. 
The default offset is \fC0\fR.
.TP
\fB\-yoffset \fIpixels\fR
Specifies a y-coordinate offset (in window coordinates)
from the specified position.  
The default offset is \fC0\fR.
.sp 1
.SS "POSTSCRIPT OPTIONS"
The following options are valid for configuring PostScript output using either 
the \fBpostscript\fR or the \fBpsconfigure\fR command. 
.DS
\fIpathName \fBpostscript \fR?\fIfileName\fR? \fIoptions...\fR?

\fIpathName \fBpsconfigure ?\fIoptions...\fR?
.DE
.TP
\fB\-colormap \fIvarName\fR
\fIVarName\fR must be the name of a global array variable
that specifies a color mapping from the X color name to PostScript.
Each element of \fIvarName\fR must consist of PostScript
code to set a particular color value (e.g. ``\fC1.0 1.0 0.0 setrgbcolor\fR'').
When outputting color information in PostScript, it checks
to see if there is an element of \fIvarName\fR with the same
name as the color. If so, it uses the value of the element as the 
PostScript command to set the color.
If this option hasn't been specified, or if there isn't an entry
in \fIvarName\fR for a given color, then it uses the red, green,
and blue intensities from the X color.
.TP
\fB\-colormode \fImode\fR
Specifies how to output color information.  \fIMode\fR must be either
\fBcolor\fR (for full color output), \fCgray\fR (convert all colors
to their gray-scale equivalents) or \fCmono\fR (convert foreground colors
to black and background colors to white).  The default mode is \fCcolor\fR.
.TP
\fB\-fontmap \fIvarName\fR
\fIVarName\fR must be the name of a global array variable
that specifies a font mapping from the X font name to PostScript.
Each element of \fIvarName\fR must consist of a Tcl list with
one or two elements, which are the name and point size of a PostScript font.
When outputting PostScript commands for a particular font, Tk
checks to see if \fIvarName\fR contains an element with the same
name as the specified font. 
If there is such an element, then the font information contained in
that element is used in the PostScript output.  (If the point size 
is omitted from the list, the point size of the X font is used).
Otherwise the X font is examined in an attempt to guess what PostScript 
font to use.  This works only for fonts whose foundry property is
\fIAdobe\fR (such as Times, Helvetica, Courier, etc.).  If all of 
this fails then the font defaults to \fCHelvetica-Bold\fR.
.TP
\fB\-landscape \fIboolean\fR
If \fIboolean\fR is \fCtrue\fR, this specifies the printed area is to 
be rotated 90 degrees.
In non-rotated output the \f(BIx\fR axis of the printed area runs along
the short dimension of the page (``portrait'' orientation);
in rotated output the \f(BIx\fR axis runs along the long dimension of the
page (``landscape'' orientation).
Defaults to \fCfalse\fR.
.TP
\fB\-pageanchor \fIanchor\fR
Specifies which point of the printed area should be appear over
the positioning point on the page (which is given by the \fB\-pagex\fR
and \fB\-pagey\fR options).
For example, \fB\-pageanchor n\fR means that the top center of the
printed area should be over the positioning point.
Defaults to \fCnw\fR.
.TP
\fB\-pageheight \fIsize\fR
Specifies that the height of the graph drawn in PostScript.
The graph is \fInot\fR uniformly scaled since this also scales
the fonts.  \fISize\fR may be any value accepted by \fBTk_GetPixels\fR.
The resulting pixel value is then converted to postscript printer
points.  This means that a height \fI8i\fR will be properly
converted to 8 inches. This options defaults to the height of the graph window.
.TP
\fB\-pagewidth \fIsize\fR
Specifies that the width of the graph drawn in PostScript.
The graph is \fInot\fR uniformly scaled since this also scales
the fonts.  \fISize\fR may be any value accepted by \fBTk_GetPixels\fR.
The resulting pixel value is then converted to postscript printer
points.  This means that a width \fI6.5i\fR will be properly
converted to 6.5 inches. This options defaults to the width of the graph window.
.TP
\fB\-pagex \fIposition\fR
Specifies the x-coordinate of the page positioning point.
This (with the \fB-pageanchor\fR option) indicates 
where the graph is placed on the PostScript page.
\fIPosition\fR may be any value accepted by 
\fBTk_GetPixels\fR. The resulting pixel value is then converted to 
postscript printer points.  The default is \fC1i\fR.
.TP
\fB\-pagey \fIposition\fR
Specifies the y-coordinate of the page positioning point.
This (with the \fB-pageanchor\fR option) indicates 
where the graph is placed on the PostScript page.
\fIPosition\fR may be any value accepted by 
\fBTk_GetPixels\fR. The resulting pixel value is then converted to 
postscript printer points.  The default is \fC1i\fR.
.SH BINDINGS
.PP
There are no default bindings. 
.SH BUGS
.PP
Auto-scale routines do not use requested min/max limits
as boundaries when the axis is logarithmically scaled.  
.PP
The needs to be a special mapping for undefined log scale values (>= 0.0). 
Possibly set up a "red zone" of undefined values which divides the 
positive and negative values.
.PP
The PostScript output generated for polygons with more than 1500 points 
may exceed the limits of some printers (See PostScript Language Reference 
Manual, page 568).  The work-around is to break the polygon into
separate pieces.
.PP
'\"@endhelp
'\"@help: blt/control/bell
'\"
'\" Copyright 1992 Regents of the University of California
'\" Permission to use, copy, modify, and distribute this
'\" documentation for any purpose and without fee is hereby
'\" granted, provided that this notice appears in all copies.
'\" The University of California makes no representations about
'\" the suitability of this material for any purpose.  It is
'\" provided "as is" without express or implied warranty.
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: ring the bell
blt_bell \- ring the bell
.SH SYNOPSIS
\fBblt_bell\fR ?\fIpercent\fR?

.SH DESCRIPTION
.PP
This command is used to ring the keyboard bell. \fIpercent\fR is relative
to the base volume of the keyboard bell and can range from -100 to 100
inclusive.
.PP
If \fIpercent\fR is nonnegative then the bell volume is:
.DS C
base - [(base * \fIpercent\fR) / 100] + \fIpercent\fR
.DE
If \fIpercent\fR is negative then the bell volume is:
.DS C
base + [(base * \fIpercent\fR) / 100]
.DE
\fIpercent\fR defaults to 50 if it is not specified.

.SH KEYWORDS
bell, beep
'\"@endhelp
'\"@help: blt/control/bgexec
'\"
'\" Copyright 1993-1994 by AT&T Bell Laboratories.
'\"
'\" Permission to use, copy, modify, and distribute this software
'\" and its documentation for any purpose and without fee is hereby
'\" granted, provided that the above copyright notice appear in all
'\" copies and that both that the copyright notice and warranty
'\" disclaimer appear in supporting documentation, and that the
'\" names of AT&T Bell Laboratories any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the
'\" software without specific, written prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data
'\" or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\"
'\" Bgexec command created by George Howlett.
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: Run Unix commands in the background
blt_bgexec \- Run Unix commands in the background 
.SH SYNOPSIS
\fBblt_bgexec \fR?\fIswitches\fR? \fIvarname arg\fR ?\fIarg\fR ...?
.sp
\fBblt_bgexec \fR?\fIswitches\fR? \fIarg\fR ?\fIarg\fR ...?
.SH DESCRIPTION
.PP
This command executes one or more Unix
commands in the background as subprocesses, storing the output 
of the last subprocess in the variable \fIvarname\fR after it has completed.  
This allows Unix commands to be run in the background, while still collecting 
their output, to notify the Tcl interpreter when they terminate.
.PP
This command, used in conjunction with \fBtkwait\fR, is particularly useful 
for handling Tk events while waiting for a running UNIX program to finish.
.DS
\fBblt_bgexec \fIvarname command args\fR
.br
\fBtkwait variable\fR \fIvarname\fR
.DE
.PP
This allows expose events can be handled while waiting for one or more 
Unix commands to finish.  The program may also continue, possibly 
animating a busy 
cursor or icon, while waiting for the variable \fIvarname\fR to be set.
After all the subprocesses have completed, \fBblt_bgexec\fR will 
set \fIvarname\fR, triggering \fBtkwait\fR to return.
\fIVarname\fR will contain the output of the last subprocess.
.PP
If the initial arguments to \fBblt_bgexec\fR start with \fB\-\fR then
they are treated as command-line switches and are not part
of the variable name or pipeline specification.  The following 
switches are currently supported:
.TP 13
\fB\-keepnewline
Specifies that a trailing newline should be retained in the pipeline's 
output. Normally a trailing newline will be deleted.  
.TP 13
\fB\-killsignal \fInumber\fR
Specifies the number of the signal to be sent to the Unix subprocesses when 
cleaning up. If \fInumber\fR is \fC0\fR, then no signals are sent.  By 
default, subprocesses are sent signal \fC1\fR (SIGHUP).
.TP 13
\fB\-errorvar \fIstring\fR
Specifies the name of a global variable to be set with the contents of 
standard error after the last subprocess has completed.
.TP 13
\fB\-outputvar \fIstring\fR
Specifies the name of a global variable to be set with the contents of 
standard output after the last subprocess has completed.  If the 
command-line argument \fIvarname\fR is not specified, then this switch 
must be set.
.TP 13
\fB\-statusvar \fIstring\fR
Specifies the name of a global variable to be set with the status
of the last subprocess to complete.  This contents will be a list of 
status information in the form status token, exit code, and description.
.TP 13
\fB\-updatevar \fIstring\fR
Specifies the name of a global variable which is appended with the 
standard output of the last subprocess.  This variable is updated as data 
becomes available (i.e. read from the pipeline), unlike \fIvarname\fR which 
is set \fBafter\fR the last subprocess has completed.
.TP 13
\fB\-\|\-\fR
Marks the end of switches.  The argument following this one will
be treated as the output variable name \fIvarName\fR or the start of 
Unix command even if it starts with 
a \fB\-.
.PP
\fICommand\fR and \fIargs\fR may be in any form accepted by the Tcl \fBexec\fR
command.  You can also prematurely terminate the subprocesses by 
setting \fIvarname\fR 
before the last command has completed.  Each subprocess will be sent
a termination signal (see the \fB-killsignal\fR option).  
.SH BUGS
Care must be taken to prevent an application from preempting itself
by further user-interactions (such as button clicks).  The \fBblt_busy\fR
command is very useful in these situations (see the \fBblt_busy\fR manual).
.SH KEYWORDS
exec, background
'\"@endhelp
'\"@help: blt/control/bitmap
'\"
'\" Copyright 1993-1994 by AT&T Bell Laboratories.
'\" 
'\" Permission to use, copy, modify, and distribute this software
'\" and its documentation for any purpose and without fee is hereby
'\" granted, provided that the above copyright notice appear in all
'\" copies and that both that the copyright notice and warranty
'\" disclaimer appear in supporting documentation, and that the
'\" names of AT&T Bell Laboratories any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the
'\" software without specific, written prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data
'\" or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\"
'\" Bitmap command created by George Howlett.
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: Define bitmap from data
blt_bitmap \- Define bitmap from data
.SH SYNOPSIS
\fBblt_bitmap define \fIname dataList\fR
.sp
\fBblt_bitmap exists \fIname\fR
.sp
\fBblt_bitmap bits \fIname\fR
.sp
\fBblt_bitmap data \fIname\fR
.sp
\fBblt_bitmap height \fIname\fR
.sp
\fBblt_bitmap width \fIname\fR
.sp
\fBblt_bitmap compose \fIname text \fR?\fIoptions\fR?
.SH DESCRIPTION
.PP
This command creates an internal bitmap for Tk from a list of data 
and associates it with a given name.  It essentially offers the 
functionality of \fBTk_DefineBitmap\fR at the Tcl programming level.  
.SH BITMAP COMMANDS
The following commands are available for \fBblt_bitmap\fR:
.TP
\fBblt_bitmap define \fIname dataList\fR 
Associates \fIname\fR with in-memory bitmap data so that \fIname\fR can 
be used in later calls to \fBTk_GetBitmap\fR. 
The \fIname\fR argument is the name of the bitmap; it must
not previously have been defined in either a call to Tk_DefineBitmap or
\fBblt_bitmap\fR.  The argument \fIdataList\fP describes
the bitmap to be created.  It is a list of two elements, the dimensions
and source data.  The dimensions are a list of two numbers which are
the width and height of the bitmap.  The source data is a list 
of hexadecimal values in a format similar to the X11 or X10 bitmap format.  
The values may be optionally separated by commas and do not need to 
be prefixed with "\fC0x\fR". 
.TP
\fBblt_bitmap exists \fIname\fR 
Returns "1" if a bitmap \fIname\fR exists, otherwise "0". 
.TP
\fBblt_bitmap bits \fIname\fR 
Returns the source data of the bitmap \fIname\fR. The source data is a 
list of the hexadecimal values.  
It is an error if \fIname\fR does not represent a valid bitmap.
.TP
\fBblt_bitmap data \fIname\fR 
Returns a list of both the dimensions of the bitmap \fIname\fR and its 
source data. 
It is an error if \fIname\fR does not represent a valid bitmap.
.TP
\fBblt_bitmap height \fIname\fR 
Returns the height of the bitmap \fIname\fR.
It is an error if \fIname\fR does not represent a valid bitmap.
.TP
\fBblt_bitmap width \fIname\fR 
Returns the width of the bitmap \fIname\fR.
It is an error if \fIname\fR does not represent a valid bitmap.
.TP
\fBblt_bitmap compose \fIname text \fR?\fIoptions\fR?
Creates a bitmap \fIname\fR from the text string \fItext\fR.
A bitmap \fIname\fR can not already exist.  
The following options are available.
.RS
.TP
\fB\-font \fIfontName\fR 
Specifies a font to use when drawing text into the bitmap.
If this option isn't specified then \fIfontName\fR defaults to 
\fC*-Helvetica-Bold-R-Normal-*-140-*\fR.
.TP
\fB\-rotate \fItheta\fR
Specifies the angle of rotation of the text in the bitmap.
\fITheta\fR is a real number representing the angle in degrees.
It defaults to \fC0.0\fR degrees.
.RE
.SH EXAMPLES
The following examples demonstrate the various forms \fIdataList\fR 
may take in the \fBblt_bitmap\fR command.
.PP
The elements may or may not be separated by commas.
.DS 
\fCblt_bitmap define light_gray { { 4 2 } { 0x08, 0x02 } }\fR
\fCblt_bitmap define light_gray { { 4 2 } { 0x08 0x02 } }\fR
.DE
.PP
Each element is a hexadecimal number which is optionally prefixed
by "\fC0x\fR".
.DS
\fCblt_bitmap define light_gray { { 4 2 } { 8 2 } }\fR
.DE
.PP
The hex values of data can be represented in either X11 or X10 bitmap 
format.  In X11 bitmap format, each element is an unsigned character.
.DS 
\fCblt_bitmap define face { { 16 16 } {
   0x1f, 0xf8, 0xc7, 0xe3, 0xf3, 0xcf, 0xf9, 0x9f, 
   0xfd, 0xbf, 0xcc, 0x33, 0xfe, 0x7f, 0xfe, 0x7f, 
   0x7e, 0x7e, 0xfe, 0x7f, 0xec, 0x37, 0xdd, 0xbb,
   0x39, 0x9c, 0xf3, 0xcf, 0xc7, 0xe3, 0x1f, 0xf8 } 
}\fR
.DE
.PP
While in X10 format, they instead represent short integers.
.DS 
\fCblt_bitmap define face { 16 16 } { 
    0xf81f, 0xe3c7, 0xcff3, 0x9ff9, 0xbffd, 0x33cc, 
    0x7ffe, 0x7ffe, 0x7e7e, 0x7ffe, 0x37ec, 0xbbdd, 
    0x9c39, 0xcff3, 0xe3c7, 0xf81f
}\fR
.DE
.SH BUGS
.PP
There is no way to delete or redefine a bitmap.
.SH KEYWORDS
bitmap
'\"@endhelp
'\"@help: blt/control/busy
'\"
'\" Copyright 1993-1994 by AT&T Bell Laboratories.
'\"
'\" Permission to use, copy, modify, and distribute this software
'\" and its documentation for any purpose and without fee is hereby
'\" granted, provided that the above copyright notice appear in all
'\" copies and that both that the copyright notice and warranty
'\" disclaimer appear in supporting documentation, and that the
'\" names of AT&T Bell Laboratories any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the
'\" software without specific, written prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data
'\" or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\"
'\" Busy command created by George Howlett.
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: Block pointer and keyboard events from a window sub-tree
blt_busy \- Block pointer and keyboard events from a window sub-tree
.SH SYNOPSIS
\fBblt_busy hold \fIwindow options\fR ?\fIwindow options \fR...?
.sp
\fBblt_busy release \fIwindow\fR ?\fIwindow ...\fR?
.sp
\fBblt_busy configure \fIwindow\fR ?\fIoptions...\fR?
.sp
\fBblt_busy forget \fIwindow\fR ?\fIwindow ...\fR?
.sp
\fBblt_busy hosts \fIpattern\fR
.sp
\fBblt_busy status \fIwindow\fR 
.SH DESCRIPTION
.PP
This command implements a mechanism to prevent keyboard, button, 
and pointer events from reaching a window and its descendants.
Events occurring in this window and its descendants in Tk's window 
hierarchy  are effectively ignored.
.PP
This is particularly useful for temporarily deactivating an hierarchy 
of widgets (e.g. buttons and entries) while other processing is occurring.
.PP
Once a window is made busy using the \fBblt_busy hold\fR command, the window and 
its descendants are blocked from receiving events.  Please note that only the 
descendants which exist at the time the \fBhold\fR command was invoked
are affected.  If a new child window is created following the command, 
its events are \fInot\fR blocked.  
.PP
The blocking feature is implemented by creating and mapping an 
\f(CWInputOnly\fR class sub-window, obscuring some or all of the parent 
window.  When the sub-window is mapped, it shields its parent and 
sibling windows from events (it is always mapped to be the 
uppermost sibling).  The size and position of the busy window are determined
by a host window.  Typically the host and parent windows are the same.  
But in cases where a window is not packed into its parent, the \fB-in\fR option
may be used to specify a different parent.
.PP
The \fBblt_busy\fR command can take any of the following forms:
.TP
\fBblt_busy hold \fIwindow\fR ?\fIoption\fR? ?\fIvalue option value ...\fR?
Creates and activates a busy window associated with \fIwindow\fR.
\fIWindow\fR must be a valid path name of a Tk window.  It represents
the host window which determines the position and size of the busy window.
All device events for the host window and it descendants 
will be effectively blocked.
Typically \fBupdate\fR should be called immediately afterward to insure 
that the busy cursor is updated \fIbefore\fR the application starts its work.
This command returns the empty string.  The following configuration 
options are valid:
.RS
.TP
\fB\-cursor \fIcursorName\fR
Specifies the cursor to be displayed when the busy window is activated.
\fICursorName\fR can be in any form accepted by \fBTk_GetCursor\fR.
The default cursor is \fBwatch\fR.
.TP
\fB\-in \fIparent\fR
Specifies the parent window of the busy window. This is needed when
the parent and host windows are not the same.  \fIParent\fR 
specifies the path name of a mutual ancestor of both the host window and 
the window hierarchy. 
.RE
.TP
\fBblt_busy configure \fIwindow\fR ?\fIoption\fR? ?\fIvalue option value
...\fR?  
Queries or modifies the configuration options of the busy
window.  \fIWindow\fR must be the path name of a host window 
(associated by the \fBhold\fR command).  If no
\fIoption\fR is specified, a list describing all of the available
options for \fIwindow\fR (see \fBTk_ConfigureInfo\fR for information
on the format of this list) is returned.  If \fIoption\fR is specified
with no \fIvalue\fR, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no \fIoption\fR is specified).  If
one or more \fIoption\-value\fR pairs are specified, then the command
modifies the given widget option(s) to have the given value(s); in
this case the command returns the empty string.  \fIOption\fR may have
any of the values accepted by the \fBhold\fR command.
Please note that the option database is referenced through \fIwindow\fR.
For example, if a busy window exists for the window \f(CW.myframe\fR,
the busy window cursor can be specified for it by either \fBoption\fR 
command:
.DS
	\fBoption add \f(CW*myframe.busyCursor gumby\fR
	\fBoption add \f(CW*Frame.BusyCursor gumby\fR
.DE
.TP
\fBblt_busy release \fIwindow\fR ?\fIwindow ...\fR?
Permits events to be received by \fIwindow\fR again. This differs from
the \fBforget\fR command in that the busy window is retained, but is not 
active.  An error is reported if \fIwindow\fR is not a host window. 
This command returns the empty string.
.TP
\fBblt_busy forget \fIwindow\fR ?\fIwindow ...\fR?
Permits events to be received again by \fIwindow\fR by destroying the
busy window.  An error is reported \fIwindow\fR is not a host window.
This command returns the empty string.
.TP
\fBblt_busy hosts \fI?pattern?\fR
Returns the pathnames of all host windows which have a busy window 
associated with them.  If a \fIpattern\fR argument is present, the
pathnames of hosts matching \fIpattern\fR are returned.
.TP
\fBblt_busy status \fIwindow\fR
Returns the status of the busy window associated with \fIwindow\fR.
An error is reported if \fIwindow\fR is not a host window.  
If \fIwindow\fR is currently prevented from receiving
events, \fB1\fR is returned, otherwise \fB0\fR.
.sp 1
.SH KEYBOARD EVENTS
Since Tk allows for keyboard events to be redirected through windows not 
in the parent window's hierarchy, care must be taken to turn off
focus while processing is occurring.
.DS
	\fBblt_busy hold \f(CW.frame\fR
	\fBfocus none\fR
.DE
The above example clears the focus immediately after invoking the 
\fBhold\fR command so that no keyboard events will be relayed to
windows under the hierarchy of \f(CW.frame\fR.
.SH BUGS
.PP
Creating a busy window will generate Enter/Leave events for 
windows that it covers.  Please note this when tracking Enter/Leave
events for windows.
.PP
There's no way to exempt particular windows in an hierarchy so that they
may still receive events.  The busy window is always mapped above its 
siblings. The work around is to create busy windows for
each child in the hierarchy (except for the windows where events
are desired) instead of the parent window.
.PP
When busy windows are created, they are automatically mapped; thus
blocking events from the parent and its descendants.  There is no
two-step process which allows one to create a busy window, and
later when convenient, to activate it so that it blocks events.
.SH KEYWORDS
busy, keyboard events, pointer events, window, cursor
'\"@endhelp
'\"@help: blt/control/cutbuffer
'\"
'\" Copyright 1992 Regents of the University of California
'\" Permission to use, copy, modify, and distribute this
'\" documentation for any purpose and without fee is hereby
'\" granted, provided that this notice appears in all copies.
'\" The University of California makes no representations about
'\" the suitability of this material for any purpose.  It is
'\" provided "as is" without express or implied warranty.
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: manipulate X cut buffer properties
blt_cutbuffer \- manipulate X cut buffer properties
.SH SYNOPSIS
\fBblt_cutbuffer\fI get ?bufNum?\fR
.br
\fBblt_cutbuffer\fI rotate ?count?\fR
.br
\fBblt_cutbuffer\fI set value ?bufNum?\fR

.SH DESCRIPTION
.PP
The \fBblt_cutbuffer\fR command allows you to get or set the values of the
eight X cut buffer properties. The \fBblt_cutbuffer\fR command also allows
you to rotate the values of the cut buffer properties. 
Buffer numbers (\fIbufNum\fR) range from 0 to 7 inclusive and default to
0 if not specified.
.SH CUTBUFFER COMMANDS
The following commands are available for the \fBblt_cutbuffer\fR:
.TP
\fBblt_cutbuffer get \fI?bufNum?\fR 
Returns the value of a cutbuffer. 
\fIBufNum\fR must be in the range from 0 to 7 inclusive and defaults to
0 if not specified.  The cutbuffer is returned as-is except, NUL bytes 
are converted to the '@' character.  If the specified cut buffer does not 
exist the empty string is returned.
.TP
\fBblt_cutbuffer rotate \fI?count?\fR 
Rotates the cut buffers by \fIcount\fR. \fICount\fR is an integer number
in the range from -7 to 7 inclusive and defaults to 1 if it is not specified.
.TP
\fBblt_cutbuffer set \fIvalue\fR ?\fIbufNum\fR?
Sets the specified cutbuffer to \fIvalue\fR.  
\fBBufNum\fR must be an integer number in the range 0 to 7 inclusive 
and defaults to zero if not specified.
This command returns the empty string.

.SH KEYWORDS
cut buffer, property
'\"@endhelp
'\"@help: blt/control/debug
'\"
'\" Copyright 1991-1994 by AT&T Bell Laboratories.
'\"
'\" Permission to use, copy, modify, and distribute this software
'\" and its documentation for any purpose and without fee is hereby
'\" granted, provided that the above copyright notice appear in all
'\" copies and that both that the copyright notice and warranty
'\" disclaimer appear in supporting documentation, and that the
'\" names of AT&T Bell Laboratories any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the
'\" software without specific, written prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data
'\" or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\"
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: print Tcl commands before execution
blt_debug \- print Tcl commands before execution
.SH SYNOPSIS
\fBblt_debug\fR ?\fIlevel\fR?
.SH DESCRIPTION
.PP
This command acts as a simple trace for Tcl commands.
The command is printed on standard error before and after substitutions 
have occurred.
\fILevel\fR indicates at what level to stop tracing commands.
If \fIlevel\fR is 0, no tracing is performed. This is the default.
.PP
If no \fIlevel\fR argument is given, the current level is printed.
.SH CAVEATS
This interface will probably change dramatically in the next
release with new functionality. 
.SH KEYWORDS
debug
'\"@endhelp
'\"@help: blt/control/dragdrop
'\"
'\" MAN PAGE:  drag&drop widget
'\"   AUTHOR:  Michael J. McLennan
'\"     SCCS:  %W% (%G%)
'\" ========================================================================
'\"                 Copyright (c) 1993  AT&T Bell Laboratories
'\" ========================================================================
'\" Permission to use, copy, modify, and distribute this software and its
'\" documentation for any purpose and without fee is hereby granted,
'\" provided that the above copyright notice appear in all copies and that
'\" both that the copyright notice and warranty disclaimer appear in
'\" supporting documentation, and that the names of AT&T Bell Laboratories
'\" any of their entities not be used in advertising or publicity
'\" pertaining to distribution of the software without specific, written
'\" prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data or
'\" profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\" ========================================================================
'\" 
'\" Man page formatting taken from...
'\" Copyright 1992 Regents of the University of California
'\" Permission to use, copy, modify, and distribute this
'\" documentation for any purpose and without fee is hereby
'\" granted, provided that this notice appears in all copies.
'\" The University of California makes no representations about
'\" the suitability of this material for any purpose.  It is
'\" provided "as is" without express or implied warranty.
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: facilities for handling drag&drop data transfers
blt_drag&drop \- facilities for handling drag&drop data transfers
.SH SYNOPSIS
\fBblt_drag&drop source
.br
\fBblt_drag&drop source \fIwindow \fR?\fBconfig \fIoptions\fR?
.br
\fBblt_drag&drop source \fIwindow \fBhandler \fR?\fIdataType command\fR ...?
.sp
\fBblt_drag&drop target
.br
\fBblt_drag&drop target \fIwindow \fBhandler \fR?\fIdataType command\fR ...?
.sp
\fBblt_drag&drop target \fIwindow \fBhandle \fIdataType
.sp
\fBblt_drag&drop drag \fIwindow x y
.br
\fBblt_drag&drop drop \fIwindow x y
.br
\fBblt_drag&drop active
.br
\fBblt_drag&drop errors \fR?\fIproc\fR?
.br
\fBblt_drag&drop location \fR?\fIx y\fR?

.SH DESCRIPTION
.PP
The \fBblt_drag&drop\fR command provides access to a set of facilities
for managing drag-and-drop data transfers.  Any of the usual Tk widgets can
be registered to participate in the drag-and-drop process.  Widgets
registered as a drag&drop \fIsource\fP can export data to other widgets
registered as a drag&drop \fItarget\fP.  Note that a particular widget
can be registered as a source, as a target, or as both.
.PP
The drag-and-drop process begins when the user clicks and holds a mouse
button in a source window; a token window appears with an icon or message
to represent the data being transferred.  As the user moves the mouse pointer,
the token window follows along, acting as a movable packet of data.
Whenever the mouse pointer falls on a valid target window, the border of the
token window is changed to a raised (active) state.  When the mouse button is
released over the target window, a Tcl routine is invoked to send the data
to the desired application.  If this communication process fails,
a rejection symbol (a circle with a line through it) is displayed
on the token window to indicate failure.
.PP
The details of the communication process are fully configurable by the
application developer.  The general philosophy, however, is that the
sender should invoke a series of commands in the remote application to
transfer data into a buffer, and then request that the receiver "handle"
the data.  For example, the sender might invoke a command like
\fB"set DragDrop(number) 12.3"\fP in the target application.
The sender would then request that the target "handle" a "number".  This
separation between the data sent and the means of handling it is critical.
It allows the developer a simple means of having several targets that all
receive "numbers" but use them in different ways.
.PP
Both sources and targets must be registered with a list of "handlers"
defining the data types that they recognize.  As a token window is
dragged from its source to various targets, each target is checked to
see if it recognizes a "handler" offered by the source.  If it does,
it is treated as a "valid" target.  Otherwise, it is ignored.  This
scheme allows the same source to interact with many different kinds of
targets.  A source for RGB color samples, for instance, might have
"color" and "text" handlers.  This would allow it to communicate with
"color" targets (sending RGB data) as well as entry widgets (sending
strings of the form "#rrggbb").
.PP
For drag&drop to be effective across many applications, handlers for
\fIsending\fR various data types should be common.  For this reason,
a directory "demos/dd_protocols" containing a number of example handlers
is included with this distribution.  Developers are encouraged to
use this library and contribute new functions.
.PP
This introduction was presented as a brief overview of the communication
process; further details are presented below:
.TP
\fBblt_drag&drop source\fR
Returns a list of path names for widgets registered as drag&drop
sources.  Returns an empty string if no widgets have been registered.
.TP
\fBblt_drag&drop source \fIwindow \fR?\fBconfig \fIoptions\fR?
Registers a new drag&drop source window with the given options, or
modifies the options for an existing window:
.RS
.LP
.nf
Name:	\fBbuttonBinding\fR
Class:	\fBButtonBinding\fR
Switch:	\fB\-button\fR \fIn\fR
.fi
.IP
Specifies the mouse button (integer 1-5) that will invoke the drag&drop
operation on the source window.  This causes the following bindings to
be added to the widget:
.sp
.nf
.RS
\f(CWbind \fIwin\fP <ButtonPress-\fIn\fP> {blt_drag&drop drag %W %X %Y}
\f(CWbind \fIwin\fP <B\fIn\fP-Motion> {blt_drag&drop drag %W %X %Y}
\f(CWbind \fIwin\fP <ButtonRelease-\fIn\fP> {blt_drag&drop drop %W %X %Y}\fR
.RE
.fi
.sp
The default value is button 3.  If the value "0" is specified, then no
bindings are added; this enables the user to establish bindings manually.
.LP
.nf
Name:	\fBpackageCommand\fR
Class:	\fBCommand\fR
Switch:	\fB\-packagecmd \fIprefix\fR
.fi
.IP
Specifies a Tcl command used to establish the appearance of the token window
at the start of each drag&drop operation.  This command is automatically
invoked by the \fBblt_drag&drop drag\fP command whenever the token window
is about to be mapped for a drag operation.  The path name for the token
window is automatically appended to the command before it is executed:
.sp
.nf
.RS
\fIpackagecmd token\fR
.RE
.fi
.sp
Typically, this command is the name of a procedure (taking the token window
argument) which will pack a label--or update the text of a label--in the
token window.
.LP
The return value from the package command is later passed as an argument
to the send handler; thus, it is the responsibility of the package command
to determine what information will later be sent.  For complex sources,
such as a listbox containing a number of items, the package command can use
the \fBblt_drag&drop location\fR command to determine the part of a widget
that a user has selected and extract a value.  For example, the following
package routine will select an item from a listbox and configure the token
window to display the selected string:
.sp
.nf
.RS
\f(CWproc package_list_item {lbox token} {
    if {[winfo children $token] == ""} {
        label $token.value
        pack $token.value
    }
    set xy [blt_drag&drop location]
    set y  [expr [lindex $xy 1]-[winfo rooty $lbox]]

    set str [$lbox get [$lbox nearest $y]]
    $token.value config -text $str
    return $str
}\fR
.RE
.fi
.sp
If the package command returns an empty string, the drag operation is
quietly aborted.  This can be used to disallow drag&drop operations from
certain parts of a widget, if the drag position is inappropriate.
.LP
.nf
Name:	\fBrejectBackground\fR
Class:	\fBBackground\fR
Switch:	\fB\-rejectbg \fIcolor\fR
.fi
.IP
Specifies the color used to draw the background of the rejection symbol
on the token window.  The rejection symbol (a circle with a line through
it--the international "no") appears whenever communication fails.
.LP
.nf
Name:	\fBrejectForeground\fR
Class:	\fBForeground\fR
Switch:	\fB\-rejectfg \fIcolor\fR
.fi
.IP
Specifies the color used to draw the foreground of the rejection symbol
on the token window.
.LP
.nf
Name:	\fBrejectStipple\fR
Class:	\fBStipple\fR
Switch:	\fB\-rejectstipple \fIpattern\fR
.fi
.IP
Specifies a stipple pattern used to draw the foreground of the rejection
symbol on the token window.  Any of the forms acceptable to Tk_GetBitmap
can be used.
.LP
.nf
Name:	\fBselfTarget\fR
Class:	\fBSelfTarget\fR
Switch:	\fB\-selftarget \fIboolean\fR
.fi
.IP
If the \fIboolean\fR value is true, and if a source widget is also
registered as a compatible target, then the source will be able to transmit
to itself during drag&drop operations.  This is primarily useful for
complex sources such as a canvas widget, where items may be moved from
place to place within the same widget.  By default, this option is disabled.
.LP
.nf
Name:	\fBsend\fR
Class:	\fBSend\fR
Switch:	\fB\-send \fIlist\fR
.fi
.IP
Specifies a \fIlist\fR of \fIdataTypes\fR enabled for communication.  Only
\fIdataTypes\fR defined by commands of the form \fBblt_drag&drop source
\fIwindow \fBhandler \fR?\fIdataType command\fR ...? are allowed.
This list also determines the priority of the various \fIdataTypes\fR.
When a token window is over a potential drag&drop target, this list is
searched from start to finish for a \fIdataType\fR that is also recognized
by the target.  The first matching \fIdataType\fR found determines the
value that will be sent if the token is dropped.  If no matching \fIdataType\fR
is found, then the target is incompatible, and is ignored.  By default,
this option has the value all, indicating that all \fIdataTypes\fR should
be considered in the order that they were defined for the source.
.LP
Note that this option makes it easy to control a drag&drop source.  Setting
the value to an empty string disables the source; setting the value back
to "all" restores communication.
.LP
.nf
Name:	\fBsiteCommand\fR
Class:	\fBCommand\fR
Switch:	\fB\-sitecmd \fIprefix\fR
.fi
.IP
Specifies a Tcl command used to update the appearance of the token window.
If specified, this command is automatically invoked by the
\fBblt_drag&drop drag\fP command whenever the token window is over a
compatible drag&drop target.  Two arguments are appended to this command:
.sp
.nf
.RS
\fIsitecmd state token\fR
.RE
.fi
.sp
\fIstate\fR is an integer with a non-zero value whenever the token
window is over a compatible target, and \fItoken\fR is the path for the
token window.  Regardless of this command, border of the token window
will become raised whenever the token is over a valid target.  This
command can be used to display other visual cues.
.LP
.nf
Name:	\fBtokenAnchor\fR
Class:	\fBAnchor\fR
Switch:	\fB\-tokenanchor \fIanchor\fR
.fi
.IP
Specifies how the token window is positioned relative to the mouse
pointer coordinates passed to the \fBblt_drag&drop drag\fP command.
Must be one of the values n, s, e, w, center, nw, ne, sw or se.
For example, "nw" means to position the token such that its upper-left
corner is at the mouse pointer.  The default value is "center".
.LP
.nf
Name:	\fBtokenBackground\fR
Class:	\fBBackground\fR
Switch:	\fB\-tokenbg \fIcolor\fR
.fi
.IP
Specifies the color used to draw the background of the token window.
.LP
.nf
Name:	\fBtokenBorderWidth\fR
Class:	\fBBorderWidth\fR
Switch:	\fB\-tokenborderwidth \fIsize\fR
.fi
.IP
Specifies the width in pixels of the border around the token window.
This border becomes raised to indicate when the token is over a compatible
drag&drop target site.  The value may have any of the forms acceptable
to Tk_GetPixels.  The default value is "3".
.LP
.nf
Name:	\fBtokenCursor\fR
Class:	\fBCursor\fR
Switch:	\fB\-tokencursor \fIcursor\fR
.fi
.IP
Specifies the cursor used when a token window is active.  The value
may have any of the forms acceptable to Tk_GetCursor.  The default
value is "center_ptr".
.RE
.TP
\fBblt_drag&drop source \fIwindow \fBhandler \fR?\fIdataType command\fR ...?
Defines one or more \fIdataTypes\fR available for communication, and the
\fIcommands\fR used to send them to remote applications.  If no \fIdataTypes\fR
are specified, then the list of previously defined \fIdataTypes\fR is returned.
.LP
Each \fIcommand\fR represents a Tcl command prefix.  Three arguments are
appended to this prefix when communication is initiated for a particular
\fIdataType\fR:
.sp
.nf
.RS
\fIcommand interp target data\fR
.RE
.fi
.sp
\fIinterp\fR is the name of the interpreter containing the target widget;
\fItarget\fR is the name of the target widget; and \fIdata\fR is the data
string returned from the "package" command invoked at the start of the
drag&drop operation.
.LP
A typical source handler contains one or more "send" commands which
transfer data to the remote application, followed by a "\fBblt_drag&drop
... handle\fR command" (described below) requesting that the target
widget handle the incoming data.  An example source handler for a "text"
data type is shown below:
.sp
.nf
.RS
\f(CWproc dd_send_text {interp ddwin data} {
    send $interp \"
        global DragDrop
        set DragDrop(text) {$data}
    \"
    send $interp "blt_drag&drop target $ddwin handle text"
}\fR
.RE
.fi
.sp
This handler transfers the text string to a global variable DragDrop(text)
in the target interpreter, and then requests that the target "handle" the
incoming data.  This separation between the transfer and the handling of
the data is important.  It allows the same source handler to transfer data
for many different targets, and it allows each of the targets to handle
the incoming data differently.  If an error is encountered during the
communication process, the rejection symbol is posted on the token window
to indicate failure.
.RE
.sp
.TP
\fBblt_drag&drop target\fR
Returns a list of path names for widgets registered as drag&drop
targets.  Returns an empty string if no widgets have been registered.
.TP
\fBblt_drag&drop target \fIwindow \fBhandler \fR?\fIdataType command\fR ...?
Registers a new drag&drop target window with the given handlers, or
modifies the handlers for an existing window.  If no handlers are
specified, this command returns the current list of recognized
\fIdataType\fR strings.  Each \fIdataType\fR is a symbolic name
representing a form of data, and the corresponding \fIcommand\fR is
a Tcl command that specifies how the target will make use of the data.
This command is invoked indirectly whenever a send routine transmits
data and then issues the "blt_drag&drop ... handle \fIdataType\fR" command
to make use of it.
.TP
\fBblt_drag&drop target \fIwindow \fRhandle \fIdataType
Searches for the given \fIdataType\fR name among the handlers registered
for the target \fIwindow\fR, and invokes the appropriate \fIcommand\fR.
If the \fIdataType\fR name is not recognized, this command returns an
error.  Typically, this command is invoked by one of the send handlers
for a drag&drop source.
.TP
\fBblt_drag&drop drag \fIwindow x y\fR
Marks the start of (or movement during) a drag&drop operation.  If
the token window is unmapped when this command is invoked, then the
\fB\-packagecmd\fR for the source \fIwindow\fR is executed.  If this
command is successful and returns a non-null string, the token window
is mapped.  On subsequent calls, the token window is moved to the new
\fIx y\fR location.  Unless the "\fB\-button 0\fR" option is specified for
the source, this command is automatically bound to <ButtonPress-\fIn\fR>
and <B\fIn\fR-Motion> events for "\fB\-button \fIn\fR" of the source widget.
.TP
\fBblt_drag&drop drop \fIwindow x y\fR
Marks the end of a drag&drop operation.  If the mouse pointer is
over a compatible target window, then the appropriate send handler for
the first compatible \fIdataType\fR is invoked to handle the data transfer.
If the data transfer is successful, then the token window is unmapped;
otherwise, a rejection symbol is drawn on the token window, and the window
is unmapped after a small delay.  Unless the "\fB\-button 0\fR" option is
specified for the source, this command is automatically bound to the
<ButtonRelease-\fIn\fR> event for "\fB\-button \fIn\fR" of the source widget.
.TP
\fBblt_drag&drop active\fR
Returns "1" if a drag&drop operation is in progress, and "0" otherwise.
A drag&drop operation officially starts after the package command has
been executed successfully, and ends after the send handler has been
executed (successfully or otherwise).
.TP
\fBblt_drag&drop errors \fR?\fIproc\fR?
Specifies a Tcl \fIproc\fR used to handle errors encountered during
drag&drop operations.  If a \fIproc\fR is not specified, this command
returns the current error handler.  By default, all errors are sent
to the usual \fBtkerror\fR command, and therefore appear in a dialog
box to the user.  This behavior is quite useful when debugging
communication protocols, but may not be desirable in a finished
application.  Errors can be suppressed entirely (leaving the rejection
symbol as the only error indicator) by specifying a null string in
place of the \fIproc\fR name.
.TP
\fBblt_drag&drop location \fR?\fIx y\fR?
Used to set or query the pointer location during a drag&drop operation.
The \fIx y\fR arguments specify the current location; if these arguments
are missing, then the last reported (x,y) location is returned as a list
with two elements.  This command is issued automatically within the
\fBblt_drag&drop drag\fR and \fBblt_drag&drop drop\fR commands, to
keep track of pointer movement.

.SH KEYWORDS
drag&drop, send, bind, widget
'\"@endhelp
'\"@help: blt/widgets/graph
'\"
'\" Copyright 1991-1994 by AT&T Bell Laboratories.
'\"
'\" Permission to use, copy, modify, and distribute this software
'\" and its documentation for any purpose and without fee is hereby
'\" granted, provided that the above copyright notice appear in all
'\" copies and that both that the copyright notice and warranty
'\" disclaimer appear in supporting documentation, and that the
'\" names of AT&T Bell Laboratories any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the
'\" software without specific, written prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data
'\" or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\"
'\" Graph widget created by Sani Nassif and George Howlett.
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: Create and manipulate graph widgets
blt_graph \- Create and manipulate graph widgets
.SH SYNOPSIS
\fBblt_graph\fI \fIpathName \fR?\fIoptions\fR?
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
\fBbackground\fR	\fBcursor\fR	\fBforeground\fR        
\fBborderWidth\fR	\fBfont\fR	\fBrelief\fR            
.fi
.LP
See the ``options'' manual entry for details on the standard options.
.ta 4c
.SH "WIDGET-SPECIFIC OPTIONS"
.LP
.nf
.ta 4c 8c 12c
\fBbottomMargin\fR	\fBleftMargin\fR	\fBtitle\fR     
\fBbufferElements\fR	\fBplotBackground\fR	\fBtopMargin\fR 
\fBhalo\fR	\fBplotBorderWidth\fR	\fBwidth\fR     
\fBheight\fR	\fBplotRelief\fR        
\fBinvertxy\fR	\fBrightMargin\fR       
.fi
.SH DESCRIPTION
.PP
The \fBblt_graph\fR command creates a new window (given by the 
\fIpathName\fR argument) and makes it into an graph widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the graph such as its colors and font.
The \fBblt_graph\fR command returns its
\fIpathName\fR argument.  At the time this command is invoked,
there must not exist a window named \fIpathName\fR, but
\fIpathName\fR's parent must exist.
.PP
The \fBblt_graph\fR widget plots two-variable data in a window.  
It has of several components; coordinate axes, 
crosshairs, a legend, and a collection of elements and tags.
.SS "COORDINATE AXES"
The graph widget has four axes, two standard (x and y) and two alternate
(x2 and y2).  Graph elements and tags are mapped onto one x-axis and 
y-axis (by default, they are mapped onto the standard axes).
.PP
Each axis consists of the axis line and major and minor 
ticks placed at set intervals. At major ticks, labels (text strings) 
representing the coordinate value of the tick are drawn.  
By default, the tick labels are simply numeric strings.  However, 
a Tcl procedure can be supplied to individually format each 
tick label.
.PP
The scale of the axis is determined its minimum and maximum limits.
By default, each axis is auto-scaled using the data limits.
However either limit can be set to manually scale the graph.
.SS "CROSSHAIRS"
Crosshairs are a set of two lines (vertical and horizontal) which
intersect on the graph.  They are implemented using XOR drawing
primitives, so they do not require the graph to be redrawn when 
they are moved or redisplayed.
.SS "ELEMENTS"
A graph element is a set of data points and configuration options 
which determine how the data is displayed.  Elements are created 
by the \fBelement create\fP widget command.  The configuration options may 
be specified as the element is created or later by the \fBelement configure\fR 
widget command.  There is an internal display list of element names which 
controls the drawing order of the elements. By default, elements are 
appended to the display list as they are created.  The element display list
can be managed by the \fBelement show\fR command.  
.SS "LEGEND"
The legend consists of a list of entries, where each entry is an element
symbol and label.  By default, the legend is located in the right
margin of the graph.  However, the legend may appear anywhere in the
plotting area of the graph by specifying its window coordinates.
.SS "TAGS"
Tags are simple drawing procedures used to annotate or highlight
areas of the graph. A tag may be either a text string, bitmap,
line, window, or polygon.  A tag may be associated with a particular 
element, so that the tag is displayed only if the element is 
displayed.  Tags are the first items drawn when the graph is displayed, 
so that elements, symbols, legend, and axes always appear in front of them.  
.PP
Tags differ from elements in that they do not affect the auto-scaling of 
coordinate axes.  Furthermore, tags can have \fIelastic\fR coordinates
(specified by \fC-Inf\fR and \fCInf\fR respectively) which translate into
the axis minimum or maximum limit.  For example, to place a tag so it
always remains in the lower left corner of the plot, use the coordinates
\fC-Inf\fR,\fC-Inf\fR.
.SH "WIDGET COMMANDS"
.PP
The \fBblt_graph\fR command creates a new Tcl command whose
name is \fIpathName\fR.  This
command may be used to invoke various
operations on the widget.  It has the general form:
.DS C
\fIpathName option \fR?\fIarg arg ...\fR?
.DE
\fIOption\fR and the \fIarg\fRs
determine the exact behavior of the command.  The following
commands are valid for \fBblt_graph\fR widgets:
.TP
\fIpathName \fBconfigure \fR?\fIoptions...\fR?
Queries or modifies the configuration options of the widget. 
Valids options are described in
.SB WIDGET OPTIONS.
.TP
\fIpathName \fBcrosshairs configure\fR ?\fIoptions...\fR?
Queries or modifies the configuration options of the crosshairs.
This command is similar to the \fBconfigure\fR command, except that it
applies to the options of the crosshairs, whereas \fBconfigure\fR applies 
to the options for the graph as a whole.  See
.SB CROSSHAIRS OPTIONS
for a description of valid options.
.TP
\fIpathName \fBcrosshairs toggle\fR
Toggles the current state of the crosshairs, turning them on or off.
This command returns an empty string.
.TP
\fIpathName \fBelement activate \fIname \fR?\fIindex...?\fR
Specifies which data points of element \fIname\fR are to be drawn 
using active foreground and background colors.  \fIName\fR is the name
of the element and \fIindex\fR is a number representing the index of 
the data point. If no indices are present then all data points become 
active.  This command returns the empty string.
.TP
\fIpathName \fBelement append \fIname coords\fR
Appends pairs of x,y data points to element \fIname\fR.  
\fIcoords\fR is a list of numeric expressions (x,y graph coordinates) 
representing data points.  It returns the empty string.
.TP
\fIpathName \fBelement closest \fIwinX winY ?name...?\fR
Finds the data point closest to the window coordinates \fIwinX\fR and 
\fIwinY\fR in the element \fIname\fR.  It returns a list containing the 
name of the closest element, the index of its closest point, 
and the graph x,y coordinates of the point.  If no data point
within a threshold distance can be found (see the \fB-halo\fR option), 
then the empty list is returned.  \fIName\fR is the name of an 
element, which must be mapped.  If no elements are specified, then
all mapped elements are searched.  
.TP
\fIpathName \fBelement configure \fIname \fR?\fIoptions...\fR?
This command is similar to the \fBconfigure\fR command, except that it
applies to the options of an individual element, whereas
\fBconfigure\fR applies to the options for the graph as a whole.
\fIOptions\fR may have any of the values accepted by the
\fBelement create\fR widget command. See
.SB ELEMENT OPTIONS
for a description of valid options.
.TP
\fIpathName \fBelement create \fIname \fR?\fIoptions...\fR? 
Creates a new element \fIname\fP in the graph.  Element names must be
unique, so \fIname\fR can not already exist in the graph.  
If additional arguments are present, they specify any of the 
element options (see 
.SB ELEMENT OPTIONS
).
.TP
\fIpathName \fBelement deactivate \fIname ?name...?\fR
Deactivate the named elements.  The elements will be redrawn using
their normal foreground and background colors.  \fIName\fR is the name
of the element. This command returns the empty string.
.TP
\fIpathName \fBelement delete ?\fIname ...\fR?
Deletes the element \fIname\fR from the graph.  
Returns the empty string.
.TP
\fIpathName \fBelement names\fR
Returns a list of all elements. This differs from
\fBelement show\fR in that it returns the names of all elements, not
just those in the element display list.
.TP
\fIpathName \fBelement show \fR?\fInames\fR?
Queries or resets the element display list.  
The element display
list defines which elements are drawn and in what order.  
\fINames\fR is a list of the elements to
be displayed.  If there is no \fInames\fR argument, the list of elements 
currently being displayed is returned.
.TP
\fIpathName \fBinvtransform \fIwinX winY\fP 
Performs an inverse coordinate transformation, mapping x,y window 
coordinates to graph coordinates (using the standard x and y axes).  
Returns a list of containing the x and y graph coordinates.
.TP
\fIpathName \fBlegend activate \fIname...\fR
Specifies that the legend entries of the named elements should be drawn 
with the active legend background and foreground colors.  The entries may 
also be drawn with a different relief (using the \fB-activerelief\fR and 
\fB-activeborderwidth\fR options).
\fIName\fR is the name of an element in the graph.
.TP
\fIpathName \fBlegend configure \fR?\fIoptions...\fR?
This command is similar to the \fBconfigure\fR command, except that it
applies to the options for the legend, whereas \fBconfigure\fR applies
to the options for the graph as a whole.  See 
.SB LEGEND OPTIONS
for a description of valid options.  
.TP
\fIpathName \fBlegend deactivate \fIname...\fR
Specifies that the legend enties of the named elements should be drawn 
with the legend background and foreground colors.  \fIName\fR is the 
name of an element in the graph.
.TP
\fIpathName \fBlegend get \fIstring\fR
Returns the name of the graph element at the current screen position
in the legend.  \fIString\fR must be in the form \fI@x,y\fR, where 
\fIx\fR and \fIy\fR are the window coordinates.  If the given screen 
coordinates do not lie over a legend entry, the empty string is returned.
.TP
\fIpathName \fBpostscript \fR?\fIfileName\fR? ?\fIoptions...\fR?
Generates PostScript commands to print the graph. If no \fIfileName\fR
argument is present, the PostScript output is returned. Otherwise,
\fIfileName\fR is created and will contain the PostScript output.  In
this case the empty string is returned.  If any \fIoption-value\fR
pairs are present, they set configuration options controlling how the
PostScript is generated. See 
.SB POSTSCRIPT OPTIONS
for a description of valid options.
.TP
\fIpathName \fBpsconfigure \fR?\fIoptions...\fR?
Queries or modifies the options of the \fBpostscript\fR command.  
See 
.SB POSTSCRIPT OPTIONS
for a description of valid options.  
.TP
\fIpathName \fBtag after \fItagId\fR ?\fItagId\fR?
Reorders the tag display list placing the first tag specified after
the second.  If no second \fItagId\fR argument is specified, the tag
is placed at the end of the list.  This command can be used to control
how tags are displayed since tags are drawn in the order of this
display list.  The empty string is returned.
.TP
\fIpathName \fBtag before \fItagId\fR ?\fItagId\fR?
Reorders the tag display list placing the first tag specified before
the second.  If no second \fItagId\fR argument is specified, the tag
is placed at the beginning of the list.  This command can be used to
control how tags are displayed since tags are drawn in the order of
this display list.  The empty string is returned.
.TP
\fIpathName \fBtag configure \fItagId\fR ?\fIoptions...\fR? 
Queries or modifies the configuration options of the particular tag.
See 
.SB TAG OPTIONS
for a description of valid options.
.TP
\fIpathName \fBtag coords \fItagId\fR ?\fIcoords\fR? 
Queries or resets the coordinates of the tag designated by
\fItagId\fR.  If \fIcoords\fR is present, it is a list of coordinate pairs
representing the points of the tag.  This list is used to re-position the tag.
If the \fIcoords\fR argument is not present, the current list of
coordinates for \fItagId\fR is returned.
.TP
\fIpathName \fBtag create \fItype\fR ?\fIcoords\fR? ?\fIoptions...\fR?
Creates a tag of the selected type. \fIType\fR may be either
\fCtext\fR, \fCline\fR, \fCbitmap\fR, \fCpolygon\fR, or \fCwindow\fR.
\fIcoords\fR is a list of coordinate pairs of points used
to position the tag.  See
.SB TAG OPTIONS
for a description of valid options.  This command returns a
unique tag identifier, which is used as the \fItagId\fR argument in
other tag-related commands.
.TP
\fIpathName \fBtag delete \fItagId\fR ?\fItagId..\fR?
Deletes each of the specified tags.  This command returns the empty string.
.TP
\fIpathName \fBtag ids\fR ?\fIpattern\fR? 
Returns a list of IDs of tags created.  If \fIpattern\fR is supplied,
only those tags whose IDs matching it will be returned.
.TP
\fIpathName \fBtag type \fItagId\fR 
Returns the type of the tag given by \fItagId\fR, such as
\fCLine\fR or \fCText\fR. 
If \fItagId\fR is not a valid a tag identifier, the empty string is returned.
.TP
\fIpathName \fBtransform \fIx y\fP 
Transforms the graph coordinates into window coordinates, by mapping
the \fIx\fR and \fIy\fR values onto the standard axes (x and y).
Returns a list containing the x and y window coordinates.
Please note that graph coordinates far outside of the axis range are 
not guarenteed to be accurate.
.TP
\fIpathName \fBxaxis configure\fR ?\fIoptions...\fR? 
.TP
\fIpathName \fByaxis configure\fR ?\fIoptions...\fR? 
.TP
\fIpathName \fBx2axis configure\fR ?\fIoptions...\fR? 
.TP
\fIpathName \fBy2axis configure\fR ?\fIoptions...\fR? 
Queries or modifies the configuration options of the coordinate axis.  
See 
.SB AXIS OPTIONS
for a description of valid options.
.TP
\fIpathName \fBxaxis limits\fR
.TP
\fIpathName \fByaxis limits\fR
.TP
\fIpathName \fBx2axis limits\fR
.TP
\fIpathName \fBy2axis limits\fR
Returns a list of two graph coordinates representing the minimum and maximum 
limits of the x-axis.  The format of the list returned is \fCmin max\fR.
.sp 1
.SH "CONFIGURATION OPTIONS"
.SS "WIDGET OPTIONS"
The following widget options are valid for the \fBconfigure\fR command.  
.DS
\fIpathName \fBconfigure\fR ?\fIoption\fR? ?\fIvalue option value ...\fR?
.DE
The \fBconfigure\fR command queries or modifies the configuration options 
of the widget.  If no \fIoption\fR is specified, returns a list 
describing all of the
available options for \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on the format of this list).  
If \fIoption\fR is specified with no \fIvalue\fR, then the command 
returns a list describing the one named option (this list will be 
identical to the corresponding sublist of the value returned if 
no \fIoption\fR is specified).  If one or more \fIoption\-value\fR 
pairs are specified, then the command
modifies the given widget option(s) to have the given value(s); in
this case the command returns the empty string.  
.TP
\fB\-bottommargin \fIpixels\fR
Specifies the size of the margin from the x-coordinate axis to the 
bottom of the window.  The x-axis title is displayed in this margin.  
\fIPixels\fR may be specified in any of the forms described in 
\fBTk_GetPixels\fR.  If \fIpixels\fR is less than one pixel, the 
the margin size is selected automatically.
.TP
\fB\-bufferelements \fIboolean\fR
Specifies whether to use a pixmap to cache the display of elements.
This is especially useful when there are many data points or the
graph is redrawn frequently.  \fIBoolean\fR is \fCtrue\fR by default.
.TP
\fB\-halo \fIpixels\fR
Specifies a threshold distance when searching for the closest data 
point (see the \fBelement closest\fR command).  Only data points
within this distance are considered in the search.
If this option isn't specified, it defaults to \fC0.5i\fR.
.TP
\fB\-height \fIpixels\fR
Specifies a desired window height that the graph widget should 
request from its geometry manager. The default height is \fC400\fR.
.TP
\fB\-invertxy \fIboolean\fR
Specifies that placement of the x and y axes should be inverted.
If \fIboolean\fR is \fCtrue\fR, the x-axis is exchanged with the
y-axis.  By default \fIboolean\fR is \fCfalse\fR.
.TP
\fB\-leftmargin \fIpixels\fR
Sets the size of the margin from the left edge of the window to the
the y-coordinate axis.  The y-axis title is displayed in this
margin.  If \fIpixels\fR is less than one pixel, 
the margin size is selected automatically.
.TP
\fB\-plotbackground \fIcolor\fR
Sets the background color of the plotting area.  
.TP
\fB\-plotborderwidth \fIpixels\fR
Sets the width of the 3-D border to draw around the outside of
the plotting area (if such border is being drawn; the \fBplotrelief\fR option
determines this).  By default is the plot border width is \fC2\fR.
.TP
\fB\-plotrelief \fIstring\fR
Specifies the 3-D effect desired for the plotting area.  
\fIString\fR must be in a form accepted by \fBTk_GetRelief\fR. 
It indicates how the interior of the plotting area should appear 
relative to rest of the graph; for example, \fCraised\fR means the 
plot should appear to protrude from the graph, relative to the surface 
of the graph.  By default, the plot relief is \fCsunken\fR.
.TP
\fB\-rightmargin \fIpixels\fR
Sets the size of marging from the plotting area to the right edge 
of the window.  By default, the legend is displayed in this margin.  
If \Ipixels\fR is than 1, the margin size
is selected automatically.
.TP
\fB\-title \fIstring\fR
Specifies the title of the graph.  If \fIstring\fR is the empty string 
(the default), no title is displayed.
.TP
\fB\-topmargin \fIpixels\fR
Sets the size of the marging the top edge of the window to the plotting area.
The graph title is displayed in this margin.  
If \fIpixels\fR is less than 1, the margin size
is selected automatically.
.TP
\fB\-width \fIpixels\fR
Specifies a desired window width that the graph widget should
request from its geometry manager.  The default width is \fC400\fR.
.sp 1
.SS "AXIS OPTIONS"
The following options are valid for the \fBxaxis configure\fR, 
\fByaxis configure\fR, \fBx2axis configure\fR, and the \fBy2axis configure\fR commands.  
.DS
\fIpathName \fBxaxis configure \fR?\fIoptions...\fR?

\fIpathName \fByaxis configure \fR?\fIoptions...\fR?

\fIpathName \fBx2axis configure \fR?\fIoptions...\fR?

\fIpathName \fBy2axis configure \fR?\fIoptions...\fR?
.DE
In addition, axis configuration options may be initialized by the
\fBoption\fR command.  The name fields in the \fBblt_graph\fR 
option database are
prefixed by \fCx\fR, \fCy\fR, \fCx2\fR, or \fCy2\fR while 
the class fields are prefixed by \fCAxis\fR. The following example sets 
the color of all axes to blue and the x-axis scale to logarithmic.
.DS
\fCoption add *Blt_graph.AxisColor blue\fR
\fCoption add *Blt_graph.xLogscale true\fR
.DE
.TP
\fB\-color \fIcolor\fR
Sets the color of the axis and its labels.
This option defaults to \fCblack\fR.
.TP
\fB\-command \fIprefix\fR
Specifies a Tcl command to be invoked when formatting the axis labels.
\fIPrefix\fR is typically just the name of a Tcl procedure, but the string
may also contain extra arguments for the procedure.  When invoked, two
arguments (the path name of the graph widget and the numeric value of
the axis label) are appended to the end of the command.  The procedure
value should be a string representing the formatted label. If the value is
the empty string or if \fIprefix\fR is the empty string, the default axis
label is displayed.  Please note that this procedure is invoked during
the display of the graph.  Resetting graph configurations within this 
procedure can cause unexpected results.
.TP
\fB\-descending \fIboolean\fR
Specifies whether the values along the axis are increasing or decreasing.  
If \fIboolean\fR is true, the axis values will decrease.
By default, the axis values increase.
.TP
\fB\-font \fIfontName\fR 
Specifies the font for axis labels. If
\fIfontName\fR isn't specified then it defaults to
\fC*-Courier-Bold-R-Normal-*-100-*\fR.
.TP
\fB\-linewidth \fIpixels\fR
Sets the line width of the axis and its ticks.  The default line
width is \fC0\fR.
.TP
\fB\-logscale \fIboolean\fR
Sets the scale of the coordinate axis (either logarithmically or
linearly).  If \fIboolean\fR is \fCtrue\fR, the axis will be displayed
in logarithmic scale.  \fIBoolean\fR must be a value accepted by
\fBTcl_GetBoolean\fR.  By default, the scale is linear.
.TP
\fB\-loose \fIboolean\fR
Indicates that when auto-scaling the axis, the axis range 
should fit loosely around the data points at the outer tick intervals.  
Otherwise the axis range fits tightly at the limits of the data displayed. 
By default, the range is tight.
.TP
\fB\-mapped \fIboolean\fR
Specifies if the axis should be displayed. By default, the standard
axes are displayed (x and y), but not the alternate (x2 and y2).
.TP
\fB\-max \fIvalue\fR
Sets the maximum limit of the axis.  Data points exceeding this
limit are clipped at this value. If \fIvalue\fR is the empty string
(the default), the axis is auto-scaled whereby the maximum limit is
determined from the data points of the displayed elements.
.TP
\fB\-min \fIvalue\fR
Sets the minimum limit of the axis. Data points less than this
limit are clipped at this value.  If \fIvalue\fR is the empty string
(the default), the axis is auto-scaled whereby the minimum limit is
determined from the data points of the displayed elements.
.TP
\fB\-rotate \fItheta\fR
Specifies the rotation of the axis labels.  \fITheta\fR is a
real number representing the angle of rotation in degrees.
The default rotation is \fC0.0\fR degrees.
.TP
\fB\-showticks \fIboolean\fR
Indicates if axis ticks should be displayed. If \fIboolean\fR is
\fCtrue\fR (the default), ticks are displayed.
.TP
\fB\-stepsize \fIvalue\fR
Sets the step size between major axis ticks.  \fIValue\fR must be
greater than zero and less than the axis range, or the requested step size 
is ignored and the step size is automatically calculated based
upon the element data points.
.TP
\fB\-subticks \fInumber\fR
Sets the number of minor axis ticks to be displayed.  By default, the
number of minor ticks is \fC5\fR.  If \fInumber\fR is zero, no subticks
will be displayed.
.TP
\fB\-ticklength \fIpixels\fR
Sets the length of the ticks and subticks (subticks are one-half \fIpixels\fR).
If \fIpixels\fR is negative, ticks will point towards the plot, instead
of away from it.  The tick length is \fC0.1i\fR.  
.TP
\fB\-title \fIstring\fR
Sets the title of the axis. If \fIstring\fR is the
empty string, no axis title will be displayed.  
.sp 1
.SS "CROSSHAIRS OPTIONS"
.PP
The following options are valid for the \fBcrosshair configure\fR command.
.DS
\fIpathName \fBcrosshairs configure\fR ?\fIoptions...\fR?
.DE
In addition, crosshairs configuration options may be initialized by the 
\fBoption\fR command.  The name fields in the \fBblt_graph\fR option database
are prefixed by
by \fCxhairs\fR and classfields are prefixed by \fCXhairs\fR. 
The following example sets the line width of the crosshairs to \fC2\fR.
.DS
\fCoption add *Blt_graph.xhairsLinewidth 2\fR
.DE
.TP
\fB\-color \fIcolor\fR 
Sets the color of the crosshairs.  
If this option isn't specified, then it defaults to \fCblack\fR.
.TP
\fB\-dashes \fIdashes\fR
Sets the dash style of the crosshairs. \fIdashes\fR
is the number of alternatingly displayed pixels. If \fIdashes\fR is
\fC0\fR (the default), the crosshairs will be drawn as a solid line. 
.TP
\fB\-linewidth \fIpixels\fR
Set the line width of crosshairs.  The default line width is \fC0\fR.
.TP
\fB\-mapped \fIboolean\fR
Specifies if the crosshairs should be displayed. By default, 
the crosshairs are not displayed.  
.TP
\fB\-position \fIstring\fR
Specifies the position of the crosshairs. \fIString\fR must be in the
format \fI@x,y\fR, where \fIx\fR and \fIy\fR 
are window coordinates.  
.sp 1
.SS "ELEMENT OPTIONS"
.PP
The following options are valid for the \fBelement create\fR and 
\fBelement configure\fR commands.
\fIName\fR is the name of the element to be configured.
.DS
\fIpathName \fBelement create \fIname\fR ?\fIoptions...\fR?

\fIpathName \fBelement configure \fIname\fR ?\fIoptions...\fR?
.DE
In addition, element configuration options may be initialized by the 
\fBoption\fR command.  The name fields in the \fBblt_graph\fR option database 
are prefixed by \fCelem\fR. 
The following example sets the symbol type of all elements to \fBline\fR 
and the line width of all elements to \fC2\fR.
.DS
\fCoption add *Blt_graph.elemSymbol line\fR
\fCoption add *Blt_graph.LineWidth 2\fR
.DE
.TP
\fB\-activebackground \fIcolor\fR
Like the \fB-background\fR option, but specifies the background
color to use when drawing data points which are active
(see the \fBelement activate\fR command).
.TP
\fB\-activeforeground \fIcolor\fR 
Like the \fB-foreground\fR option, but specifies the foreground
color to use when drawing data points which are active
(see the \fBelement activate\fR command).
.TP
\fB\-activelinewidth \fIpixels\fR
Sets the width of the lines drawn when the element is active.  
If \fIpixels\fR is zero and the symbol is not \fCline\fR,  no line 
will be drawn when the element is active.
The default line width is \fC1\fR.
.TP
\fB\-background \fIcolor\fR
If the symbol type is \fCline\fR, then \fIcolor\fR specifies the
background color for dashed lines.  For non-line symbols, \fIcolor\fR
specifies the fill color for the symbol (the foreground color is the
outline).  If this option isn't specified then it defaults to
\fCwhite\fR.
.TP
\fB\-dashes \fIdashes\fR
Sets the dash style for lines. \fIdashes\fR is the number of
alternatingly colored (foreground/background) pixels. If \fIdashes\fR 
is \fC0\fR (the default), the line is drawn in a solid fashion.  This 
option only has effect only if the symbol type is \fCline\fR or if the 
line width is greater than zero.
.TP
\fB\-data \fIvalues\fR
Specifies the graph coordinates of the the data points to be plotted.  
\fIValues\fR is a list of valid numeric expressions.  
It this option isn't specified, it defaults to the empty string.
.TP
\fB\-foreground \fIcolor\fR 
Sets the foreground color of the element.
If this option isn't specified then it defaults to \fCblack\fR.
.TP
\fB\-label \fIstring\fR
Sets the element label.  Labels are displayed in the 
legend next to the element symbol.  If \fIstring\fR is the empty 
string, no legend entry will be displayed for the element.  By 
default, the label is the name of the element.
.TP
\fB\-linewidth \fIpixels\fR
Sets the width of the lines drawn.  For non-\fCline\fR symbols, 
if \fIpixels\fR is greater than zero, a line is drawn between 
the symbols.  The default line width is \fC0\fR.
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the element's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the element's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-noretrace \fIboolean\fR
If \fIboolean\fR is \fCtrue\fR, data points where x-coordinate values
are not monotonically increasing (where the current x-coordinate value
is less than the previous) indicate the start of a new line.  In this
case, no connecting line segment will be drawn from the last to the
current point.  If \fIboolean\fR is \fCfalse\fR, all points will be
connected by line segments, regardless of their order. 
The default value is \fCfalse\fR.
.TP
\fB\-scale \fIvalue\fR
Specifies a scale factor for the size of the element's symbol. The default
scale factor is \fC1.0\fR.
.TP
\fB\-symbol \fItype\fR
\fIType\fR specifies the type of symbol to use for plotting data
points.  Valid symbol types are \fCline\fR, \fCsquare\fR, \fCcircle\fR,
\fCdiamond\fR, \fCplus\fR, \fCcross\fR, \fCsplus\fR, 
and \fCscross\fR.  The default
symbol type is \fCline\fR.
.TP
\fB\-trace \fIstring\fR 
Indicates if to trace (draw lines) between data points where values
are increasing or decreasing.  
\fIString\fR must be either
\fCincreasing\fR, \fCdecreasing\fC, or \fCboth\fR.  
For example, if
\fIstring\fR is \fCincreasing\fR, data points where x-coordinate
values are not monotonically increasing (where the current
x-coordinate value is less than the previous) indicate the start of a
new line.  In this case, no connecting line segment will be drawn from
the last to the current point.  If \fIstring\fR is \fCboth\fR, all
points will be connected by line segments, regardless of their order.
The default value is \fCboth\fR.
.TP
\fB\-xdata \fIvalues\fR
Specifies the x-coordinates of the data points to be plotted.  
\fIValues\fR is a list of valid numeric expressions.  It this 
option isn't specified, it defaults to the empty string.
.TP
\fB\-ydata \fIvalues\fR
Specifies the y-coordinates of the data points to be plotted.  
\fIValues\fR is a valid list of numeric expressions.  It this 
option isn't specified, it defaults to the empty string.
.sp 1
.SS "LEGEND OPTIONS"
The following options are valid for the \fBlegend configure\fR command.
.DS
\fIpathName \fBlegend configure \fR?\fIoptions...\fR?
.DE
In addition, legend configuration options may be initialized by the
\fBoption\fR command.  The name fields in the \fBblt_graph\fR 
option database are
prefixed by \fClegend\fR.  The following example initializes the
legend foreground color to blue in the option database.
.DS
\fCoption add *Blt_graph.legendForeground blue\fR
.DE
.TP
\fB\-activebackground \fIcolor\fR
Sets the active background color of the legend.  All legend entries
marked as active (see \fBlegend activate\fR command) are drawn with
this background color.
.TP
\fB\-activeborderwidth \fIpixels\fR
Sets the width of the 3-D border to draw around the outside of
the each active legend entry (if such border is being drawn; 
the \fB-activerelief\fR option determines this).  By default is the 
active border width is \fC2\fR.
.TP
\fB\-activeforeground \fIcolor\fR
Sets the active foreground color of the legend.  All legend entries
marked as active (see \fBlegend activate\fR command) are drawn with
this foreground color.
.TP
\fB\-activerelief \fIstring\fR
Specifies the 3-D effect desired for active legend entries.  \fIString\fR 
must be in a form accepted by \fBTk_GetRelief\fR. 
It indicates how  the interior of the entry should appear relative to 
the legend; for
example, \fCraised\fR means the entry should appear to protrude from
the legend, relative to the surface of the legend.  By default, the
active legend relief is \fCflat\fR.
.TP
\fB\-anchor \fIanchorPos\fR
Tells how to position the legend relative to the positioning point for
the legend; \fIanchorPos\fR may have any of the forms accepted by
\fBTk_GetAnchor\fR.  For example, if \fIanchorPos\fR is \fCcenter\fR
then the legend is centered on the point; if \fIanchorPos\fR is
\fCn\fR then the legend will be drawn such that the top center point
of the rectangular region occupied by the legend will be at the
positioning point.  This option defaults to \fCcenter\fR.
.TP
\fB\-background \fIcolor\fR
Sets the background color of the legend. \fIcolor\fR must be a valid
color, it can not be the empty string.
.TP
\fB\-borderwidth \fIpixels\fR
Sets the width of the 3-D border to draw around the outside of
the legend (if such border is being drawn; the \fBrelief\fR option
determines this).  By default is the legend border width is \fC2\fR.
.TP
\fB\-font \fIfontName\fR 
\fIFontName\fR specifies a font to use when drawing the labels of each
element into the legend.  If this option isn't specified then it
defaults to \fC*-Helvetica-Bold-R-Normal-*-120-*\fR.
.TP
\fB\-foreground \fIcolor\fR 
Sets the foreground color of the element labels in the legend.  
If this option isn't specified, then it defaults to \fCblack\fR.
.TP
\fB\-ipadx \fIpixels\fR
Sets the internal padding to the width of the legend. 
Padding will be added to both the left and right and
between the elements symbol and label.
By default is the legend border width is \fC2\fR.
.TP
\fB\-ipady \fIpixels\fR
Sets the internal padding to the height of the legend. 
Padding will be added to both the top and bottom and
between the elements labels.
By default is the legend border width is \fC2\fR.
.TP
\fB\-mapped \fIboolean\fR
Indicates if the legend should be displayed. If \fIboolean\fR is
\fCtrue\fR (the default), the legend will be mapped.  
.TP
\fB\-padx \fIpixels\fR
Specifies extra padding on the left and right of the legend.
The default is \fC4\fR.
.TP
\fB\-pady \fIpixels\fR
Specifies extra padding on the top and bottom of the legend.
The default is \fC0\fR.
.TP
\fB\-position \fIstring\fR
Sets the positioning point of the legend in window coordinates.
This option in conjunction with the \fB-anchor\fR option, determines
where the legend is positioned. The format of \fIstring\fR is
\fI@x,y\fR, where \fIx\fR and \fIy\fR are the window coordinate
values.  If \fIstring\fR is the empty string (the default), the legend
will be displayed in the right margin (which is automatically extended
to accommodate the legend).
.TP
\fB\-relief \fIstring\fR
Specifies the 3-D effect desired for the legend.  \fIString\fR must be
in a form accepted by \fBTk_GetRelief\fR. 
It indicates how  the interior of the legend should appear relative to 
the graph; for
example, \fCraised\fR means the legend should appear to protrude from
the graph, relative to the surface of the graph.  By default, the
legend relief is \fCsunken\fR.
.sp 1
.SS "TAG OPTIONS"
.PP
The following options are valid for the \fBtag create\fR and \fBtag configure\fR commands.  
\fITagid\fR is the identifier returned by the \fBtag create\fR command.
.DS
\fIpathName \fBtag create \fItype\fR ?\fIcoords\fR? ?\fIoptions...\fR?

\fIpathName \fBtag configure \fItagId\fR ?\fIoptions...\fR?
.DE
Tag configuration options may be initialized by the
\fBoption\fR command.  The name fields in the \fBblt_graph\fR
option database are
prefixed by \fCbmTag\fR, \fCtextTag\fR, \fClineTag\fR,
\fCpolyTag\fR, or \fCwinTag\fR with respect to the tag type.
Class fields are prefixed by \fCTag\fR. The following example sets
the background color of all tags to blue and the foreground color of
all text tags to white.
.DS
\fCoption add *Blt_graph.TagBackground blue\fR
\fCoption add *Blt_graph.textTagForeground white\fR
.DE
The description of tag options is broken into subsections for each tag type.
.sp 1
.SS "TEXT TAGS"
A text tag displays a string of characters on a single line.  They may
be used to annotate regions of the graph.  Text tags are
created with the following widget command:
.DS
\fIpathName \fBtag create text \fR?\fIcoords\fR? ?\fIoptions...\fR?
.DE
The argument \fIcoords\fR specifies a list of two numeric
expressions representing the graph coordinates of a point 
used to position the text on the graph. 
.P
After the coordinate list there may be any number of
\fIoption\fR-\fIvalue\fR pairs, each of which sets one of the
configuration options for the tag.  These same
\fIoption\fR\-\fIvalue\fR pairs may be used in the \fBtag configure\fR
command to change the tag's configuration.  The following
options are supported for text tags:
.TP
\fB\-anchor \fIanchorPos\fR
\fIAnchorPos\fR tells how to position the text relative to the
positioning point for the text; it may have any of the forms accepted
by \fBTk_GetAnchor\fR.  For example, if \fIanchorPos\fR is
\fCcenter\fR then the text is centered on the point; if
\fIanchorPos\fR is \fCn\fR then the text will be drawn such that the
top center point of the rectangular region occupied by the text will
be at the positioning point.  This option defaults to \fCcenter\fR.
.TP
\fB\-background \fIcolor\fR
Sets the background color of the text string.  
If \fIcolor\fR is the empty string, the background will be transparent.
If this option isn't specified then it defaults to \fCwhite\fR.
.TP
\fB\-font \fIfontName\fR
Specifies the text font.
If this option isn't specified, it defaults 
\fC*-Helvetica-Bold-R-Normal-*-120-*\fR.
.TP
\fB\-foreground \fIcolor\fR
Sets the foreground color of the text.  
If this option isn't specified then it defaults to \fCblack\fR.
.TP
\fB\-element \fIname\fR
Associates the tag with the element \fIname\fR.  If \fIname\fR is not
the empty string (the default), the tag is displayed only if
\fIname\fR exists and is currently being displayed (see \fBelement show\fR).
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the tag's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the tag's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-rotate \fItheta\fR
Specifies how the tag is rotated.
\fITheta\fR is a real number representing the angle of rotation in degrees.
The tag is first rotated along its center and is then displayed according 
to its
anchor position. The default rotation is \fC0.0\fR degrees.
.TP
\fB\-text \fIstring\fR
Sets the text string.  The exact way
in which the text string is displayed may be affected by other options
such as \fB-anchor\fR or \fB-rotate\fR.  This option defaults to the
empty string.
.TP
\fB\-xoffset \fIpixels\fR
Specifies a x-coordinate offset (in window coordinates) from the
specified position.  
.TP
\fB\-yoffset \fIpixels\fR
Specifies a y-coordinate offset (in window coordinates) from the
specified position.  
.sp 1
.SS "LINE TAGS"
A line tag displays one or more connected line segments on the graph.
Line tags are created with widget commands in the form:
.DS
\fIpathName \fBtag create line \fR?\fIcoords\fR? ?\fIoptions...\fR?
.DE
The argument \fIcoords\fR specifies a list of numeric
expressions representing the graph coordinate pairs of the points 
connecting the line.
.P
After the \fIcoords\fR there may be any number of \fIoption\fR-\fIvalue\fR
pairs, each of which sets one of the configuration options
for the tag.  These same \fIoption\fR\-\fIvalue\fR pairs may be
used in the \fBtag configure\fR command to change the tag's
configuration.
The following options are supported for line tags:
.TP
\fB\-background \fIcolor\fR
Sets the background color of the line.
The option is affects the line color only when the \fB-stipple\fR option 
is set.  
If this option isn't specified then it defaults to \fCwhite\fR.
.TP
\fB\-dashes \fIdashes\fR
Sets the dash style of the line. \fIDashes\fR
is the number of alternatingly displayed pixels. If \fIdashes\fR is
\fC0\fR (the default), the tag will be drawn as a solid line. 
.TP
\fB\-element \fIname\fR
Associates the tag with the element \fIname\fR.  The tag is displayed
only if an element \fIname\fR exists and is currently displayed (see
\fBelement show\fR).  If \fIname\fR is the empty
string (the default), the tag is displayed.
.TP
\fB\-foreground \fIcolor\fR
Sets the foreground color.  The default foreground color is \fCblack\fR.
.TP
\fB\-linewidth \fIpixels\fR
Sets the width of the lines.
The default width is \fC0\fR.
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the tag's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the tag's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-stipple \fIbitmap\fR
Indicates that the line should be drawn with a stippled pattern rather
than solid; \fIbitmap\fR specifies the stipple pattern to use, may be
in any of the forms accepted by \fBTk_GetBitmap\fR.  If \fIbitmap\fR is 
the empty string (the default) then the line is drawn in a solid fashion.
.TP
\fB\-xoffset \fIpixels\fR
Specifies an offset in the x-coordinate direction
(in window coordinates) from the specified position.
The default offset is \fC0\fR.
.TP
\fB\-yoffset \fIpixels\fR
Specifies an offset in the y-coordinate direction
(in window coordinates) from the specified position.
The default offset ifs \fC0\fR.
.sp 1
.SS "BITMAP TAGS"
A bitmap tag displays a bitmap on the graph.  Bitmap tags are
created with widget commands in the form:
.DS
\fIpathName \fBtag create bitmap \fR?\fIcoords\fR? ?\fIoptions...\fR?
.DE
The argument \fIcoords\fR specifies a list containing the graph
coordinates of a point used to position the bitmap on the display.
After the coordinate list there may be any number of \fIoption\fR-\fIvalue\fR
pairs, each of which sets one of the configuration options
for the tag.  These same \fIoption\fR\-\fIvalue\fR pairs may be
used in the \fBtag configure\fR command to change the tag's
configuration.
The following options are supported for bitmap tags:
.TP
\fB\-anchor \fIanchorPos\fR
\fIAnchorPos\fR tells how to position the bitmap relative to the
positioning point for the bitmap;  it may have any of the forms
accepted by \fBTk_GetAnchor\fR.  For example, if \fIanchorPos\fR
is \fCcenter\fR then the bitmap is centered on the point;  if
\fIanchorPos\fR is \fCn\fR then the bitmap will be drawn such that
the top center point of the rectangular region occupied by the
bitmap will be at the positioning point.
This option defaults to \fCcenter\fR.
.TP
\fB\-background \fIcolor\fR
Sets the background color of the bitmap.
If \fIcolor\fR is the empty string,
the background color will be transparent.
The default background color is \fCwhite\fR.
.TP
\fB\-foreground \fIcolor\fR
Sets the foreground color of the bitmap.  
The default foreground color is \fCblack\fR.
.TP
\fB\-bitmap \fIbitmap\fR
Specifies the bitmap to be displayed.
\fIBitmap\fR may have any of the forms accepted by \fBTk_GetBitmap\fR.
If \fIbitmap\fR is the empty string (the default), the tag will not be
displayed.
.TP
\fB\-element \fIname\fR
Associates the tag with the element \fIname\fR.  
If \fIname\fR is not the empty string (the default), the tag is displayed 
only if \fIname\fR exists and is being plotted
(see \fBelement show\fR).  
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the tag's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the tag's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-rotate \fItheta\fR
Sets the rotation of the bitmap.
\fITheta\fR is a
real number representing the angle of rotation in degrees.
The tag is first rotated and then placed according to its anchor position.
The default rotation is \fC0.0\fR.
.TP
\fB\-xoffset \fIpixels\fR
Specifies an offset in the x-coordinate direction
(in window coordinates) from the specified position.
The default offset is \fC0\fR.
.TP
\fB\-yoffset \fIpixels\fR
Specifies an offset in the y-coordinate direction
(in window coordinates) from the specified position.
The default offset is \fC0\fR.
.sp 1
.SS "POLYGON TAGS"
A polygon tag displays a closed region described as two or more 
connected line segments on the graph. 
Polygon tags are created with the widget command:
.DS
\fIpathName \fBtag create polygon \fR?\fIcoords\fR? ?\fIoptions...\fR?
.DE
The argument \fIcoords\fR specifies a list of numeric
expressions representing graph coordinates which
describe the closed polygon.
It is assumed the first and last points are connected.
.P
After the coordinate list there may be any number of \fIoption\fR-\fIvalue\fR
pairs, each of which sets one of the configuration options
for the tag.  These same \fIoption\fR\-\fIvalue\fR pairs may be
used in the \fBtag configure\fR command to change the tag's
configuration.
The following options are supported for polygon tags:
.TP
\fB\-background \fIcolor\fR
Sets the background color of the polygon.  
The default background color is \fCwhite\fR.
.TP
\fB\-dashes \fIdashes\fR
Sets the dash style of the outline around the polygon. \fIDashes\fR
is the number of alternatingly displayed pixels. If \fIdashes\fR is
\fC0\fR (the default), the outline will be drawn as a solid line. 
.TP
\fB\-element \fIname\fR
Associates the tag with the element \fIname\fR.  
If \fIname\fR is not the empty string (the default), the tag is displayed 
only if \fIname\fR exists and is currently being displayed
(see \fBelement show\fR).
.TP
\fB\-foreground \fIcolor\fR
Sets the foreground color of the polygon.  
The default foreground color is \fCblack\fR.
.TP
\fB\-linewidth \fIpixels\fR
Sets the width of the outline of the polygon. If \fIpixels\fR is zero, 
no outline
is drawn. The default width is \fC0\fR.
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the tag's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the tag's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-stipple \fIbitmap\fR
Indicates that the polygon should be drawn with a stippled pattern
rather than a solid color;
\fIbitmap\fR specifies the stipple pattern to use, in any of the
forms accepted by \fBTk_GetBitmap\fR.
If \fIbitmap\fR is the empty string (the default), then the polygon
is filled with a solid (foreground) color.
.TP
\fB\-xoffset \fIpixels\fR
Specifies an x-coordinate offset (in window coordinates)
from the specified position.  
The default offset is \fC0\fR.
.TP
\fB\-yoffset \fIpixels\fR
Specifies a y-coordinate offset (in window coordinates)
from the specified position. 
The default is offset \fC0\fR.
.sp 1
.SS "WINDOW TAGS"
A window tag displays a particular window at a given position on the graph.
Window tags are created with the widget command:
.DS
\fIpathName \fBtag create window \fR?\fIcoords\fR? ?\fIoptions...\fR?
.DE
The argument \fIcoords\fR specifies a list containing the graph
coordinates of a point used to position the window on the display 
After \fIcoords\fR, there may be any number of \fIoption\fR-\fIvalue\fR
pairs, each of which sets one of the configuration options
for the tag.  These same \fIoption\fR\-\fIvalue\fR pairs may be
used in the \fBtag configure\fR command to change the tag's
configuration.
The following options are supported for window tags:
.TP
\fB\-anchor \fIanchorPos\fR
\fIAnchorPos\fR tells how to position the window relative to the
positioning point for the window;  it may have any of the forms
accepted by \fBTk_GetAnchor\fR.  For example, if \fIanchorPos\fR
is \fCcenter\fR then the window is centered on the point;  if
\fIanchorPos\fR is \fCn\fR then the window will be displayed such that
the top center point of the rectangular region occupied by the
window will be at the positioning point.
This option defaults to \fCcenter\fR.
.TP
\fB\-element \fIname\fR
Associates the tag with the element \fIname\fR.  
If \fIname\fR is not the empty string, the tag is displayed 
only if \fIname\fR exists and is currently being displayed 
(see \fBelement show\fR).  
This option defaults to the empty string.
.TP
\fB\-height \fIpixels\fR
Specifies the height to assign to the tag's window.
If this option isn't specified, or if it is specified as the empty
string, then the window is given whatever height it requests internally.
.TP
\fB\-mapx \fItype\fR
Specifies which x-axis to map the tag's x-coordinates onto.
\fIType\fR must be either \fCx\fR, \fCx2\fR, or \fCboth\fR.  The default
axis is \fCx\fR.
.TP
\fB\-mapy \fItype\fR
Specifies which y-axis to map the tag's y-coordinates onto.
\fIType\fR must be either \fCy\fR, \fCy2\fR, or \fCboth\fR.  The default
axis is \fCy\fR.
.TP
\fB\-width \fIpixels\fR
Specifies the width to assign to the tag's window.
If this option isn't specified, or if it is specified as the empty
string, then the window is given whatever width it requests internally.
.TP
\fB\-window \fIpathName\fR
Specifies the window to be managed by the graph.
The window specified by \fIpathName\fR must be a child of
the \fBblt_graph\fR widget.
.TP
\fB\-xoffset \fIpixels\fR
Specifies an x-coordinate offset (in window coordinates)
from the specified position. 
The default offset is \fC0\fR.
.TP
\fB\-yoffset \fIpixels\fR
Specifies a y-coordinate offset (in window coordinates)
from the specified position.  
The default offset is \fC0\fR.
.sp 1
.SS "POSTSCRIPT OPTIONS"
The following options are valid for configuring PostScript output using either 
the \fBpostscript\fR or the \fBpsconfigure\fR command. 
.DS
\fIpathName \fBpostscript \fR?\fIfileName\fR? \fIoptions...\fR?

\fIpathName \fBpsconfigure ?\fIoptions...\fR?
.DE
.TP
\fB\-colormap \fIvarName\fR
\fIVarName\fR must be the name of a global array variable
that specifies a color mapping from the X color name to PostScript.
Each element of \fIvarName\fR must consist of PostScript
code to set a particular color value (e.g. ``\fC1.0 1.0 0.0 setrgbcolor\fR'').
When outputting color information in PostScript, it checks
to see if there is an element of \fIvarName\fR with the same
name as the color. If so, it uses the value of the element as the 
PostScript command to set the color.
If this option hasn't been specified, or if there isn't an entry
in \fIvarName\fR for a given color, then it uses the red, green,
and blue intensities from the X color.
.TP
\fB\-colormode \fImode\fR
Specifies how to output color information.  \fIMode\fR must be either
\fBcolor\fR (for full color output), \fCgray\fR (convert all colors
to their gray-scale equivalents) or \fCmono\fR (convert foreground colors
to black and background colors to white).  The default mode is \fCcolor\fR.
.TP
\fB\-fontmap \fIvarName\fR
\fIVarName\fR must be the name of a global array variable
that specifies a font mapping from the X font name to PostScript.
Each element of \fIvarName\fR must consist of a Tcl list with
one or two elements, which are the name and point size of a PostScript font.
When outputting PostScript commands for a particular font, Tk
checks to see if \fIvarName\fR contains an element with the same
name as the specified font. 
If there is such an element, then the font information contained in
that element is used in the PostScript output.  (If the point size 
is omitted from the list, the point size of the X font is used).
Otherwise the X font is examined in an attempt to guess what PostScript 
font to use.  This works only for fonts whose foundry property is
\fIAdobe\fR (such as Times, Helvetica, Courier, etc.).  If all of 
this fails then the font defaults to \fCHelvetica-Bold\fR.
.TP
\fB\-landscape \fIboolean\fR
If \fIboolean\fR is \fCtrue\fR, this specifies the printed area is to 
be rotated 90 degrees.
In non-rotated output the \f(BIx\fR axis of the printed area runs along
the short dimension of the page (``portrait'' orientation);
in rotated output the \f(BIx\fR axis runs along the long dimension of the
page (``landscape'' orientation).
Defaults to \fCfalse\fR.
.TP
\fB\-pageanchor \fIanchor\fR
Specifies which point of the printed area should be appear over
the positioning point on the page (which is given by the \fB\-pagex\fR
and \fB\-pagey\fR options).
For example, \fB\-pageanchor n\fR means that the top center of the
printed area should be over the positioning point.
Defaults to \fCnw\fR.
.TP
\fB\-pageheight \fIsize\fR
Specifies that the height of the graph drawn in PostScript.
The graph is \fInot\fR uniformly scaled since this also scales
the fonts.  \fISize\fR may be any value accepted by \fBTk_GetPixels\fR.
The resulting pixel value is then converted to postscript printer
points.  This means that a height \fI8i\fR will be properly
converted to 8 inches. This options defaults to the height of the graph window.
.TP
\fB\-pagewidth \fIsize\fR
Specifies that the width of the graph drawn in PostScript.
The graph is \fInot\fR uniformly scaled since this also scales
the fonts.  \fISize\fR may be any value accepted by \fBTk_GetPixels\fR.
The resulting pixel value is then converted to postscript printer
points.  This means that a width \fI6.5i\fR will be properly
converted to 6.5 inches. This options defaults to the width of the graph window.
.TP
\fB\-pagex \fIposition\fR
Specifies the x-coordinate of the page positioning point.
This (with the \fB-pageanchor\fR option) indicates 
where the graph is placed on the PostScript page.
\fIPosition\fR may be any value accepted by 
\fBTk_GetPixels\fR. The resulting pixel value is then converted to 
postscript printer points.  The default is \fC1i\fR.
.TP
\fB\-pagey \fIposition\fR
Specifies the y-coordinate of the page positioning point.
This (with the \fB-pageanchor\fR option) indicates 
where the graph is placed on the PostScript page.
\fIPosition\fR may be any value accepted by 
\fBTk_GetPixels\fR. The resulting pixel value is then converted to 
postscript printer points.  The default is \fC1i\fR.
.SH "SETTING DATA FROM C"
The data points of any element can be reset from a C routine using
the convenience function \fBBlt_GraphElement\fR.  This can be useful
in situations where it is too expensive to translate the data values
from string representations.  Another possible use could be to read in
special data file formats.
.sp 1
.nf
\fCint Blt_GraphElement(interp, pathName, elemName, numValues, valueArr)
    Tcl_Interp *interp;         /* Interpreter of the graph widget */
    char *pathName;             /* Path name of the graph widget */
    char *elemName;             /* Name of the element to reset */
    int numValues;              /* Number of values in array */
    double *valueArr;           /* Array of x,y coordinate pairs */
\fR
.fi
The interpreter must be the same as the one containing the graph
widget and both the graph and the element specified must 
already exist.
The data array must contain pairs of x,y coordinates.  The number
specified is the total number values in this array.  The data values 
in the array are copied into the graph widget for that element.
You don't need to worry about allocating space for them.
.PP
\fBBlt_GraphElement\fR will return TCL_OK if successful.
The graph will be redrawn with the new data points at the next idle point.
Otherwise it returns TCL_ERROR and "\fCinterp->result\fR"
will contain an error message.  
.SH BINDINGS
There are no default bindings. 
.SH BUGS
Auto-scale routines do not use requested min/max limits
as boundaries when the axis is logarithmically scaled.  
.PP
The needs to be a special mapping for undefined log scale values (>= 0.0). 
Possibly set up a "red zone" of undefined values which divides the 
positive and negative values.
.PP
The PostScript output generated for polygons with more than 1500 points 
may exceed the limits of some printers (See PostScript Language Reference 
Manual, page 568).  The work-around is to break the polygon into
separate pieces.
.SH KEYWORDS
graph, widget
'\"@endhelp
'\"@help: blt/widgets/htext
'\"
'\" Copyright 1991-1994 by AT&T Bell Laboratories.
'\"
'\" Permission to use, copy, modify, and distribute this software
'\" and its documentation for any purpose and without fee is hereby
'\" granted, provided that the above copyright notice appear in all
'\" copies and that both that the copyright notice and warranty
'\" disclaimer appear in supporting documentation, and that the
'\" names of AT&T Bell Laboratories any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the
'\" software without specific, written prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data
'\" or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\"
'\" Hypertext widget created by George Howlett.
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: Create and manipulate hypertext widgets
blt_htext \- Create and manipulate hypertext widgets
.SH SYNOPSIS
\fBblt_htext\fP \fIpathName \fR[\fIoptions\fR]
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
\fBbackground\fR	\fBcursor\fR	\fBfont\fR	\fBforeground\fR
\fBtext\fR	\fBxScrollCommand\fR	\fByScrollCommand\fR
.fi
.LP
See the ``options'' manual entry for details on the standard options.
.ta 4c
.SH "WIDGET-SPECIFIC OPTIONS"
.LP
.nf
Name:	\fBfileName\fR
Class:	\fBFileName\fR
Command-Line Switch:	\fB\-filename\fR
.fi
.IP
Specifies a \fBblt_htext\fP file to be displayed in the window. 
If the value is the empty string, the \fB-text\fR option is used instead.
See the section 
.SB FILE FORMAT
for a description of the \fBblt_htext\fP 
file format.
.LP
.nf
Name:	\fBheight\fR
Class:	\fBHeight\fR
Command-Line Switch:	\fB\-height\fR
.fi
.IP
Specifies the desired height of the viewport window. The value must be in 
a form accepted by \fBTk_GetPixels\fR. If the value is less than one, the window will
grow to accommodate the entire length of text.
.LP
.nf
Name:	\fBspecialChar\fR
Class:	\fBSpecialChar\fR
Command-Line Switch:	\fB\-specialchar\fR
.fi
.IP
Specifies the ASCII value of the special double character delimiters.
In \fBblt_htext\fP files, the text between these special characters is 
evaluated as a block of Tcl commands. The default special character 
is the \fIpercent sign\fR.
.LP
.nf
Name:	\fBlineSpacing\fR
Class:	\fBLineSpacing\fR
Command-Line Switch:	\fB\-linespacing\fR
.fi
.IP
Specifies the spacing between each line of text.  The value must
be in a form accepted by \fBTk_GetPixels\fR. The default value is 1 pixel.
.LP
.nf
Name:	\fBwidth\fR
Class:	\fBWidth\fR
Command-Line Switch:	\fB\-width\fR
.fi
.IP
Specifies the desired width of the viewport window.  The value must be in a 
form
accepted by \fBTk_GetPixels\fR. If the value is less than one, the window will
grow to accommodate the widest line of text.
.LP
.nf
Name:	\fBxScrollUnits\fR
Class:	\fBScrollUnits\fR
Command-Line Switch:	\fB\-xscrollunits\fR
.fi
.IP
Specifies the horizontal scrolling distance. The default is 10 pixels.
.LP
.nf
Name:	\fByScrollUnits\fR
Class:	\fBScrollUnits\fR
Command-Line Switch:	\fB\-yscrollunits\fR
.fi
.IP
Specifies the vertical scrolling distance. The default is 10 pixels.
.SH DESCRIPTION
.PP
The \fBblt_htext\fR command creates a new window (given by the 
\fIpathName\fR argument) and makes it into a \fBblt_htext\fP widget.
Additional options, described above, may be specified on the command line
or in the option database to configure aspects of the widget such as its 
color and font.  At the time this command is invoked, there must not 
exist a window named \fIpathName\fR, but \fIpathName\fR's parent must exist.
The \fBblt_htext\fR command returns its \fIpathName\fR.   
.PP
The \fBblt_htext\fP widget is hybrid of a non-editable text widget and
a geometry manager (e.g. the packer).  It displays text (optionally read
from file) in a window.  Text can be scrolled either horizontally or
vertically using the \fBblt_htext\fR window as a viewport.
In addition, Tcl commands can be embedded into 
the text which are evaluated as the text is parsed.  Text between special
double characters (percent signs "%%") is immediately passed to the Tcl 
interpreter for evaluation.  
.PP
Furthermore, any widget or widget hierarchy can be packed in-line and made 
to appear on the current line of the text.  Widgets are packed using the 
\fBblt_htext append\fP command.  All widgets must be children of the 
\fBblt_htext\fP window and must already exist before packing. 
Once a widget has been packed it cannot be moved to a different
position within the text.  Widgets can be resized but they will remain 
at the same position within the text.
.PP
Before a file or text string is parsed by the \fBblt_htext\fR widget,
all the widget's current children are destroyed.  You can reload files or text 
without worrying about unmapping or destroying each child window beforehand.
.PP
Setting the either the \fB-filename\fR or \fB-text\fR configuration option 
will adjust the value of the other.  If both options are set, the file 
takes precedence.  When a new file is read using the \fB-filename\fR option,
the value of the \fB-text\fR option is reset to the empty string.  Likewise, 
when the \fB-text\fR option is set, the string representing the 
\fB-filename\fR option is cleared.
.SH FILE FORMAT
The format of \fBblt_htext\fP text file is typically ASCII text.  
Text enclosed by special double characters (by default, percent signs '%%') 
is interpreted and executed as Tcl commands.  
The special character  may be specified by the \fB-specialchar\fP option. 
In the following example of a \fBblt_htext\fP file,  a button widget 
is appended to the text between  the words "\fCa\fP" and "\fCwhich\fP".  
The \fIpathName\fR of the \fBblt_htext\fP widget is "\fC.ht\fP".
.DS L
\fCThis will be displayed as normal text. 
But this will become a %% 
  button .ht.button -text "button" -fg red
  .ht append .ht.button 
%% which can invoke a Tcl command.\fR
.DE
.LP
.SH "VARIABLES"
.PP
The following global Tcl variables are maintained when an 
\fBblt_htext\fR file is parsed.  
.TP
\fBblt_htext(widget)\fR 
is the pathname of the \fBblt_htext\fP widget.
.TP
\fBblt_htext(file)\fR 
is the name of the file the \fBblt_htext\fP widget is currently parsing.  
It is the empty string when the \fB\-text\fP option is used.
.TP
\fBblt_htext(line)\fR 
is the current line number in the text.  
.PP
This information might be used to construct hyper links 
between different files and/or lines.
.LP
.SH "WIDGET COMMAND"
.PP
The \fBblt_htext\fP command creates a new Tcl command whose
name is \fIpathName\fR.  This command may be used to invoke various
operations on the widget.  It has the following general form:
.DS C
\fIpathName option \fR?\fIargs\fR?
.DE
\fIOption\fR and \fIargs\fR determine the exact behavior of the command.
.PP
The following widget commands are available for \fBblt_htext\fP widgets:
.TP
\fIpathName \fBappend \fIchild\fR
Packs \fIchild\fP at the current position in the text. \fIChild\fP is 
the name of a window to be packed into the \fBblt_htext\fP window. 
\fIChild\fR must be a child of the \fBblt_htext\fP window and 
may be specified by either its \fIpathName\fP or \fIname\fP.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR? ?\fIvalue option value ...\fR?
Queries or modifies the configuration options of the widget.  If no
\fIoption\fR is specified, returns a list describing all of the
available options for \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on the format of this list).  If \fIoption\fR is specified
with no \fIvalue\fR, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no \fIoption\fR is specified).  If
one or more \fIoption\-value\fR pairs are specified, then the command
modifies the given widget option(s) to have the given value(s); in
this case the command returns the empty string.  \fIOption\fR may have
any of the values accepted by the \fBblt_htext\fR command.
.TP
\fIpathName \fBgotoline \fR?\fIline\fR?
Scrolls the text to \fIline\fP.  \fILine\fP is the line number of the
new text position and is bounded by the range of lines in the text.
If a \fIline\fP argument is not present, the current line number is returned.
.TP
\fIpathName \fBchildconfigure \fIchild\fR
Queries or resets the positioning of \fIchild\fR or the size of the 
cavity surrounding it. This command is similar to the \fBconfigure\fR 
command, except that it applies to the options of the child window and its
cavity, whereas \fBconfigure\fR applies  to the options for the widget as 
a whole. \fIChild\fP is the name of window packed into the \fBblt_htext\fR 
window (by the \fBblt_htext append\fR command). The child widget may be
specified by either its \fIpathName\fP or \fIname\fP.
The following options are available.
.RS
.TP
\fB\-anchor \fIanchorPos\fR
Specifies how the child window will be arranged if there is extra space 
in the cavity surrounding the window. \fIAnchorpos\fR may have any of the 
forms accepted by \fBTk_GetAnchor\fR.  For example, if \fIanchorPos\fR is 
\fBcenter\fR then the window is centered in the cavity; 
if \fIanchorPos\fR is \fBw\fR then the window will be drawn such it touches
the leftmost edge of the cavity. This option defaults to \fBcenter\fR.
.TP
\fB\-fill \fIstyle\fR
Indicates if the child window should be expanded to occupy any extra space 
in the cavity surrounding it.  \fIStyle\fR must be one of the following:
\fBnone\fR, \fBx\fR, \fBy\fR, \fBboth\fR.  If \fIstyle\fR is \fBx\fR,
the width of the child window is expanded to fill the cavity.  
If \fIstyle\fR is \fBy\fR, the height is expanded. The default is \fBnone\fR.
.TP
\fB\-height \fIvalue\fR
Species the height of the cavity containing the child window.  
\fIValue\fP must be in a form accepted by \fBTk_GetPixels\fR.
If \fIvalue\fP is greater than zero, the cavity is resized to that height.  
If the requested window height is greater than the cavity's height, the
window will be reduced to fit the cavity.
By default, the cavity is requested height of the child window. 
.TP
\fB\-ipadx \fIvalue\fR
Specifies extra padding to the left and right sides of the child window. 
\fIValue\fR must be in a form accepted by \fBTk_GetPixels\fR.
.TP
\fB\-ipady \fIvalue\fR
Specifies extra padding to the top and bottom sides of the child window.
\fIValue\fR must be in a form accepted by \fBTk_GetPixels\fR.
.TP
\fB\-justify \fIvalue\fR
Justifies the vertical position of the cavity containing the child widget 
in relation to the line of text. \fIValue\fR must be either \fBtop\fP, 
\fBbottom\fR, or  \fBcenter\fR. By default, the child widget is centered 
along the baseline of the line of text.
.TP
\fB\-padx \fIvalue\fR
Specifies the padding to the left and right sides of the cavity containing
the child window. 
\fIValue\fR must be in a form accepted by \fBTk_GetPixels\fR.
.TP
\fB\-pady \fIvalue\fR
Specifies the padding on the top and bottom sides of the cavity containing 
the child window.
\fIValue\fR must be in a form accepted by \fBTk_GetPixels\fR.
.TP
\fB\-relheight \fIvalue\fR
Specifies the height of the cavity containing the child window relative to 
the height of the viewport window.  \fIValue\fP is real number indicating
the ratio of the height of the cavity to the viewport.  If \fIvalue\fR 
is 0.0 or less, the request is ignored and the height of the 
cavity is the requested height of the child window. 
.TP
\fB\-relwidth \fIvalue\fR
Specifies the width of the cavity containing the child window relative to 
the width of the viewport window.  \fIValue\fP is real number indicating
the ratio of the width of the cavity to the viewport.  If \fIvalue\fR 
is 0.0 or less, the request is ignored and the width of the cavity is 
the requested width of the child window. 
.TP
\fB\-width \fIvalue\fR
Species the width of the cavity containing the child window.  
\fIValue\fP must be in a form accepted by \fBTk_GetPixels\fR.
If \fIvalue\fP is greater than zero, the cavity is resized to that width.  
If the requested window width is greater than the cavity's width, the
window will be reduced to fit the cavity.
By default, the cavity is requested width of the child window. 
.RE
.TP
\fIpathName \fBscan\fR \fIoption args\fR
This command is used to implement scanning on texts.  It has
two forms, depending on \fIoption\fR:
.RS
.TP
\fIpathName \fBscan mark \fIy\fR
Records \fIy\fR and the current view in the text window;  used in
conjunction with later \fBscan dragto\fR commands.  Typically this
command is associated with a mouse button press in the widget.  It
returns an empty string.
.TP
\fIpathName \fBscan dragto \fIy\fR
This command computes the difference between its \fIy\fR argument
and the \fIy\fR argument to the last \fBscan mark\fR command for
the widget.  It then adjusts the view up or down by 10 times the
difference in y-coordinates.  This command is typically associated
with mouse motion events in the widget, to produce the effect of
dragging the text at high speed through the window.  The return
value is an empty string.
.RE
.TP
\fIpathName \fBsearch \fIpattern\fR ?\fIfrom\fR? ?\fIto\fR?
Returns the number of the next line matching \fIpattern\fR.  \fIPattern\fR is
a string which obeys the matching rules of \fBTcl_StringMatch\fR. 
\fIFrom\fR and \fIto\fR are text line numbers (inclusive) which 
bound the search.  
If no match for \fIpattern\fR can be found, \fB-1\fR is returned.
.TP
\fIpathName \fBxview \fR?\fIposition\fR?
Moves the viewport horizontally to the new text x-coordinate position.  
\fIPosition\fR is the offset from the left side of the text to the current 
position and must be in a form accepted by \fBTk_GetPixels\fR. If \fIposition\fR
is not present, the current text position is returned.
.TP
\fIpathName \fByview \fR?\fIposition\fR?
Moves the viewport vertically to the new text y-coordinate position.  
\fIPosition\fR is the offset from the top of the text to the current 
position and must be in a form accepted by \fBTk_GetPixels\fR. If \fIposition\fR
is not present, the current text position is returned.
.SH BUGS
Text with embedded tabs can be obscured by child windows when scrolled 
horizontally.
.SH KEYWORDS
hypertext, widget
'\"@endhelp
'\"@help: blt/intro/overview
'\"
'\" Copyright 1993-1994 by AT&T Bell Laboratories.
'\"
'\" Permission to use, copy, modify, and distribute this software
'\" and its documentation for any purpose and without fee is hereby
'\" granted, provided that the above copyright notice appear in all
'\" copies and that both that the copyright notice and warranty
'\" disclaimer appear in supporting documentation, and that the
'\" names of AT&T Bell Laboratories any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the
'\" software without specific, written prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data
'\" or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\"
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: Introduction to the BLT library
blt_intro \- Introduction to the BLT library
.SH DESCRIPTION
BLT is a library of extensions to the Tk library.  It adds new 
commands and variables (all prefixed by "blt_") to the application's 
interpreter.
.LP
.SH COMMANDS
The following commands are added to the interpreter from the BLT library:
.TP 15
\fBblt_drag&drop\fR 
Provides a drag-and-drop facility for Tk.  Information (represented
by a token window) can be dragged to and from any Tk window, including
those of another Tk application.  \fBblt_drag&drop\fR acts as a 
coordinator, directing Tk \fBsend\fR commands between (or within) TCL/Tk 
applications. 
.TP 15
\fBblt_htext\fR 
A simple hypertext widget. Combines text and Tk widgets into a single 
scroll-able window.  Tcl commands can be embedded into text, which are 
invoked as the text is parsed.  In addition, Tk widgets can be appended 
to the window at the current point in the text.  \fBblt_htext\fR can
be also used to create scrolled windows of Tk widgets.  
.TP 15
\fBblt_graph\fR 
A 2D plotting widget.  Plots two variable data in a window with an optional 
legend and annotations.   It has of several components; coordinate axes, 
crosshairs, a legend, and a collection of elements and tags.
.TP 15
\fBblt_barchart\fR 
A barchart widget.  Plots two-variable data as rectangular bars in a 
window.  The x-coordinate values designate the position of the bar along 
the x-axis, while the y-coordinate values designate the magnitude.
The \fBblt_barchart\fR widget has of several components; coordinate axes, 
crosshairs, a legend, and a collection of elements and tags.
.TP 15
\fBblt_table\fR 
A table geometry manager for Tk.  You specify window placements as table 
row,column positions and windows can also span multiple rows or columns. 
It also has many options for setting and/or bounding window sizes.
.TP 15
\fBblt_bitmap\fR 
Reads and writes bitmaps from Tcl.  New X bitmaps can be defined
on-the-fly from Tcl, obviating the need to copy around bitmap files.  
Other options query loaded X bitmap's dimensions and data.
.TP 15
\fBblt_bgexec\fR 
Like Tcl's \fBexec\fR command, \fBblt_bgexec\fR runs a pipeline of Unix 
commands in the background.  Unlike \fBexec\fR, the output of the last
process is collected and a global Tcl variable is set upon its completion.
\fBblt_bgexec\fR can be used with \fBtkwait\fR to wait for Unix commands
to finish while still handling expose events.  Intermediate output is
also available while the pipeline is active.
.TP 15
\fBblt_busy\fR 
Creates a "busy window" which prevents user-interaction when an
application is busy.  The busy window also provides an easy way 
to have temporary busy cursors (such as a watch or hourglass).
.TP 15
\fBblt_win\fR 
Raise, lower, map, or, unmap any window.  The raise and lower functions
are useful for stacking windows above or below "busy windows".
.TP 15
\fBblt_watch\fR 
Arranges for Tcl procedures to be called before and/or after the execution
of every Tcl command. This command
may be used in the logging, profiling, or tracing of Tcl code.
.TP 15
\fBblt_debug\fR 
A simple Tcl command tracing facility useful for debugging Tcl code.  
Displays each Tcl command before and after substitution along its level 
in the interpreter on standard error.
.TP 15
\fBblt_bell\fR 
Rings the keyboard bell.  This is useful when the application can't
write to a tty.
.TP 15
\fBblt_cutbuffer\fR 
Manipulates X cutbuffer properties. This is useful for communicating with
other X applications that don't properly use X selections.
.SH VARIABLES
.PP
The following Tcl variables are either set or used by BLT at various times
in its execution:
.TP 15
\fBblt_library\fR
This variable contains the name of a directory containing a library
of Tcl scripts and other files related to BLT.  Currently, this 
directory contains the \fBblt_drag&drop\fR protocol scripts and the 
PostScript prolog
used by \fBblt_graph\fR and \fBblt_barchart\fR.
The value of this variable is taken from the BLT_LIBRARY environment
variable, if one exists, or else from a default value compiled into
the \fBBLT\fR library.
.TP 15
\fBblt_versions\fR 
This variable is set in the interpreter for each application. It is an 
array of the current version numbers for each 
of the BLT commands in the form \fImajor\fR.\fIminor\fR.  \fIMajor\fR and
\fIminor\fR are integers.  The major version number increases in
any command that includes changes that are not backward compatible
(i.e. whenever existing applications and scripts may have to change to
work with the new release).  The minor version number increases with
each new release of a command, except that it resets to zero whenever the
major version number changes.  The array is indexed by the individual 
command name.
.SH ADDING BLT TO YOUR APPLICATIONS
It's easy to add BLT to an existing Tk application.  BLT requires no 
patches or edits to the Tcl or Tk libraries.  To add BLT, simply add the 
following code snippet to your application's tkAppInit.c file.  
.DS
\fCif (Blt_Init(interp) != TCL_OK) {
    return TCL_ERROR;
}\fR
.DE
Recompile and link with the BLT library (libBLT.a) and that's it.
.SH BUGS
Send bug reports, correspondence, etc. to george.howlett@att.com
.SH KEYWORDS
BLT
'\"@endhelp
'\"@help: blt/widgets/table
'\"
'\" Copyright 1991-1994 by AT&T Bell Laboratories.
'\"
'\" Permission to use, copy, modify, and distribute this software
'\" and its documentation for any purpose and without fee is hereby
'\" granted, provided that the above copyright notice appear in all
'\" copies and that both that the copyright notice and warranty
'\" disclaimer appear in supporting documentation, and that the
'\" names of AT&T Bell Laboratories any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the
'\" software without specific, written prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data
'\" or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\"
'\" Table geometry manager created by George Howlett.
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: Geometry manager that arranges windows in a table
blt_table \- Geometry manager that arranges windows in a table
.SH SYNOPSIS
.sp
\fBblt_table \fImaster\fR ?\fIslave index options\fR?...
.sp
\fBblt_table column \fImaster option\fR ?\fIargs\fR...?
.sp
\fBblt_table configure \fIslave\fR ?\fIslave\fR...? ?\fIoptions\fR...?
.sp
\fBblt_table row \fImaster option\fR ?\fIargs\fR...?
.sp
\fBblt_table forget \fIslave\fR ?\fIslave\fR...?
.sp
\fBblt_table info \fIslave\fR
.sp
\fBblt_table slaves \fImaster\fR ?\fIpattern\fR?
.sp
\fBblt_table masters\fR ?\fIpattern\fR?
.SH DESCRIPTION
.PP
The \fBblt_table\fR command is a geometry manager for Tk. It arranges 
windows tabularly in
a window called the \fImaster\fR.  The table consists of individual
rows and columns whose spacing define its layout. Windows, called 
\fIslaves\fR, are positioned in the table by specifying the row and column.
Only one slave can be specified at a single position in the table.  But slaves 
may span multiple rows and columns.
.PP
By default, \fBblt_table\fR tries to arrange all its slaves in the minimum 
space required. It determines this by querying each slave window for
its requested size.  The maximum requested height all slaves spanning a 
particular row is the row's normal size.  Similarly, the maximum 
requested width of all slaves spanning a particular column is the column's 
normal size.  This, in turn, specifies the table's size, which 
is the sum of the normal sizes of the rows and columns.
The number of rows and columns a table contains
is determined by the indices specified.  
There is no mechanism to delete a row or column.
.SH TABLE INDICES
An \fIindex\fR references a row,column position in the table.
It must be in the form "\fIrow\fR,\fIcolumn\fR" where \fIrow\fR and 
\fIcolumn\fR are the respective row and column
numbers, starting from zero  (0,0 is the upper leftmost  position). 
\fIRow\fR and \fIcolumn\fR may also be numeric expressions which are 
recursively evaluated.  
.SH SIZE CONSTRAINTS
You can limit the amount of space requested by a slave window.
By specifying both a minimum and maximum limit in which the window's 
requested size must fall, you can bound a window's size.  This affects
the calculation of the normal size of all rows and columns which
it spans. In a similar fashion, you can directly control the 
normal size of any row or column. 
.PP
This provides two features.
Slave windows must be contained within the rows and columns they are 
defined to span.  By limiting the size of a row or column, you control 
the size of all windows in spanning it. This overrides whatever
size the slave has requested.  Secondly, there's no requirement 
that a row or column contain any slaves. This means you can create 
horizontal or vertical spacing by simply setting the row or column limits.
.SH RESIZING
\fBBlt_table\fR tries to fit itself exactly in the master window.  It first
tries to change the size of the master to the table's normal size.
If this fails, it then tries to expand or shrink itself to the size of 
the master.
If normal size of the table is smaller than the master window, the 
extra space is evenly divided among the rows or columns. If it's larger, 
then the row and columns are shrunk to fit in the master window.  In both 
cases, the rows and column sizes are changed with respect to their constraints.
.PP
You can also specify how an individual row or column is to be resized. 
For example, a column may be set to one of four modes:
.RS
.IP \fBnone\fR
Don't resize the column.
.IP \fBexpand\fR
Allow the column to only grow greater than its normal width.
.IP \fBshrink\fR
Allow the column to only shrink less than its normal width.
.IP \fBboth\fR
Resize the column in either direction.
.RE
.SH CREATING A TABLE
Tables are created by invoking the \fBblt_table\fR command.
.DS
	\fBblt_table\fR \fImaster\fR
.DE
\fIMaster\fR is the pathname of a window which must already exist.
\fBBlt_table\fR will arrange its slave windows inside of \fImaster\fR.
Slave windows are added by designating the slave window's pathname and 
table position.
.DS
	\fBblt_table\fR \fImaster slave index\fR
.DE
.SH TABLE COMMANDS
The following commands are available for the \fBblt_table\fR:
.TP
\fBblt_table \fImaster\fR ?\fIslave index options\fR?...
Adds the window \fIslave\fR to the table associated with \fImaster\fR.
If a table doesn't exist for \fImaster\fR, one is created.
\fIMaster\fR is the pathname of the window in which the slave windows
will be arranged. \fISlave\fR is the pathname of the window to be arranged
inside of \fImaster\fR at the position designated by \fIindex\fR.
This command returns the empty string.  
\fIOption\fR may have any of the values accepted by the 
\fBblt_table configure\fR command.
.TP
\fBblt_table column \fImaster \fBconfigure \fIcolumnIndex\fR ?\fIoptions...\fR?
Queries or modifies the configuration options of the columns specified.
\fIColumnIndex\fR may be in one of two forms; \fBall\fR 
(indicating all columns) or a list of the column indices to be configured.  
\fIOptions\fR may have any of the following values:
.RS
.TP
\fB\-padx \fIpixels\fR
Specifies an extra padding to the normal width of the column.
\fIPixels\fR can be any value accepted by \fBTk_GetPixels\fR.
The default padding is \fB0\fR.
.TP
\fB\-resize \fImode\fR
Indicates that the column can expand or shrink from its normal width 
when the table is resized.
\fIMode\fR must be one of the following:
\fBnone\fR, \fBexpand\fR, \fBshrink\fR, or \fBboth\fR.  If \fImode\fR is 
\fBexpand\fR the width of the column is expanded if there is extra space
in the master window. If \fIstyle\fR is \fBshrink\fR its width may be
reduced beyond its normal width if there is not enough space in the master.
The default is \fBnone\fR.
.TP
\fB\-width \fIwidth\fR
Specifies the limits within which the width of the column may expand or 
shrink.  
\fIWidth\fR is a list of bounding values.  See the section 
.SB BOUNDING LIST FORMAT
for a description of this list.
By default there are no constraints.
.RE
.TP
\fBblt_table column \fImaster\fB dimension\fR
Returns the number of columns in the table.
.TP
\fBblt_table column \fImaster \fBinfo\fI columnIndex\fR 
Returns a list of the configuration options for the columns specified.
\fIColumnIndex\fR may be in one of two forms; \fBall\fR 
(indicating all columns) or a list of column indices.
The column indices may themselves be numeric expressions.
.TP
\fBblt_table column \fImaster\fB sizes\fI columnIndex\fR
Returns the sizes of the given columns in the table.
\fIColumnIndex\fR may be in one of two forms; \fBall\fR 
(indicating all columns) or a list of column indices. 
The column indices may themselves be numeric expressions.
.TP
\fBblt_table configure\fR \fIslave\fR ?\fIslave\fR...? ?\fIoptions\fR...? 
Queries or modifies the configuration options of a slave in a table.  
If no \fIoption\fR is specified, returns a list describing all of the
available options for \fIslave\fR (see \fBTk_ConfigureInfo\fR for
information on the format of this list).  \fISlave\fR must be
the pathname of a window already managed by the \fBblt_table\fR.
If \fIoption\fR is specified with no \fIvalue\fR, then the command 
returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no \fIoption\fR is specified).  
If one or more \fIoption\-value\fR pairs are specified, then the command
modifies the given option(s) to have the given value(s); in
this case the command returns the empty string.  
One of more slave windows can be modified (with the 
same options) at the same time.
The following configuration 
options are valid:
.RS
.TP
\fB\-anchor \fIanchorPos\fR
Specifies how the slave window will be arranged if there is extra space 
in the span surrounding the window. \fIAnchorpos\fR may have any of the 
forms accepted by \fBTk_GetAnchor\fR.  For example, if \fIanchorPos\fR is 
\fBcenter\fR then the window is centered in the rows and columns it spans; 
if \fIanchorPos\fR is \fBw\fR then the window will be drawn such it touches
the leftmost edge of the span. This option defaults to \fBcenter\fR.
.TP
\fB\-columnspan \fInumber\fR
Specifies the number of columns spanned by the slave. The default span
is \fB1\fR.
.TP
\fB\-fill \fIstyle\fR
Indicates if the slave should be expanded to occupy any extra space 
in the span.  \fIStyle\fR must be one of the following:
\fBnone\fR, \fBx\fR, \fBy\fR, \fBboth\fR.  If \fIstyle\fR is \fBx\fR,
the width slave window is expanded.  If \fIstyle\fR is \fBy\fR, the
height is expanded. The default is \fBnone\fR.
.TP
\fB\-ipadx \fIpixels\fR
Specifies an extra padding in addition to the width requested by the 
slave window. \fIPixels\fR can be any value accepted by \fBTk_GetPixels\fR.
The default is \fB0\fR.
.TP
\fB\-ipady \fIpixels\fR
Specifies an extra padding in addition to the height requested by the slave window. \fIPixels\fR can be any value accepted by \fBTk_GetPixels\fR.
The default is \fB0\fR.
.TP 
\fB\-padx \fIpixels\fR
Specifies an extra padding to the width of the span occupying the slave window. 
\fIPixels\fR can be any value accepted by \fBTk_GetPixels\fR.
The default is \fB0\fR.
.TP
\fB\-pady \fIpixels\fR
Specifies an extra padding to the height of the span occupying the slave window.
\fIPixels\fR can be any value accepted by \fBTk_GetPixels\fR.
The default is \fB0\fR.
.TP
\fB\-reqheight \fIheight\fR
Specifies limits for the requested height of the slave window. These limits 
also constrain the amount of internal padding given to the slave. 
\fIHeight\fR is a list of bounding values.  See the section 
.SB BOUNDING LIST FORMAT
for a description of this list.
By default there are no constraints.
.TP
\fB\-reqwidth \fIwidth\fR
Specifies the limits of the width which a slave may request. These limits 
also affect the amount of internal padding given to the slave.
\fIWidth\fR is a list of bounding values.  See the section 
.SB BOUNDING LIST FORMAT
for a description of this list.
By default there are no constraints.
.TP
\fB\-rowspan \fInumber\fR
Specifies the number of rows spanned by the slave window. The default span
is \fB1\fR.
.RE
.TP
\fBblt_table forget \fIslave\fR 
Requests that \fIslave\fR no longer have its geometry managed.
\fISlave\fR is the pathname of the window currently 
managed by some table. The window will be unmapped so that it no longer 
appears on the screen.  If \fIslave\fR is not currently managed by any table, 
an error message is returned, otherwise the empty string.
.TP
\fBblt_table info \fIslave\fR 
Returns a list of the current non-default configuration options of for 
\fIslave\fR.  \fISlave\fR is the pathname of the window currently managed 
by some table.  The list is exactly in the form that might be specified to
\fBblt_table configure\fR command.
If \fIslave\fR is not currently managed by any table, an error
message is returned.
.TP
\fBblt_table masters \fR?\fIpattern\fR?
Returns a list of pathnames for all master windows matching \fIpattern\fR.  
If the \fIpattern\fR argument is not present, then the names of all the master 
windows are returned.
.TP
\fBblt_table row \fImaster\fB configure\fI row\fR ?\fIoptions...\fR?
Queries or modifies the configuration options of the row specified 
by \fIrow\fR. \fIRow\fR may be in one of two forms; \fBall\fR 
(indicating all rows) or a list of the row indices to be configured.  
\fIOption\fR may have any of the values accepted by the following:
.RS
.TP
\fB\-height \fIheight\fR
Specifies the limits of the height which the row may expand or shrink to. 
\fIHeight\fR is a list of bounding values.  See the section 
.SB BOUNDING LIST FORMAT
for a description of this list.
By default there are no constraints.
.TP
\fB\-pady \fIpixels\fR
Specifies an extra padding to the normal height of the row.
\fIPixels\fR can be any value accepted by \fBTk_GetPixels\fR.
The default padding is \fB0\fR.
.TP
\fB\-resize \fImode\fR
Indicates that the row can expand or shrink from its normal height 
when the table is resized.
\fIMode\fR must be one of the following:
\fBnone\fR, \fBexpand\fR, \fBshrink\fR, or \fBboth\fR.  If \fImode\fR is 
\fBexpand\fR the height of the row is expanded if there is extra space
in the master window. If \fIstyle\fR is \fBshrink\fR its height may be
reduced beyond its normal height if there is not enough space in the master.
The default is \fBnone\fR.
.RE
.TP
\fBblt_table row \fImaster\fB dimension\fR
Returns the number of rows in the table.
.TP
\fBblt_table row \fImaster\fB info\fI row\fR ?\fIoptions...\fR?
Returns a list of the configuration options for the rows specified.
\fIRowIndex\fR may be in one of two forms; \fBall\fR 
(indicating all rows) or a list of row indices.
The row indices may themselves be numeric expressions.
.TP
\fBblt_table row \fImaster\fB sizes\fI rowIndex\fR
Returns the sizes of the given rows in the table.
\fIRowIndex\fR may be in one of two forms; \fBall\fR 
(indicating all rows) or a list of the row indices.
.TP
\fBblt_table slaves \fImaster\fR ?\fIpattern\fR?
Returns a list of pathnames for all slave windows managed by 
\fImaster\fR matching \fIpattern\fR.  If the \fIpattern\fR argument is not
present, then the names of all the slave windows are returned.
\fIMaster\fR is the pathname of a master window.
If \fImaster\fR is not the master window of any table, an error message 
is returned.
.SH BOUNDING LIST FORMAT
Constraints for various options 
(\fB-reqheight\fR, \fB-reqwidth\fR, \fB-height\fR, and \fB-width\fR) are 
specified by supplying a bounding list of values.
Each value must be in a form accepted by \fBTk_GetPixels\fR.
The interpretation of this list is based upon the number of values it
contains:
.RS
.IP "{\fI\fR}"
Empty list. No bounding is performed.
.IP "{\fI x \fR}"
Set the size of the window or partition at \fIx\fR. The size of the partition 
or window cannot grow or shrink.
.IP "{\fI min max \fR}"
Bound the size of the window or partition between \fImin\fR
and \fImax\fR.
.IP "{\fI min max nom\fR}"
Bound the size of the window or partition between \fImin\fR
and \fImax\fR.  In addition, set the normal size to \fInom\fR.
.RE
The maximum bound \fImax\fR can also be specified as \fCInf\fR
to indicate a unlimited maximum bound.  This can be useful when you 
wish only to set the minimum or nominal size of a window or partition.
.SH EXAMPLE
The following example arranges a canvas, two scrollbars, and a title
in a frame.
.DS
\f(CWblt_table .frame \\
	.title 0,0 -columnspan 2 -anchor center \\
	.canvas 1,0 -fill both \\
	.vscroll 1,1 -fill y \\
	.hscroll 2,0 -fill x
blt_table column .frame configure 1 -resize none
blt_table row .frame configure 2 -resize none\fR
.DE
.sp 1
The rows and columns containing the scrollbars are frozen at their normal
size, so that even if the frame is resized, the scrollbars will remain
the same width.
.SH BUGS
There is no warning or error if a window is already a slave or master, 
managed by another geometry manager (there currently is no way to properly 
detect this).  Typically, the window will be repositioned by both geometry 
managers, ad infinitum.  The only recourse is to avoid doing this.
.SH KEYWORDS
frame, geometry manager, location, table, size
'\"@endhelp
'\"@help: blt/widgets/watch
'\"
'\" Copyright 1994 by AT&T Bell Laboratories.
'\"
'\" Permission to use, copy, modify, and distribute this software
'\" and its documentation for any purpose and without fee is hereby
'\" granted, provided that the above copyright notice appear in all
'\" copies and that both that the copyright notice and warranty
'\" disclaimer appear in supporting documentation, and that the
'\" names of AT&T Bell Laboratories any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the
'\" software without specific, written prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data
'\" or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\"
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: call Tcl procedures before and after each command
blt_watch \- call Tcl procedures before and after each command
.SH SYNOPSIS
\fBblt_watch create\fR \fIname\fR ?\fIoptions\fR?
.sp
\fBblt_watch activate\fR \fIname\fR
.sp
\fBblt_watch deactivate\fR \fIname\fR
.sp
\fBblt_watch delete\fR \fIname\fR
.sp
\fBblt_watch configure\fR \fIname\fR ?\fIoptions\fR
.sp
\fBblt_watch info\fR \fIname\fR
.sp
\fBblt_watch names\fR 
.SH DESCRIPTION
.PP
This command arranges for Tcl procedures to be called before 
and/or after each the execution of each Tcl command.  This command
may be useful in the logging, profiling, or tracing of Tcl code.
.SH "WATCH COMMANDS"
The following commands are available for the \fBblt_watch\fR:
.TP
\fBblt_watch activate \fIname\fR 
Activates the watch, causing Tcl commands the be traced to the
maximum depth selected.
.TP
\fBblt_watch create \fIname\fR ?\fIoptions\fR?...
Creates a new watch \fIname\fR. It's an error if another watch 
\fIname\fR already exists and an error message will be returned.
\fIOptions\fR may have any of the values accepted by the 
\fBblt_watch configure\fR command.
This command returns the empty string.  
.TP
\fBblt_watch configure \fIname\fR ?\fIoptions...\fR?
Queries or modifies the configuration options of the watch \fIname\fR.
\fIName\fR is the name of a watch.
\fIOptions\fR may have any of the following values:
.RS
.TP
\fB\-active \fIboolean\fR
Specifies if the watch is active.
By default, watches are active when created.
.TP
\fB\-postcmd \fIstring\fR
Specifies a Tcl procedure to be called after each
Tcl command.  \fIString\fR is name of a Tcl procedure and optionally
any extra arguments to be passed to it.  Five arguments are appended:
1) the current level 2) the command string 3) a list containing the
command after substitutions and split into words 4) the return code
of the previous Tcl command, and 5) the results of the previous command.
The return status of the postcmd procedure is always ignored.
.TP
\fB\-precmd \fIstring\fR
Specifies a Tcl procedure to be called before each
Tcl command.
\fIString\fR is name of a Tcl procedure and optionally
any extra arguments to be passed to it.  Three arguments are appended:
1) the current level 2) the command string, and  3) a list containing the
command after substitutions and split into words.
The return status of the precmd procedure is always ignored.
.TP
\fB\-maxlevel \fInumber\fR
Specifies the maximum evaluation depth to watch Tcl commands.
The default maximum level is 10000.
.TP
\fBblt_watch deactivate \fIname\fR 
Deactivates the watch, causing Tcl commands to be no longer traced.
.TP
\fBblt_watch info \fIname\fR 
Returns the configuration information associated with the 
watch \fIname\fR.  \fIName\fR is the name of a watch.
.TP
\fBblt_watch names\fR ?\fIhow\fR?
Lists the names of the watches for a given state.
\fIHow\fR may be one of the following: \fCactive\fR, \fCidle\fR, 
or \fCignore\fR.  If no \fIhow\fR argument is specified all, watches are
listed.
.RE
.PP
If no \fIlevel\fR argument is given, the current level is printed.
.SH EXAMPLE
The following example use \fBblt_watch\fR to trace Tcl commands 
(printing to standard error) both before and after they are executed. 
.DS 
\fC
proc preCmd { level command argv } {
    set name [lindex $argv 0]
    puts stderr "$level $name => $command"
}

proc postCmd { level command argv retcode results } {
    set name [lindex $argv 0]
    puts stderr "$level $name => $argv\n<= ($retcode) $results"
}

blt_watch create trace \
	-postcmd postCmd -precmd preCmd
\fR
.DE
.SH KEYWORDS
debug
'\"@endhelp
'\"@help: blt/control/win
'\"
'\" Copyright 1993-1994 by AT&T Bell Laboratories.
'\" 
'\" Permission to use, copy, modify, and distribute this software
'\" and its documentation for any purpose and without fee is hereby
'\" granted, provided that the above copyright notice appear in all
'\" copies and that both that the copyright notice and warranty
'\" disclaimer appear in supporting documentation, and that the
'\" names of AT&T Bell Laboratories any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the
'\" software without specific, written prior permission.
'\"
'\" AT&T disclaims all warranties with regard to this software, including
'\" all implied warranties of merchantability and fitness.  In no event
'\" shall AT&T be liable for any special, indirect or consequential
'\" damages or any damages whatsoever resulting from loss of use, data
'\" or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or
'\" performance of this software.
'\"
'\" Window command created by George Howlett.
'\"
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.if '\\$2'cmds'       .TH \\$1 1 \\$3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tcl'        .TH \\$1 3 \\$3 \\$4
.if '\\$2'tk'         .TH \\$1 3 \\$3 \\$4
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
'\"@brief: Perform assorted window operations
blt_win \- Perform assorted window operations
.SH SYNOPSIS
\fBblt_win raise \fIwindow\fR
.sp
\fBblt_win lower \fIwindow\fR
.sp
\fBblt_win map \fIwindow\fR 
.sp
\fBblt_win unmap \fIwindow\fR 
.SH DESCRIPTION
.PP
This command performs assorted window operations on Tk windows.
Windows may be raised, lower, map, or unmapped.
.PP
The \fBblt_win\fR command can take any of the following forms:
.TP
\fBblt_win lower \fIwindow\fR 
Lowers a window to the bottom of the X window stack.  \fIWindow\fR must 
be a valid path name of a Tk window.  
.TP
\fBblt_win map \fIwindow\fR 
Maps the window again.
\fIWindow\fR must be the path name of a Tk window.
If \fIwindow\fR is already mapped, this command has no effect.
This command returns the empty string.
.TP
\fBblt_win raise \fIwindow\fR
Raises the window to the top of the X window stack. \fIWindow\fR must be
a valid path name of a Tk window.  This command returns the empty string.
.TP
\fBblt_win unmap \fIwindow\fR 
Unmaps the \fIwindow\fR. \fIWindow\fR must be a valid path name of a Tk
window. This command returns the empty string.
.SH KEYWORDS
window
'\"@endhelp
