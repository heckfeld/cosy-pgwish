'\"@help: dp/syntax
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: .LP
.LP 
Tcl-DP - distributed programming extension to Tcl/Tk
.SH DESCRIPTION
.LP

Tcl-DP is a freely distributable extension to Tcl/Tk and stands
for Tcl Distributed Programming.  Tcl-DP adds TCP and IP
connection management, remote procedure call (RPC), and
distributed object support to Tcl/Tk.  Tcl stands for Tool
Command Language, a freely distributable, embeddable scripting
language.  Tk stands for Toolkit, a freely distributable X
windows widget set extension to Tcl.

This man page provides an overview of the Tcl-DP programmer
interface.  The Tcl/Tk commands provided by Tcl-DP can be
separated into three levels:

.SH CONNECTION MANAGEMENT COMMANDS
.LP

Tcl-DP adds to Tcl/Tk several commands which manage basic TCP and
IP network connections.  Among these connection management
commands are dp_address, dp_accept, dp_connect,
shutdown, dp_sendTo,
dp_receiveFrom, and dp_filehandler.  These commands provide
basically the same level of service as the UNIX C socket(2)
related system calls.

These connection management commands return and take as arguments
identifiers called \fIsockId\fR's.  (A \fIsockId\fR represents a
UNIX file descriptor, which UNIX uses to represent
both open files and open sockets.  A socket is an endpoint of
network communication.)  These \fIsockId\fR's are identical to
the identifiers manipulated by the read, gets, puts,
and close file management commands of Tcl.

.SH REMOTE PROCEDURE CALL COMMANDS
.LP

The RPC commands of Tcl-DP are implemented on top of the
connection management commands listed above.  For speed, some of
the RPC commands are actually implemented in C instead of Tcl/Tk
scripting.  These RPC commands include dp_MakeRPCServer,
dp_MakeRPCClient, dp_RPC, and dp_CloseRPC.  The basic
dp_RPC command has the following form:

dp_RPC \fIsockId\fR ?\fIargs\fR?

Here is an example usage:

dp_RPC file4 puts stdout "hello world"

The above RPC command will send its \fIargs\fR argument (the
string {puts stdout "hello world"}) to the connected remote
process, represented by file4.  The remote process will evaluate
the received \fIargs\fR string in its Tcl interpreter.  Any
return value will be sent back to the waiting RPC caller process.
Since all data and commands in Tcl/Tk are strings, there are no
data conversion or format problems.

.SH DISTRIBUTED OBJECT SUPPORT COMMANDS 
.LP

The distributed object commands of Tcl-DP are implemented on top
of the RPC commands described above.  An object in Tcl-DP is a
procedure, just like a widget instance of Tk is a procedure.  A
procedural object must take as its first argument a method
selector.  In other words, if \fIobject\fR is the name of a
procedural object:

\fIobject\fB \fImethod\fR ?\fIargs ...\fR?

Objects can have slots.  Objects which are to be distributed
using Tcl-DP must handle two methods, \fBconfigure\fR and
\fBslot-value\fR, which access the slots of the object.

The configure method must handle three different forms of
arguments, which makes it very much like the configure
option for Tk widgets:

\fIobject\fB \fBconfigure\fR ?\fI-slot\fR?
.br
\fIobject\fB \fBconfigure\fR ?\fI-slot value ...\fR?
.br
\fIobject\fB \fBconfigure\fR

The slot-value method must take one argument:

\fIobject\fB \fBslot-value\fR ?\fIslot\fR?

Objects are usually defined in C for speed but have a Tcl access
interface.  For example, Tk widgets are defined in C but have Tcl
access interfaces.  Objects can also be defined using Tcl/Tk
scripting only, as Tcl-DP supplies several utility procedures for
creating and manipulating objects with Tcl/Tk scripting only.
(See dp_object(l).)

Once you have created an object, you may distribute that object
among several RPC connected processes.  Use the
dp_DistributeObject and dp_UndistributeObject commands.
(The graph of RPC connections among these processes must be
acyclic.)

Once an object is distributed, use the dp_setf and dp_getf
commands, not the configure and slot-value methods,
to access the slots of the distributed object.  These two
commands, dp_setf and dp_getf, replicate any slot value
changes to all processes where the object is distributed.

You may set triggers on any slot of any Tcl-DP distributed object
with the dp_SetTrigger, and associated commands.  Trigger are code
that is evaluated when the value of a slot in an object changes.

.SH C INTERFACE
.LP

A C language interface is provided for several of the commands of
Tcl-DP.  See the man pages DP_Address(3), DP_Network(3), and DP_RPC(3).

.SH SECURITY
.LP

The Tcl-DP package provides little support for access and
authentication security.  With Tcl-DP, any process can send any
Tcl/Tk command to any remote process.

A standard measure is to remove or undefine "dangerous" Tcl/Tk
commands, through the Tcl rename command.  Some of the Tcl
commands which you would probably want to remove include
open, exec, proc, dp_connect (from Tcl-DP),
and lastly rename.  

The procedure auto_load_all is supplied, which will
source all autoloading Tcl library scripts not already
source'd.  Use auto_load_all before you undefine the
Tcl proc command.

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/CancelRPC
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_Host, dp_SetCheckCmd
.sp
  \- Tcl-DP remote procedure call support
.SH DESCRIPTION
.LP

The commands described here are part of the Tcl-DP (Tcl
Distributed Programming) extension to Tcl/Tk.  These Tcl/Tk
commands provide support for Tcl/Tk remote procedure calls
(RPC's).
.SH COMMANDS
.TP
\fBdp_MakeRPCServer \fI?port? ?loginProc? ?cmdCheckProc? ?retFile?\fR

Dp_MakeRPCServer arranges for the current Tcl/Tk interpreter to accept
RPC client connections.  Clients will connect to the server at the
given \fIport\fR (see dp_MakeRPCClient below).  The \fIport\fR should
be an unused port or 0 if you want a port number automatically chosen
for you.  If \fIport\fR is not supplied, a default value of 0 is used.
The port number used is returned unless \fIretFile\fP in non-zero,
in which case both the file identifier and the port number for the
listening socket is returned.

\fILoginProc\fR can be used to refuse connection
attempts by unauthorized hosts.  When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.  The default \fIloginProc\fR is
"dp_CheckHost."

Dp_CheckHost checks an internal access control list
to verify that the host is allowed to connect.  Host may be added
to (or deleted from) this access control using the dp_Host
command described below.

When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over an RPC channel.  When an RPC request is
received, the requested command will be passed as a string to
\fIcmdCheckProc\fR before evaluation.  If \fIcmdCheckProc\fR is the
keyword "none," no command checking is performed.  \fICmdCheckProc\fR
defaults to "none." See dp_SetCheckCmd for more details on security.

.TP
\fBdp_Host \fI[+/-]host\fR

This command is used to modify the internal access control list
used in Tcl-DP to determine if hosts are authorized to connect to this
server.  For backwards compatibilty, all hosts are initially allowed to
connect.  Dp_Host is functionally similar to xhost(1).
New additions to the access control list override previous directives.
Dp_Host accepts the following options:

.RS
.TP
\fBdp_Host \fI+[name]\fR
The given \fIname\fP is added to the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  The pattern matching is the same as used in the
Tcl "string match" command.  If \fIname\fP is not supplied, any
host may connect (the default).

.TP
\fBdp_Host \fI-[name]\fR
The given \fIname\fP is removed from the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  Existing connections are not broken, but new
connection attempts will be denied.  The pattern matching is the same
as used in the Tcl "string match" command.  If \fIname\fP is not
supplied, all connections will be refused.

.RE

.TP
\fBdp_MakeRPCClient \fIhost port ?cmdCheckProc?\fR

\fBdp_MakeRPCClient\fP establishes an RPC connection to the RPC server
at the \fIport\fR running on the machine with the \fIhost\fR network
address.  \fIPort\fP can be specified either by number or by service
name (see services(5) for further information on specifying services by
name).  A \fIsockId\fR representing the RPC connection is returned.
This \fIsockId\fR is refered to below as a \fIpeer\fR, since RPC
connections are peer to peer.  The transmission protocol used for
Tcl-DP RPC services is TCP/IP.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over the connection.  See dp_MakeRPCServer
and dp_SetCheckCmd for more details.

.TP
\fBdp_SetCheckCmd \fIpeer cmdCheckProc\fR

\fBDp_SetCheckCmd\fR arranges for \fIcmdCheckProc\fR to be called when
an RPC/RDO request comes from the specified \fIpeer\fR.
\fICmdCheckProc\fR is passed the inbound RPC/RDO request as its args
(\fIcmdCheckProc\fR should accept multiple arguments).
If \fIcmdCheckProc\fR returns normally, the requested command is evaluated
normally (i.e., no further checking).  If \fIcmdCheckProc\fR returns
with the "continue" code (see the Tcl return command for how to return
with a special code) then the requested command will be executed, but
any commands it issues will also be checked.  If \fIcmdCheckProc\fR
returns with a "return" code, then the result of \fIcmdCheckProc\fR is
returned as the result of the requested command.  If \fIcmdCheckProc\fR
returns with an "error" code, the requested command will not be
executed, and the error message from the check command will be used as
the error message from the requested command.  Any other return codes
of \fIcmdCheckProc\fR ("break", etc.) will prevent the requested
command from being executed, and an error message will be sent to the
caller.

For example, the following procedure allows the commands "Safe" and
"puts" to be executed without checking, "set" to be called with
one argument (i.e., read, but not write, variables), and "eval" to
be used with any resulting evaluations checked.

.DS
proc MyCheck {cmd args} {
    set argc [llength $args]
    case $cmd in {
	Safe   	{return}
	puts	{return}
	eval	{return -code continue}
	set	{
		    if {$argc == 2} {
			error "Permission to set variables denied"
		    } else {
			return
		    }
		}
    }
    return -code break
}
.DE


.TP
\fBdp_CloseRPC \fIpeer\fR
.br
.sp
This command arranges a clean closing of an RPC connection, on
both sides of the connection.
.TP
\fBdp_CancelRPC ?\fIpeer\fR? ?\fIpeer\fR? ...
.br
.sp
This command cancels current RPC invocations that are presently
waiting for a return value.  If no \fIpeer\fRs are specified,
then all current but waiting RPC invocations are canceled.
These cancelled RPC's will return an error.
.TP
\fBdp_RPC \fIpeer\fR ?\fI-events events\fR? 
.br
?\fI-timeout millisecs\fR ??\fI-timeoutReturn callback\fR???
.br
\fIcommand\fR ?\fIargs ...\fR?

This command arranges for the Tcl/Tk \fIcommand\fR and its
\fIargs\fR to be evaluated in the remote Tcl/Tk interpreter,
using the RPC connection specified by \fIpeer\fR.  Before the
remote evaluation of \fIcommand\fR and \fIargs\fR, the global
variable rpcFile in the remote Tcl/Tk interpreter is bound
to the \fIpeer\fR whose request is being evaluated.  (Thus, in
your \fIcommand\fR, you can access the rpcFile variable to
figure out the RPC peer that originated the \fIcommand\fR.)

The \fI-events\fR flag to the dp_RPC command lets you specify
which events should be handled while waiting for the return value
of a RPC.  The \fI-events\fR parameter should be a list of the
tokens \fIX\fR, \fIrpc\fR, \fIfile\fR, \fItimer\fR, \fIidle\fR,
\fIall\fR, or \fInone\fR, where each token represents an event
type.  Presently, a \fIrpc\fR token is the same as a \fIfile\fR
token.  The \fInone\fR token is the default.  See
Tk_DoOneEvent(3) for more information on these event types.

The \fI-timeout\fR flag to the dp_RPC command lets you specify
an integer millisecond timeout value for the RPC, which by
default will return an error value if the timeout occurs.
Supplying a \fI-timeout\fR value of zero or less than zero means
that no timeout will be checked.  If you want to use timeouts,
you must also specify \fI-events\fR to be anything but none.

The \fI-timeoutReturn\fR callback, if specified, is evaluated
when a timeout occurs.  The callback is evaluated with the
\fIpeer\fR identifier appended.  If a timeout occurs and a
\fI-timeoutReturn\fR callback was specified, then the return
value of the callback is used as the return value of the
timed-out dp_RPC.  Otherwise the timed-out RPC returns an
error.
.TP
\fBdp_RDO \fIpeer\fR ?\fI-callback resultCallback\fR?
?\fI-onerror errorCallback\fR? \fIcommand\fR ?\fIargs ...\fR?

This command arranges for \fIcommand\fR and its \fIargs\fR to be
remotely evaluated in the Tcl/Tk interpreter whose connection is
specified by \fIpeer\fR argument.  Unlike the dp_RPC command,
the dp_RDO command does not wait for a return value to be
returned by the remote Tcl/Tk interpreter, but returns
immediately.  Before the remote evaluation, the global variable
rpcFile in the remote Tcl/Tk interpreter is set as
described above for the dp_RPC command.

You can use the \fIresultCallback\fR parameter of dp_RDO to
asynchronously retrieve the value of the remote evaluation.  If
specified, the \fIcallback\fR command appended with the return
value of the remote \fIcommand\fR evaluation is evaluated in the
local Tcl/Tk interpreter.

If you specify an \fIerrorCallback\fR and an error occurs during the
remote evaluation, \fIerrorCallback\fP will be evaluated with the error
message as a parameter.  The default value for \fIerrorCallback\fR is
tkerror.  If you wish to ignore errors generated during RDO
evaluation, specify the keyword "none" as \fIerrorCallback\fR.

.SH EXAMPLES

The following example creates an RPC server to return unique 
integer identifiers.  
On the host zonker (the server):
.DS
	dp_MakeRPCServer 4545

	dp_Host -
	dp_Host +128.32.149.*
	set myId 0
	proc GetId {} {global myId; incr myId; return $myId}
.DE

On host linus (the client, address 128.32.149.59):
.DS
	set server [dp_MakeRPCClient zonker 4545]
	dp_RPC $server GetId
.DE

On a host not on the 128.32.149 subnet:
.DS
	set server [dp_MakeRPCClient zonker 4545]
	error -> Connection refused: Host not authorized
.DE

.SH "SEE ALSO"
.PP
Tcl-DP(n) dp_connect(n) dp_filehandler(n) dpwish(1)

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/CloseRPC
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_Host, dp_SetCheckCmd
.sp
  \- Tcl-DP remote procedure call support
.SH DESCRIPTION
.LP

The commands described here are part of the Tcl-DP (Tcl
Distributed Programming) extension to Tcl/Tk.  These Tcl/Tk
commands provide support for Tcl/Tk remote procedure calls
(RPC's).
.SH COMMANDS
.TP
\fBdp_MakeRPCServer \fI?port? ?loginProc? ?cmdCheckProc? ?retFile?\fR

Dp_MakeRPCServer arranges for the current Tcl/Tk interpreter to accept
RPC client connections.  Clients will connect to the server at the
given \fIport\fR (see dp_MakeRPCClient below).  The \fIport\fR should
be an unused port or 0 if you want a port number automatically chosen
for you.  If \fIport\fR is not supplied, a default value of 0 is used.
The port number used is returned unless \fIretFile\fP in non-zero,
in which case both the file identifier and the port number for the
listening socket is returned.

\fILoginProc\fR can be used to refuse connection
attempts by unauthorized hosts.  When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.  The default \fIloginProc\fR is
"dp_CheckHost."

Dp_CheckHost checks an internal access control list
to verify that the host is allowed to connect.  Host may be added
to (or deleted from) this access control using the dp_Host
command described below.

When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over an RPC channel.  When an RPC request is
received, the requested command will be passed as a string to
\fIcmdCheckProc\fR before evaluation.  If \fIcmdCheckProc\fR is the
keyword "none," no command checking is performed.  \fICmdCheckProc\fR
defaults to "none." See dp_SetCheckCmd for more details on security.

.TP
\fBdp_Host \fI[+/-]host\fR

This command is used to modify the internal access control list
used in Tcl-DP to determine if hosts are authorized to connect to this
server.  For backwards compatibilty, all hosts are initially allowed to
connect.  Dp_Host is functionally similar to xhost(1).
New additions to the access control list override previous directives.
Dp_Host accepts the following options:

.RS
.TP
\fBdp_Host \fI+[name]\fR
The given \fIname\fP is added to the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  The pattern matching is the same as used in the
Tcl "string match" command.  If \fIname\fP is not supplied, any
host may connect (the default).

.TP
\fBdp_Host \fI-[name]\fR
The given \fIname\fP is removed from the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  Existing connections are not broken, but new
connection attempts will be denied.  The pattern matching is the same
as used in the Tcl "string match" command.  If \fIname\fP is not
supplied, all connections will be refused.

.RE

.TP
\fBdp_MakeRPCClient \fIhost port ?cmdCheckProc?\fR

\fBdp_MakeRPCClient\fP establishes an RPC connection to the RPC server
at the \fIport\fR running on the machine with the \fIhost\fR network
address.  \fIPort\fP can be specified either by number or by service
name (see services(5) for further information on specifying services by
name).  A \fIsockId\fR representing the RPC connection is returned.
This \fIsockId\fR is refered to below as a \fIpeer\fR, since RPC
connections are peer to peer.  The transmission protocol used for
Tcl-DP RPC services is TCP/IP.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over the connection.  See dp_MakeRPCServer
and dp_SetCheckCmd for more details.

.TP
\fBdp_SetCheckCmd \fIpeer cmdCheckProc\fR

\fBDp_SetCheckCmd\fR arranges for \fIcmdCheckProc\fR to be called when
an RPC/RDO request comes from the specified \fIpeer\fR.
\fICmdCheckProc\fR is passed the inbound RPC/RDO request as its args
(\fIcmdCheckProc\fR should accept multiple arguments).
If \fIcmdCheckProc\fR returns normally, the requested command is evaluated
normally (i.e., no further checking).  If \fIcmdCheckProc\fR returns
with the "continue" code (see the Tcl return command for how to return
with a special code) then the requested command will be executed, but
any commands it issues will also be checked.  If \fIcmdCheckProc\fR
returns with a "return" code, then the result of \fIcmdCheckProc\fR is
returned as the result of the requested command.  If \fIcmdCheckProc\fR
returns with an "error" code, the requested command will not be
executed, and the error message from the check command will be used as
the error message from the requested command.  Any other return codes
of \fIcmdCheckProc\fR ("break", etc.) will prevent the requested
command from being executed, and an error message will be sent to the
caller.

For example, the following procedure allows the commands "Safe" and
"puts" to be executed without checking, "set" to be called with
one argument (i.e., read, but not write, variables), and "eval" to
be used with any resulting evaluations checked.

.DS
proc MyCheck {cmd args} {
    set argc [llength $args]
    case $cmd in {
	Safe   	{return}
	puts	{return}
	eval	{return -code continue}
	set	{
		    if {$argc == 2} {
			error "Permission to set variables denied"
		    } else {
			return
		    }
		}
    }
    return -code break
}
.DE


.TP
\fBdp_CloseRPC \fIpeer\fR
.br
.sp
This command arranges a clean closing of an RPC connection, on
both sides of the connection.
.TP
\fBdp_CancelRPC ?\fIpeer\fR? ?\fIpeer\fR? ...
.br
.sp
This command cancels current RPC invocations that are presently
waiting for a return value.  If no \fIpeer\fRs are specified,
then all current but waiting RPC invocations are canceled.
These cancelled RPC's will return an error.
.TP
\fBdp_RPC \fIpeer\fR ?\fI-events events\fR? 
.br
?\fI-timeout millisecs\fR ??\fI-timeoutReturn callback\fR???
.br
\fIcommand\fR ?\fIargs ...\fR?

This command arranges for the Tcl/Tk \fIcommand\fR and its
\fIargs\fR to be evaluated in the remote Tcl/Tk interpreter,
using the RPC connection specified by \fIpeer\fR.  Before the
remote evaluation of \fIcommand\fR and \fIargs\fR, the global
variable rpcFile in the remote Tcl/Tk interpreter is bound
to the \fIpeer\fR whose request is being evaluated.  (Thus, in
your \fIcommand\fR, you can access the rpcFile variable to
figure out the RPC peer that originated the \fIcommand\fR.)

The \fI-events\fR flag to the dp_RPC command lets you specify
which events should be handled while waiting for the return value
of a RPC.  The \fI-events\fR parameter should be a list of the
tokens \fIX\fR, \fIrpc\fR, \fIfile\fR, \fItimer\fR, \fIidle\fR,
\fIall\fR, or \fInone\fR, where each token represents an event
type.  Presently, a \fIrpc\fR token is the same as a \fIfile\fR
token.  The \fInone\fR token is the default.  See
Tk_DoOneEvent(3) for more information on these event types.

The \fI-timeout\fR flag to the dp_RPC command lets you specify
an integer millisecond timeout value for the RPC, which by
default will return an error value if the timeout occurs.
Supplying a \fI-timeout\fR value of zero or less than zero means
that no timeout will be checked.  If you want to use timeouts,
you must also specify \fI-events\fR to be anything but none.

The \fI-timeoutReturn\fR callback, if specified, is evaluated
when a timeout occurs.  The callback is evaluated with the
\fIpeer\fR identifier appended.  If a timeout occurs and a
\fI-timeoutReturn\fR callback was specified, then the return
value of the callback is used as the return value of the
timed-out dp_RPC.  Otherwise the timed-out RPC returns an
error.
.TP
\fBdp_RDO \fIpeer\fR ?\fI-callback resultCallback\fR?
?\fI-onerror errorCallback\fR? \fIcommand\fR ?\fIargs ...\fR?

This command arranges for \fIcommand\fR and its \fIargs\fR to be
remotely evaluated in the Tcl/Tk interpreter whose connection is
specified by \fIpeer\fR argument.  Unlike the dp_RPC command,
the dp_RDO command does not wait for a return value to be
returned by the remote Tcl/Tk interpreter, but returns
immediately.  Before the remote evaluation, the global variable
rpcFile in the remote Tcl/Tk interpreter is set as
described above for the dp_RPC command.

You can use the \fIresultCallback\fR parameter of dp_RDO to
asynchronously retrieve the value of the remote evaluation.  If
specified, the \fIcallback\fR command appended with the return
value of the remote \fIcommand\fR evaluation is evaluated in the
local Tcl/Tk interpreter.

If you specify an \fIerrorCallback\fR and an error occurs during the
remote evaluation, \fIerrorCallback\fP will be evaluated with the error
message as a parameter.  The default value for \fIerrorCallback\fR is
tkerror.  If you wish to ignore errors generated during RDO
evaluation, specify the keyword "none" as \fIerrorCallback\fR.

.SH EXAMPLES

The following example creates an RPC server to return unique 
integer identifiers.  
On the host zonker (the server):
.DS
	dp_MakeRPCServer 4545

	dp_Host -
	dp_Host +128.32.149.*
	set myId 0
	proc GetId {} {global myId; incr myId; return $myId}
.DE

On host linus (the client, address 128.32.149.59):
.DS
	set server [dp_MakeRPCClient zonker 4545]
	dp_RPC $server GetId
.DE

On a host not on the 128.32.149 subnet:
.DS
	set server [dp_MakeRPCClient zonker 4545]
	error -> Connection refused: Host not authorized
.DE

.SH "SEE ALSO"
.PP
Tcl-DP(n) dp_connect(n) dp_filehandler(n) dpwish(1)

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/Host
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_Host, dp_SetCheckCmd
.sp
  \- Tcl-DP remote procedure call support
.SH DESCRIPTION
.LP

The commands described here are part of the Tcl-DP (Tcl
Distributed Programming) extension to Tcl/Tk.  These Tcl/Tk
commands provide support for Tcl/Tk remote procedure calls
(RPC's).
.SH COMMANDS
.TP
\fBdp_MakeRPCServer \fI?port? ?loginProc? ?cmdCheckProc? ?retFile?\fR

Dp_MakeRPCServer arranges for the current Tcl/Tk interpreter to accept
RPC client connections.  Clients will connect to the server at the
given \fIport\fR (see dp_MakeRPCClient below).  The \fIport\fR should
be an unused port or 0 if you want a port number automatically chosen
for you.  If \fIport\fR is not supplied, a default value of 0 is used.
The port number used is returned unless \fIretFile\fP in non-zero,
in which case both the file identifier and the port number for the
listening socket is returned.

\fILoginProc\fR can be used to refuse connection
attempts by unauthorized hosts.  When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.  The default \fIloginProc\fR is
"dp_CheckHost."

Dp_CheckHost checks an internal access control list
to verify that the host is allowed to connect.  Host may be added
to (or deleted from) this access control using the dp_Host
command described below.

When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over an RPC channel.  When an RPC request is
received, the requested command will be passed as a string to
\fIcmdCheckProc\fR before evaluation.  If \fIcmdCheckProc\fR is the
keyword "none," no command checking is performed.  \fICmdCheckProc\fR
defaults to "none." See dp_SetCheckCmd for more details on security.

.TP
\fBdp_Host \fI[+/-]host\fR

This command is used to modify the internal access control list
used in Tcl-DP to determine if hosts are authorized to connect to this
server.  For backwards compatibilty, all hosts are initially allowed to
connect.  Dp_Host is functionally similar to xhost(1).
New additions to the access control list override previous directives.
Dp_Host accepts the following options:

.RS
.TP
\fBdp_Host \fI+[name]\fR
The given \fIname\fP is added to the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  The pattern matching is the same as used in the
Tcl "string match" command.  If \fIname\fP is not supplied, any
host may connect (the default).

.TP
\fBdp_Host \fI-[name]\fR
The given \fIname\fP is removed from the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  Existing connections are not broken, but new
connection attempts will be denied.  The pattern matching is the same
as used in the Tcl "string match" command.  If \fIname\fP is not
supplied, all connections will be refused.

.RE

.TP
\fBdp_MakeRPCClient \fIhost port ?cmdCheckProc?\fR

\fBdp_MakeRPCClient\fP establishes an RPC connection to the RPC server
at the \fIport\fR running on the machine with the \fIhost\fR network
address.  \fIPort\fP can be specified either by number or by service
name (see services(5) for further information on specifying services by
name).  A \fIsockId\fR representing the RPC connection is returned.
This \fIsockId\fR is refered to below as a \fIpeer\fR, since RPC
connections are peer to peer.  The transmission protocol used for
Tcl-DP RPC services is TCP/IP.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over the connection.  See dp_MakeRPCServer
and dp_SetCheckCmd for more details.

.TP
\fBdp_SetCheckCmd \fIpeer cmdCheckProc\fR

\fBDp_SetCheckCmd\fR arranges for \fIcmdCheckProc\fR to be called when
an RPC/RDO request comes from the specified \fIpeer\fR.
\fICmdCheckProc\fR is passed the inbound RPC/RDO request as its args
(\fIcmdCheckProc\fR should accept multiple arguments).
If \fIcmdCheckProc\fR returns normally, the requested command is evaluated
normally (i.e., no further checking).  If \fIcmdCheckProc\fR returns
with the "continue" code (see the Tcl return command for how to return
with a special code) then the requested command will be executed, but
any commands it issues will also be checked.  If \fIcmdCheckProc\fR
returns with a "return" code, then the result of \fIcmdCheckProc\fR is
returned as the result of the requested command.  If \fIcmdCheckProc\fR
returns with an "error" code, the requested command will not be
executed, and the error message from the check command will be used as
the error message from the requested command.  Any other return codes
of \fIcmdCheckProc\fR ("break", etc.) will prevent the requested
command from being executed, and an error message will be sent to the
caller.

For example, the following procedure allows the commands "Safe" and
"puts" to be executed without checking, "set" to be called with
one argument (i.e., read, but not write, variables), and "eval" to
be used with any resulting evaluations checked.

.DS
proc MyCheck {cmd args} {
    set argc [llength $args]
    case $cmd in {
	Safe   	{return}
	puts	{return}
	eval	{return -code continue}
	set	{
		    if {$argc == 2} {
			error "Permission to set variables denied"
		    } else {
			return
		    }
		}
    }
    return -code break
}
.DE


.TP
\fBdp_CloseRPC \fIpeer\fR
.br
.sp
This command arranges a clean closing of an RPC connection, on
both sides of the connection.
.TP
\fBdp_CancelRPC ?\fIpeer\fR? ?\fIpeer\fR? ...
.br
.sp
This command cancels current RPC invocations that are presently
waiting for a return value.  If no \fIpeer\fRs are specified,
then all current but waiting RPC invocations are canceled.
These cancelled RPC's will return an error.
.TP
\fBdp_RPC \fIpeer\fR ?\fI-events events\fR? 
.br
?\fI-timeout millisecs\fR ??\fI-timeoutReturn callback\fR???
.br
\fIcommand\fR ?\fIargs ...\fR?

This command arranges for the Tcl/Tk \fIcommand\fR and its
\fIargs\fR to be evaluated in the remote Tcl/Tk interpreter,
using the RPC connection specified by \fIpeer\fR.  Before the
remote evaluation of \fIcommand\fR and \fIargs\fR, the global
variable rpcFile in the remote Tcl/Tk interpreter is bound
to the \fIpeer\fR whose request is being evaluated.  (Thus, in
your \fIcommand\fR, you can access the rpcFile variable to
figure out the RPC peer that originated the \fIcommand\fR.)

The \fI-events\fR flag to the dp_RPC command lets you specify
which events should be handled while waiting for the return value
of a RPC.  The \fI-events\fR parameter should be a list of the
tokens \fIX\fR, \fIrpc\fR, \fIfile\fR, \fItimer\fR, \fIidle\fR,
\fIall\fR, or \fInone\fR, where each token represents an event
type.  Presently, a \fIrpc\fR token is the same as a \fIfile\fR
token.  The \fInone\fR token is the default.  See
Tk_DoOneEvent(3) for more information on these event types.

The \fI-timeout\fR flag to the dp_RPC command lets you specify
an integer millisecond timeout value for the RPC, which by
default will return an error value if the timeout occurs.
Supplying a \fI-timeout\fR value of zero or less than zero means
that no timeout will be checked.  If you want to use timeouts,
you must also specify \fI-events\fR to be anything but none.

The \fI-timeoutReturn\fR callback, if specified, is evaluated
when a timeout occurs.  The callback is evaluated with the
\fIpeer\fR identifier appended.  If a timeout occurs and a
\fI-timeoutReturn\fR callback was specified, then the return
value of the callback is used as the return value of the
timed-out dp_RPC.  Otherwise the timed-out RPC returns an
error.
.TP
\fBdp_RDO \fIpeer\fR ?\fI-callback resultCallback\fR?
?\fI-onerror errorCallback\fR? \fIcommand\fR ?\fIargs ...\fR?

This command arranges for \fIcommand\fR and its \fIargs\fR to be
remotely evaluated in the Tcl/Tk interpreter whose connection is
specified by \fIpeer\fR argument.  Unlike the dp_RPC command,
the dp_RDO command does not wait for a return value to be
returned by the remote Tcl/Tk interpreter, but returns
immediately.  Before the remote evaluation, the global variable
rpcFile in the remote Tcl/Tk interpreter is set as
described above for the dp_RPC command.

You can use the \fIresultCallback\fR parameter of dp_RDO to
asynchronously retrieve the value of the remote evaluation.  If
specified, the \fIcallback\fR command appended with the return
value of the remote \fIcommand\fR evaluation is evaluated in the
local Tcl/Tk interpreter.

If you specify an \fIerrorCallback\fR and an error occurs during the
remote evaluation, \fIerrorCallback\fP will be evaluated with the error
message as a parameter.  The default value for \fIerrorCallback\fR is
tkerror.  If you wish to ignore errors generated during RDO
evaluation, specify the keyword "none" as \fIerrorCallback\fR.

.SH EXAMPLES

The following example creates an RPC server to return unique 
integer identifiers.  
On the host zonker (the server):
.DS
	dp_MakeRPCServer 4545

	dp_Host -
	dp_Host +128.32.149.*
	set myId 0
	proc GetId {} {global myId; incr myId; return $myId}
.DE

On host linus (the client, address 128.32.149.59):
.DS
	set server [dp_MakeRPCClient zonker 4545]
	dp_RPC $server GetId
.DE

On a host not on the 128.32.149 subnet:
.DS
	set server [dp_MakeRPCClient zonker 4545]
	error -> Connection refused: Host not authorized
.DE

.SH "SEE ALSO"
.PP
Tcl-DP(n) dp_connect(n) dp_filehandler(n) dpwish(1)

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/MakeRPCClient
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_Host, dp_SetCheckCmd
.sp
  \- Tcl-DP remote procedure call support
.SH DESCRIPTION
.LP

The commands described here are part of the Tcl-DP (Tcl
Distributed Programming) extension to Tcl/Tk.  These Tcl/Tk
commands provide support for Tcl/Tk remote procedure calls
(RPC's).
.SH COMMANDS
.TP
\fBdp_MakeRPCServer \fI?port? ?loginProc? ?cmdCheckProc? ?retFile?\fR

Dp_MakeRPCServer arranges for the current Tcl/Tk interpreter to accept
RPC client connections.  Clients will connect to the server at the
given \fIport\fR (see dp_MakeRPCClient below).  The \fIport\fR should
be an unused port or 0 if you want a port number automatically chosen
for you.  If \fIport\fR is not supplied, a default value of 0 is used.
The port number used is returned unless \fIretFile\fP in non-zero,
in which case both the file identifier and the port number for the
listening socket is returned.

\fILoginProc\fR can be used to refuse connection
attempts by unauthorized hosts.  When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.  The default \fIloginProc\fR is
"dp_CheckHost."

Dp_CheckHost checks an internal access control list
to verify that the host is allowed to connect.  Host may be added
to (or deleted from) this access control using the dp_Host
command described below.

When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over an RPC channel.  When an RPC request is
received, the requested command will be passed as a string to
\fIcmdCheckProc\fR before evaluation.  If \fIcmdCheckProc\fR is the
keyword "none," no command checking is performed.  \fICmdCheckProc\fR
defaults to "none." See dp_SetCheckCmd for more details on security.

.TP
\fBdp_Host \fI[+/-]host\fR

This command is used to modify the internal access control list
used in Tcl-DP to determine if hosts are authorized to connect to this
server.  For backwards compatibilty, all hosts are initially allowed to
connect.  Dp_Host is functionally similar to xhost(1).
New additions to the access control list override previous directives.
Dp_Host accepts the following options:

.RS
.TP
\fBdp_Host \fI+[name]\fR
The given \fIname\fP is added to the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  The pattern matching is the same as used in the
Tcl "string match" command.  If \fIname\fP is not supplied, any
host may connect (the default).

.TP
\fBdp_Host \fI-[name]\fR
The given \fIname\fP is removed from the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  Existing connections are not broken, but new
connection attempts will be denied.  The pattern matching is the same
as used in the Tcl "string match" command.  If \fIname\fP is not
supplied, all connections will be refused.

.RE

.TP
\fBdp_MakeRPCClient \fIhost port ?cmdCheckProc?\fR

\fBdp_MakeRPCClient\fP establishes an RPC connection to the RPC server
at the \fIport\fR running on the machine with the \fIhost\fR network
address.  \fIPort\fP can be specified either by number or by service
name (see services(5) for further information on specifying services by
name).  A \fIsockId\fR representing the RPC connection is returned.
This \fIsockId\fR is refered to below as a \fIpeer\fR, since RPC
connections are peer to peer.  The transmission protocol used for
Tcl-DP RPC services is TCP/IP.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over the connection.  See dp_MakeRPCServer
and dp_SetCheckCmd for more details.

.TP
\fBdp_SetCheckCmd \fIpeer cmdCheckProc\fR

\fBDp_SetCheckCmd\fR arranges for \fIcmdCheckProc\fR to be called when
an RPC/RDO request comes from the specified \fIpeer\fR.
\fICmdCheckProc\fR is passed the inbound RPC/RDO request as its args
(\fIcmdCheckProc\fR should accept multiple arguments).
If \fIcmdCheckProc\fR returns normally, the requested command is evaluated
normally (i.e., no further checking).  If \fIcmdCheckProc\fR returns
with the "continue" code (see the Tcl return command for how to return
with a special code) then the requested command will be executed, but
any commands it issues will also be checked.  If \fIcmdCheckProc\fR
returns with a "return" code, then the result of \fIcmdCheckProc\fR is
returned as the result of the requested command.  If \fIcmdCheckProc\fR
returns with an "error" code, the requested command will not be
executed, and the error message from the check command will be used as
the error message from the requested command.  Any other return codes
of \fIcmdCheckProc\fR ("break", etc.) will prevent the requested
command from being executed, and an error message will be sent to the
caller.

For example, the following procedure allows the commands "Safe" and
"puts" to be executed without checking, "set" to be called with
one argument (i.e., read, but not write, variables), and "eval" to
be used with any resulting evaluations checked.

.DS
proc MyCheck {cmd args} {
    set argc [llength $args]
    case $cmd in {
	Safe   	{return}
	puts	{return}
	eval	{return -code continue}
	set	{
		    if {$argc == 2} {
			error "Permission to set variables denied"
		    } else {
			return
		    }
		}
    }
    return -code break
}
.DE


.TP
\fBdp_CloseRPC \fIpeer\fR
.br
.sp
This command arranges a clean closing of an RPC connection, on
both sides of the connection.
.TP
\fBdp_CancelRPC ?\fIpeer\fR? ?\fIpeer\fR? ...
.br
.sp
This command cancels current RPC invocations that are presently
waiting for a return value.  If no \fIpeer\fRs are specified,
then all current but waiting RPC invocations are canceled.
These cancelled RPC's will return an error.
.TP
\fBdp_RPC \fIpeer\fR ?\fI-events events\fR? 
.br
?\fI-timeout millisecs\fR ??\fI-timeoutReturn callback\fR???
.br
\fIcommand\fR ?\fIargs ...\fR?

This command arranges for the Tcl/Tk \fIcommand\fR and its
\fIargs\fR to be evaluated in the remote Tcl/Tk interpreter,
using the RPC connection specified by \fIpeer\fR.  Before the
remote evaluation of \fIcommand\fR and \fIargs\fR, the global
variable rpcFile in the remote Tcl/Tk interpreter is bound
to the \fIpeer\fR whose request is being evaluated.  (Thus, in
your \fIcommand\fR, you can access the rpcFile variable to
figure out the RPC peer that originated the \fIcommand\fR.)

The \fI-events\fR flag to the dp_RPC command lets you specify
which events should be handled while waiting for the return value
of a RPC.  The \fI-events\fR parameter should be a list of the
tokens \fIX\fR, \fIrpc\fR, \fIfile\fR, \fItimer\fR, \fIidle\fR,
\fIall\fR, or \fInone\fR, where each token represents an event
type.  Presently, a \fIrpc\fR token is the same as a \fIfile\fR
token.  The \fInone\fR token is the default.  See
Tk_DoOneEvent(3) for more information on these event types.

The \fI-timeout\fR flag to the dp_RPC command lets you specify
an integer millisecond timeout value for the RPC, which by
default will return an error value if the timeout occurs.
Supplying a \fI-timeout\fR value of zero or less than zero means
that no timeout will be checked.  If you want to use timeouts,
you must also specify \fI-events\fR to be anything but none.

The \fI-timeoutReturn\fR callback, if specified, is evaluated
when a timeout occurs.  The callback is evaluated with the
\fIpeer\fR identifier appended.  If a timeout occurs and a
\fI-timeoutReturn\fR callback was specified, then the return
value of the callback is used as the return value of the
timed-out dp_RPC.  Otherwise the timed-out RPC returns an
error.
.TP
\fBdp_RDO \fIpeer\fR ?\fI-callback resultCallback\fR?
?\fI-onerror errorCallback\fR? \fIcommand\fR ?\fIargs ...\fR?

This command arranges for \fIcommand\fR and its \fIargs\fR to be
remotely evaluated in the Tcl/Tk interpreter whose connection is
specified by \fIpeer\fR argument.  Unlike the dp_RPC command,
the dp_RDO command does not wait for a return value to be
returned by the remote Tcl/Tk interpreter, but returns
immediately.  Before the remote evaluation, the global variable
rpcFile in the remote Tcl/Tk interpreter is set as
described above for the dp_RPC command.

You can use the \fIresultCallback\fR parameter of dp_RDO to
asynchronously retrieve the value of the remote evaluation.  If
specified, the \fIcallback\fR command appended with the return
value of the remote \fIcommand\fR evaluation is evaluated in the
local Tcl/Tk interpreter.

If you specify an \fIerrorCallback\fR and an error occurs during the
remote evaluation, \fIerrorCallback\fP will be evaluated with the error
message as a parameter.  The default value for \fIerrorCallback\fR is
tkerror.  If you wish to ignore errors generated during RDO
evaluation, specify the keyword "none" as \fIerrorCallback\fR.

.SH EXAMPLES

The following example creates an RPC server to return unique 
integer identifiers.  
On the host zonker (the server):
.DS
	dp_MakeRPCServer 4545

	dp_Host -
	dp_Host +128.32.149.*
	set myId 0
	proc GetId {} {global myId; incr myId; return $myId}
.DE

On host linus (the client, address 128.32.149.59):
.DS
	set server [dp_MakeRPCClient zonker 4545]
	dp_RPC $server GetId
.DE

On a host not on the 128.32.149 subnet:
.DS
	set server [dp_MakeRPCClient zonker 4545]
	error -> Connection refused: Host not authorized
.DE

.SH "SEE ALSO"
.PP
Tcl-DP(n) dp_connect(n) dp_filehandler(n) dpwish(1)

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/MakeRPCServer
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_Host, dp_SetCheckCmd
.sp
  \- Tcl-DP remote procedure call support
.SH DESCRIPTION
.LP

The commands described here are part of the Tcl-DP (Tcl
Distributed Programming) extension to Tcl/Tk.  These Tcl/Tk
commands provide support for Tcl/Tk remote procedure calls
(RPC's).
.SH COMMANDS
.TP
\fBdp_MakeRPCServer \fI?port? ?loginProc? ?cmdCheckProc? ?retFile?\fR

Dp_MakeRPCServer arranges for the current Tcl/Tk interpreter to accept
RPC client connections.  Clients will connect to the server at the
given \fIport\fR (see dp_MakeRPCClient below).  The \fIport\fR should
be an unused port or 0 if you want a port number automatically chosen
for you.  If \fIport\fR is not supplied, a default value of 0 is used.
The port number used is returned unless \fIretFile\fP in non-zero,
in which case both the file identifier and the port number for the
listening socket is returned.

\fILoginProc\fR can be used to refuse connection
attempts by unauthorized hosts.  When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.  The default \fIloginProc\fR is
"dp_CheckHost."

Dp_CheckHost checks an internal access control list
to verify that the host is allowed to connect.  Host may be added
to (or deleted from) this access control using the dp_Host
command described below.

When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over an RPC channel.  When an RPC request is
received, the requested command will be passed as a string to
\fIcmdCheckProc\fR before evaluation.  If \fIcmdCheckProc\fR is the
keyword "none," no command checking is performed.  \fICmdCheckProc\fR
defaults to "none." See dp_SetCheckCmd for more details on security.

.TP
\fBdp_Host \fI[+/-]host\fR

This command is used to modify the internal access control list
used in Tcl-DP to determine if hosts are authorized to connect to this
server.  For backwards compatibilty, all hosts are initially allowed to
connect.  Dp_Host is functionally similar to xhost(1).
New additions to the access control list override previous directives.
Dp_Host accepts the following options:

.RS
.TP
\fBdp_Host \fI+[name]\fR
The given \fIname\fP is added to the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  The pattern matching is the same as used in the
Tcl "string match" command.  If \fIname\fP is not supplied, any
host may connect (the default).

.TP
\fBdp_Host \fI-[name]\fR
The given \fIname\fP is removed from the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  Existing connections are not broken, but new
connection attempts will be denied.  The pattern matching is the same
as used in the Tcl "string match" command.  If \fIname\fP is not
supplied, all connections will be refused.

.RE

.TP
\fBdp_MakeRPCClient \fIhost port ?cmdCheckProc?\fR

\fBdp_MakeRPCClient\fP establishes an RPC connection to the RPC server
at the \fIport\fR running on the machine with the \fIhost\fR network
address.  \fIPort\fP can be specified either by number or by service
name (see services(5) for further information on specifying services by
name).  A \fIsockId\fR representing the RPC connection is returned.
This \fIsockId\fR is refered to below as a \fIpeer\fR, since RPC
connections are peer to peer.  The transmission protocol used for
Tcl-DP RPC services is TCP/IP.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over the connection.  See dp_MakeRPCServer
and dp_SetCheckCmd for more details.

.TP
\fBdp_SetCheckCmd \fIpeer cmdCheckProc\fR

\fBDp_SetCheckCmd\fR arranges for \fIcmdCheckProc\fR to be called when
an RPC/RDO request comes from the specified \fIpeer\fR.
\fICmdCheckProc\fR is passed the inbound RPC/RDO request as its args
(\fIcmdCheckProc\fR should accept multiple arguments).
If \fIcmdCheckProc\fR returns normally, the requested command is evaluated
normally (i.e., no further checking).  If \fIcmdCheckProc\fR returns
with the "continue" code (see the Tcl return command for how to return
with a special code) then the requested command will be executed, but
any commands it issues will also be checked.  If \fIcmdCheckProc\fR
returns with a "return" code, then the result of \fIcmdCheckProc\fR is
returned as the result of the requested command.  If \fIcmdCheckProc\fR
returns with an "error" code, the requested command will not be
executed, and the error message from the check command will be used as
the error message from the requested command.  Any other return codes
of \fIcmdCheckProc\fR ("break", etc.) will prevent the requested
command from being executed, and an error message will be sent to the
caller.

For example, the following procedure allows the commands "Safe" and
"puts" to be executed without checking, "set" to be called with
one argument (i.e., read, but not write, variables), and "eval" to
be used with any resulting evaluations checked.

.DS
proc MyCheck {cmd args} {
    set argc [llength $args]
    case $cmd in {
	Safe   	{return}
	puts	{return}
	eval	{return -code continue}
	set	{
		    if {$argc == 2} {
			error "Permission to set variables denied"
		    } else {
			return
		    }
		}
    }
    return -code break
}
.DE


.TP
\fBdp_CloseRPC \fIpeer\fR
.br
.sp
This command arranges a clean closing of an RPC connection, on
both sides of the connection.
.TP
\fBdp_CancelRPC ?\fIpeer\fR? ?\fIpeer\fR? ...
.br
.sp
This command cancels current RPC invocations that are presently
waiting for a return value.  If no \fIpeer\fRs are specified,
then all current but waiting RPC invocations are canceled.
These cancelled RPC's will return an error.
.TP
\fBdp_RPC \fIpeer\fR ?\fI-events events\fR? 
.br
?\fI-timeout millisecs\fR ??\fI-timeoutReturn callback\fR???
.br
\fIcommand\fR ?\fIargs ...\fR?

This command arranges for the Tcl/Tk \fIcommand\fR and its
\fIargs\fR to be evaluated in the remote Tcl/Tk interpreter,
using the RPC connection specified by \fIpeer\fR.  Before the
remote evaluation of \fIcommand\fR and \fIargs\fR, the global
variable rpcFile in the remote Tcl/Tk interpreter is bound
to the \fIpeer\fR whose request is being evaluated.  (Thus, in
your \fIcommand\fR, you can access the rpcFile variable to
figure out the RPC peer that originated the \fIcommand\fR.)

The \fI-events\fR flag to the dp_RPC command lets you specify
which events should be handled while waiting for the return value
of a RPC.  The \fI-events\fR parameter should be a list of the
tokens \fIX\fR, \fIrpc\fR, \fIfile\fR, \fItimer\fR, \fIidle\fR,
\fIall\fR, or \fInone\fR, where each token represents an event
type.  Presently, a \fIrpc\fR token is the same as a \fIfile\fR
token.  The \fInone\fR token is the default.  See
Tk_DoOneEvent(3) for more information on these event types.

The \fI-timeout\fR flag to the dp_RPC command lets you specify
an integer millisecond timeout value for the RPC, which by
default will return an error value if the timeout occurs.
Supplying a \fI-timeout\fR value of zero or less than zero means
that no timeout will be checked.  If you want to use timeouts,
you must also specify \fI-events\fR to be anything but none.

The \fI-timeoutReturn\fR callback, if specified, is evaluated
when a timeout occurs.  The callback is evaluated with the
\fIpeer\fR identifier appended.  If a timeout occurs and a
\fI-timeoutReturn\fR callback was specified, then the return
value of the callback is used as the return value of the
timed-out dp_RPC.  Otherwise the timed-out RPC returns an
error.
.TP
\fBdp_RDO \fIpeer\fR ?\fI-callback resultCallback\fR?
?\fI-onerror errorCallback\fR? \fIcommand\fR ?\fIargs ...\fR?

This command arranges for \fIcommand\fR and its \fIargs\fR to be
remotely evaluated in the Tcl/Tk interpreter whose connection is
specified by \fIpeer\fR argument.  Unlike the dp_RPC command,
the dp_RDO command does not wait for a return value to be
returned by the remote Tcl/Tk interpreter, but returns
immediately.  Before the remote evaluation, the global variable
rpcFile in the remote Tcl/Tk interpreter is set as
described above for the dp_RPC command.

You can use the \fIresultCallback\fR parameter of dp_RDO to
asynchronously retrieve the value of the remote evaluation.  If
specified, the \fIcallback\fR command appended with the return
value of the remote \fIcommand\fR evaluation is evaluated in the
local Tcl/Tk interpreter.

If you specify an \fIerrorCallback\fR and an error occurs during the
remote evaluation, \fIerrorCallback\fP will be evaluated with the error
message as a parameter.  The default value for \fIerrorCallback\fR is
tkerror.  If you wish to ignore errors generated during RDO
evaluation, specify the keyword "none" as \fIerrorCallback\fR.

.SH EXAMPLES

The following example creates an RPC server to return unique 
integer identifiers.  
On the host zonker (the server):
.DS
	dp_MakeRPCServer 4545

	dp_Host -
	dp_Host +128.32.149.*
	set myId 0
	proc GetId {} {global myId; incr myId; return $myId}
.DE

On host linus (the client, address 128.32.149.59):
.DS
	set server [dp_MakeRPCClient zonker 4545]
	dp_RPC $server GetId
.DE

On a host not on the 128.32.149 subnet:
.DS
	set server [dp_MakeRPCClient zonker 4545]
	error -> Connection refused: Host not authorized
.DE

.SH "SEE ALSO"
.PP
Tcl-DP(n) dp_connect(n) dp_filehandler(n) dpwish(1)

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/RDO
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_Host, dp_SetCheckCmd
.sp
  \- Tcl-DP remote procedure call support
.SH DESCRIPTION
.LP

The commands described here are part of the Tcl-DP (Tcl
Distributed Programming) extension to Tcl/Tk.  These Tcl/Tk
commands provide support for Tcl/Tk remote procedure calls
(RPC's).
.SH COMMANDS
.TP
\fBdp_MakeRPCServer \fI?port? ?loginProc? ?cmdCheckProc? ?retFile?\fR

Dp_MakeRPCServer arranges for the current Tcl/Tk interpreter to accept
RPC client connections.  Clients will connect to the server at the
given \fIport\fR (see dp_MakeRPCClient below).  The \fIport\fR should
be an unused port or 0 if you want a port number automatically chosen
for you.  If \fIport\fR is not supplied, a default value of 0 is used.
The port number used is returned unless \fIretFile\fP in non-zero,
in which case both the file identifier and the port number for the
listening socket is returned.

\fILoginProc\fR can be used to refuse connection
attempts by unauthorized hosts.  When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.  The default \fIloginProc\fR is
"dp_CheckHost."

Dp_CheckHost checks an internal access control list
to verify that the host is allowed to connect.  Host may be added
to (or deleted from) this access control using the dp_Host
command described below.

When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over an RPC channel.  When an RPC request is
received, the requested command will be passed as a string to
\fIcmdCheckProc\fR before evaluation.  If \fIcmdCheckProc\fR is the
keyword "none," no command checking is performed.  \fICmdCheckProc\fR
defaults to "none." See dp_SetCheckCmd for more details on security.

.TP
\fBdp_Host \fI[+/-]host\fR

This command is used to modify the internal access control list
used in Tcl-DP to determine if hosts are authorized to connect to this
server.  For backwards compatibilty, all hosts are initially allowed to
connect.  Dp_Host is functionally similar to xhost(1).
New additions to the access control list override previous directives.
Dp_Host accepts the following options:

.RS
.TP
\fBdp_Host \fI+[name]\fR
The given \fIname\fP is added to the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  The pattern matching is the same as used in the
Tcl "string match" command.  If \fIname\fP is not supplied, any
host may connect (the default).

.TP
\fBdp_Host \fI-[name]\fR
The given \fIname\fP is removed from the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  Existing connections are not broken, but new
connection attempts will be denied.  The pattern matching is the same
as used in the Tcl "string match" command.  If \fIname\fP is not
supplied, all connections will be refused.

.RE

.TP
\fBdp_MakeRPCClient \fIhost port ?cmdCheckProc?\fR

\fBdp_MakeRPCClient\fP establishes an RPC connection to the RPC server
at the \fIport\fR running on the machine with the \fIhost\fR network
address.  \fIPort\fP can be specified either by number or by service
name (see services(5) for further information on specifying services by
name).  A \fIsockId\fR representing the RPC connection is returned.
This \fIsockId\fR is refered to below as a \fIpeer\fR, since RPC
connections are peer to peer.  The transmission protocol used for
Tcl-DP RPC services is TCP/IP.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over the connection.  See dp_MakeRPCServer
and dp_SetCheckCmd for more details.

.TP
\fBdp_SetCheckCmd \fIpeer cmdCheckProc\fR

\fBDp_SetCheckCmd\fR arranges for \fIcmdCheckProc\fR to be called when
an RPC/RDO request comes from the specified \fIpeer\fR.
\fICmdCheckProc\fR is passed the inbound RPC/RDO request as its args
(\fIcmdCheckProc\fR should accept multiple arguments).
If \fIcmdCheckProc\fR returns normally, the requested command is evaluated
normally (i.e., no further checking).  If \fIcmdCheckProc\fR returns
with the "continue" code (see the Tcl return command for how to return
with a special code) then the requested command will be executed, but
any commands it issues will also be checked.  If \fIcmdCheckProc\fR
returns with a "return" code, then the result of \fIcmdCheckProc\fR is
returned as the result of the requested command.  If \fIcmdCheckProc\fR
returns with an "error" code, the requested command will not be
executed, and the error message from the check command will be used as
the error message from the requested command.  Any other return codes
of \fIcmdCheckProc\fR ("break", etc.) will prevent the requested
command from being executed, and an error message will be sent to the
caller.

For example, the following procedure allows the commands "Safe" and
"puts" to be executed without checking, "set" to be called with
one argument (i.e., read, but not write, variables), and "eval" to
be used with any resulting evaluations checked.

.DS
proc MyCheck {cmd args} {
    set argc [llength $args]
    case $cmd in {
	Safe   	{return}
	puts	{return}
	eval	{return -code continue}
	set	{
		    if {$argc == 2} {
			error "Permission to set variables denied"
		    } else {
			return
		    }
		}
    }
    return -code break
}
.DE


.TP
\fBdp_CloseRPC \fIpeer\fR
.br
.sp
This command arranges a clean closing of an RPC connection, on
both sides of the connection.
.TP
\fBdp_CancelRPC ?\fIpeer\fR? ?\fIpeer\fR? ...
.br
.sp
This command cancels current RPC invocations that are presently
waiting for a return value.  If no \fIpeer\fRs are specified,
then all current but waiting RPC invocations are canceled.
These cancelled RPC's will return an error.
.TP
\fBdp_RPC \fIpeer\fR ?\fI-events events\fR? 
.br
?\fI-timeout millisecs\fR ??\fI-timeoutReturn callback\fR???
.br
\fIcommand\fR ?\fIargs ...\fR?

This command arranges for the Tcl/Tk \fIcommand\fR and its
\fIargs\fR to be evaluated in the remote Tcl/Tk interpreter,
using the RPC connection specified by \fIpeer\fR.  Before the
remote evaluation of \fIcommand\fR and \fIargs\fR, the global
variable rpcFile in the remote Tcl/Tk interpreter is bound
to the \fIpeer\fR whose request is being evaluated.  (Thus, in
your \fIcommand\fR, you can access the rpcFile variable to
figure out the RPC peer that originated the \fIcommand\fR.)

The \fI-events\fR flag to the dp_RPC command lets you specify
which events should be handled while waiting for the return value
of a RPC.  The \fI-events\fR parameter should be a list of the
tokens \fIX\fR, \fIrpc\fR, \fIfile\fR, \fItimer\fR, \fIidle\fR,
\fIall\fR, or \fInone\fR, where each token represents an event
type.  Presently, a \fIrpc\fR token is the same as a \fIfile\fR
token.  The \fInone\fR token is the default.  See
Tk_DoOneEvent(3) for more information on these event types.

The \fI-timeout\fR flag to the dp_RPC command lets you specify
an integer millisecond timeout value for the RPC, which by
default will return an error value if the timeout occurs.
Supplying a \fI-timeout\fR value of zero or less than zero means
that no timeout will be checked.  If you want to use timeouts,
you must also specify \fI-events\fR to be anything but none.

The \fI-timeoutReturn\fR callback, if specified, is evaluated
when a timeout occurs.  The callback is evaluated with the
\fIpeer\fR identifier appended.  If a timeout occurs and a
\fI-timeoutReturn\fR callback was specified, then the return
value of the callback is used as the return value of the
timed-out dp_RPC.  Otherwise the timed-out RPC returns an
error.
.TP
\fBdp_RDO \fIpeer\fR ?\fI-callback resultCallback\fR?
?\fI-onerror errorCallback\fR? \fIcommand\fR ?\fIargs ...\fR?

This command arranges for \fIcommand\fR and its \fIargs\fR to be
remotely evaluated in the Tcl/Tk interpreter whose connection is
specified by \fIpeer\fR argument.  Unlike the dp_RPC command,
the dp_RDO command does not wait for a return value to be
returned by the remote Tcl/Tk interpreter, but returns
immediately.  Before the remote evaluation, the global variable
rpcFile in the remote Tcl/Tk interpreter is set as
described above for the dp_RPC command.

You can use the \fIresultCallback\fR parameter of dp_RDO to
asynchronously retrieve the value of the remote evaluation.  If
specified, the \fIcallback\fR command appended with the return
value of the remote \fIcommand\fR evaluation is evaluated in the
local Tcl/Tk interpreter.

If you specify an \fIerrorCallback\fR and an error occurs during the
remote evaluation, \fIerrorCallback\fP will be evaluated with the error
message as a parameter.  The default value for \fIerrorCallback\fR is
tkerror.  If you wish to ignore errors generated during RDO
evaluation, specify the keyword "none" as \fIerrorCallback\fR.

.SH EXAMPLES

The following example creates an RPC server to return unique 
integer identifiers.  
On the host zonker (the server):
.DS
	dp_MakeRPCServer 4545

	dp_Host -
	dp_Host +128.32.149.*
	set myId 0
	proc GetId {} {global myId; incr myId; return $myId}
.DE

On host linus (the client, address 128.32.149.59):
.DS
	set server [dp_MakeRPCClient zonker 4545]
	dp_RPC $server GetId
.DE

On a host not on the 128.32.149 subnet:
.DS
	set server [dp_MakeRPCClient zonker 4545]
	error -> Connection refused: Host not authorized
.DE

.SH "SEE ALSO"
.PP
Tcl-DP(n) dp_connect(n) dp_filehandler(n) dpwish(1)

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/SetCheckCmd
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_Host, dp_SetCheckCmd
.sp
  \- Tcl-DP remote procedure call support
.SH DESCRIPTION
.LP

The commands described here are part of the Tcl-DP (Tcl
Distributed Programming) extension to Tcl/Tk.  These Tcl/Tk
commands provide support for Tcl/Tk remote procedure calls
(RPC's).
.SH COMMANDS
.TP
\fBdp_MakeRPCServer \fI?port? ?loginProc? ?cmdCheckProc? ?retFile?\fR

Dp_MakeRPCServer arranges for the current Tcl/Tk interpreter to accept
RPC client connections.  Clients will connect to the server at the
given \fIport\fR (see dp_MakeRPCClient below).  The \fIport\fR should
be an unused port or 0 if you want a port number automatically chosen
for you.  If \fIport\fR is not supplied, a default value of 0 is used.
The port number used is returned unless \fIretFile\fP in non-zero,
in which case both the file identifier and the port number for the
listening socket is returned.

\fILoginProc\fR can be used to refuse connection
attempts by unauthorized hosts.  When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.  The default \fIloginProc\fR is
"dp_CheckHost."

Dp_CheckHost checks an internal access control list
to verify that the host is allowed to connect.  Host may be added
to (or deleted from) this access control using the dp_Host
command described below.

When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over an RPC channel.  When an RPC request is
received, the requested command will be passed as a string to
\fIcmdCheckProc\fR before evaluation.  If \fIcmdCheckProc\fR is the
keyword "none," no command checking is performed.  \fICmdCheckProc\fR
defaults to "none." See dp_SetCheckCmd for more details on security.

.TP
\fBdp_Host \fI[+/-]host\fR

This command is used to modify the internal access control list
used in Tcl-DP to determine if hosts are authorized to connect to this
server.  For backwards compatibilty, all hosts are initially allowed to
connect.  Dp_Host is functionally similar to xhost(1).
New additions to the access control list override previous directives.
Dp_Host accepts the following options:

.RS
.TP
\fBdp_Host \fI+[name]\fR
The given \fIname\fP is added to the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  The pattern matching is the same as used in the
Tcl "string match" command.  If \fIname\fP is not supplied, any
host may connect (the default).

.TP
\fBdp_Host \fI-[name]\fR
The given \fIname\fP is removed from the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  Existing connections are not broken, but new
connection attempts will be denied.  The pattern matching is the same
as used in the Tcl "string match" command.  If \fIname\fP is not
supplied, all connections will be refused.

.RE

.TP
\fBdp_MakeRPCClient \fIhost port ?cmdCheckProc?\fR

\fBdp_MakeRPCClient\fP establishes an RPC connection to the RPC server
at the \fIport\fR running on the machine with the \fIhost\fR network
address.  \fIPort\fP can be specified either by number or by service
name (see services(5) for further information on specifying services by
name).  A \fIsockId\fR representing the RPC connection is returned.
This \fIsockId\fR is refered to below as a \fIpeer\fR, since RPC
connections are peer to peer.  The transmission protocol used for
Tcl-DP RPC services is TCP/IP.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over the connection.  See dp_MakeRPCServer
and dp_SetCheckCmd for more details.

.TP
\fBdp_SetCheckCmd \fIpeer cmdCheckProc\fR

\fBDp_SetCheckCmd\fR arranges for \fIcmdCheckProc\fR to be called when
an RPC/RDO request comes from the specified \fIpeer\fR.
\fICmdCheckProc\fR is passed the inbound RPC/RDO request as its args
(\fIcmdCheckProc\fR should accept multiple arguments).
If \fIcmdCheckProc\fR returns normally, the requested command is evaluated
normally (i.e., no further checking).  If \fIcmdCheckProc\fR returns
with the "continue" code (see the Tcl return command for how to return
with a special code) then the requested command will be executed, but
any commands it issues will also be checked.  If \fIcmdCheckProc\fR
returns with a "return" code, then the result of \fIcmdCheckProc\fR is
returned as the result of the requested command.  If \fIcmdCheckProc\fR
returns with an "error" code, the requested command will not be
executed, and the error message from the check command will be used as
the error message from the requested command.  Any other return codes
of \fIcmdCheckProc\fR ("break", etc.) will prevent the requested
command from being executed, and an error message will be sent to the
caller.

For example, the following procedure allows the commands "Safe" and
"puts" to be executed without checking, "set" to be called with
one argument (i.e., read, but not write, variables), and "eval" to
be used with any resulting evaluations checked.

.DS
proc MyCheck {cmd args} {
    set argc [llength $args]
    case $cmd in {
	Safe   	{return}
	puts	{return}
	eval	{return -code continue}
	set	{
		    if {$argc == 2} {
			error "Permission to set variables denied"
		    } else {
			return
		    }
		}
    }
    return -code break
}
.DE


.TP
\fBdp_CloseRPC \fIpeer\fR
.br
.sp
This command arranges a clean closing of an RPC connection, on
both sides of the connection.
.TP
\fBdp_CancelRPC ?\fIpeer\fR? ?\fIpeer\fR? ...
.br
.sp
This command cancels current RPC invocations that are presently
waiting for a return value.  If no \fIpeer\fRs are specified,
then all current but waiting RPC invocations are canceled.
These cancelled RPC's will return an error.
.TP
\fBdp_RPC \fIpeer\fR ?\fI-events events\fR? 
.br
?\fI-timeout millisecs\fR ??\fI-timeoutReturn callback\fR???
.br
\fIcommand\fR ?\fIargs ...\fR?

This command arranges for the Tcl/Tk \fIcommand\fR and its
\fIargs\fR to be evaluated in the remote Tcl/Tk interpreter,
using the RPC connection specified by \fIpeer\fR.  Before the
remote evaluation of \fIcommand\fR and \fIargs\fR, the global
variable rpcFile in the remote Tcl/Tk interpreter is bound
to the \fIpeer\fR whose request is being evaluated.  (Thus, in
your \fIcommand\fR, you can access the rpcFile variable to
figure out the RPC peer that originated the \fIcommand\fR.)

The \fI-events\fR flag to the dp_RPC command lets you specify
which events should be handled while waiting for the return value
of a RPC.  The \fI-events\fR parameter should be a list of the
tokens \fIX\fR, \fIrpc\fR, \fIfile\fR, \fItimer\fR, \fIidle\fR,
\fIall\fR, or \fInone\fR, where each token represents an event
type.  Presently, a \fIrpc\fR token is the same as a \fIfile\fR
token.  The \fInone\fR token is the default.  See
Tk_DoOneEvent(3) for more information on these event types.

The \fI-timeout\fR flag to the dp_RPC command lets you specify
an integer millisecond timeout value for the RPC, which by
default will return an error value if the timeout occurs.
Supplying a \fI-timeout\fR value of zero or less than zero means
that no timeout will be checked.  If you want to use timeouts,
you must also specify \fI-events\fR to be anything but none.

The \fI-timeoutReturn\fR callback, if specified, is evaluated
when a timeout occurs.  The callback is evaluated with the
\fIpeer\fR identifier appended.  If a timeout occurs and a
\fI-timeoutReturn\fR callback was specified, then the return
value of the callback is used as the return value of the
timed-out dp_RPC.  Otherwise the timed-out RPC returns an
error.
.TP
\fBdp_RDO \fIpeer\fR ?\fI-callback resultCallback\fR?
?\fI-onerror errorCallback\fR? \fIcommand\fR ?\fIargs ...\fR?

This command arranges for \fIcommand\fR and its \fIargs\fR to be
remotely evaluated in the Tcl/Tk interpreter whose connection is
specified by \fIpeer\fR argument.  Unlike the dp_RPC command,
the dp_RDO command does not wait for a return value to be
returned by the remote Tcl/Tk interpreter, but returns
immediately.  Before the remote evaluation, the global variable
rpcFile in the remote Tcl/Tk interpreter is set as
described above for the dp_RPC command.

You can use the \fIresultCallback\fR parameter of dp_RDO to
asynchronously retrieve the value of the remote evaluation.  If
specified, the \fIcallback\fR command appended with the return
value of the remote \fIcommand\fR evaluation is evaluated in the
local Tcl/Tk interpreter.

If you specify an \fIerrorCallback\fR and an error occurs during the
remote evaluation, \fIerrorCallback\fP will be evaluated with the error
message as a parameter.  The default value for \fIerrorCallback\fR is
tkerror.  If you wish to ignore errors generated during RDO
evaluation, specify the keyword "none" as \fIerrorCallback\fR.

.SH EXAMPLES

The following example creates an RPC server to return unique 
integer identifiers.  
On the host zonker (the server):
.DS
	dp_MakeRPCServer 4545

	dp_Host -
	dp_Host +128.32.149.*
	set myId 0
	proc GetId {} {global myId; incr myId; return $myId}
.DE

On host linus (the client, address 128.32.149.59):
.DS
	set server [dp_MakeRPCClient zonker 4545]
	dp_RPC $server GetId
.DE

On a host not on the 128.32.149 subnet:
.DS
	set server [dp_MakeRPCClient zonker 4545]
	error -> Connection refused: Host not authorized
.DE

.SH "SEE ALSO"
.PP
Tcl-DP(n) dp_connect(n) dp_filehandler(n) dpwish(1)

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/accept
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: Tcl-DP connection management
dp_connect, dp_shutdown, dp_accept \- Tcl-DP connection management
.sp
dp_send, dp_receive \- Stream transmission over TCP sockets
.sp
dp_packetSend, dp_packetReceive \- Message transmission using TCP sockets
.sp
dp_sendTo, dp_receiveFrom \- Message transmission using UDP sockets
.SH DESCRIPTION
.LP

This manual page describes the Tcl commands for managing basic network
connections provided by the Tcl-DP (Tcl Distributed Programming)
extension to Tcl/Tk.  These commands provide basically the same level
of service to Tcl/Tk as the UNIX C socket(2) related system
calls. The manual page is divided into two sections.  The first
section describes the commands needed to set up and shut down
connections.  The second section describes various commands for
transmitting data between machines.

All connection management commands return and take as arguments
identifiers called \fIsockId\fR's.  (A \fIsockId\fR represents a UNIX
file descriptor, which UNIX uses to represent both open
files and open sockets.  A socket is an endpoint of network
communication.)  \fISockId\fR's are identical to the identifiers
manipulated by the read, gets, puts, eof, and
close file management commands of Tcl.

.SH "CONNECTION SETUP AND TEAR DOWN"

Three basic commands are useful for connection setup and tear down:
dp_connect, dp_accept, and dp_shutdown.
Dp_connect is used to create either internet (INET) or unix domain
TCP/IP sockets, or INET based UDP/IP sockets.  If given the
\fI-server\fR flag, dp_connect creates a \fIlistening\fP socket
which other clients can connect to.  
When a remote machine attempts to connect to this listening
socket, it becomes readable.  Servers use the
dp_accept command to accept the connection, which creates a
new \fIsockId\fR connected to the client as a side effect while the
listening socket continues to listen for new connections.  Client
may close half of a duplex connection using the dp_shutdown
command.  When clients wish to terminate a connection, the tcl
close command should be used.

The rest of this sections describes the various options for
dp_connect, dp_accept, and dp_shutdown.

.TP
\fBdp_connect \fI-server port ?-linger? ?-reuseAddr?\fR

In this form, dp_connect creates a listening (server) socket.
This listening socket will listen for client connections on the
specified \fIport\fR number and will become readable whenever a client
process attempts a connection.  The creator of the listening socket may
then dp_accept the client connection.  (See the dp_accept
command below.  Also see the dp_filehandler and
dp_isready manual pages for testing when a socket becomes readable.)

The \fIport\fR argument, which can be a number or
service name (see services(5) for more information),
must specify an unused port number.  If
the \fIport\fR number argument is empty or 0, the dp_connect
command will automatically select an unused port number.

The -linger flag changes the behavior of the close function on this
socket.  By default, the socket will close and any unsent data in the
socket will be discarded.  If -linger is specified, close will return
immediately and the system will attempt to deliver any data remaining
in the socket.

The -reuseAddr, if specified, instructs the system to allow reuse of the
specified port number.

This form of the dp_connect command returns a
list of two values.  The first value is the \fIsockId\fR that
represents the created listening socket.  The second value is the
port number that the socket is listening to.

.TP
\fBdp_connect \fI-server\fR \fIpath\fR

This command creates up a UNIX domain listening socket.  This
command is identical to the one above except that a UNIX domain
socket is created using an address specified by \fIpath\fR.

.TP
\fBdp_connect \fIhost\fR \fIport\fR

This command creates a TCP protocol INET socket and connects it
to a remote server process.  The remote server process should be
running on the machine given by the \fIhost\fR network address
and should be listening for and accepting client connections on
the given \fIport\fR.
\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
This command returns a list of two
values: a \fIsockId\fR to represent the newly created socket and
the port number used for the connection.

.TP
\fBdp_connect \fIpath\fR

This command creates a TCP protocol UNIX domain socket and connects it
to the UNIX domain socket specified by path.  It is otherwise identical
to dp_connect \fIhost\fR \fIport\fR.

.TP
\fBdp_connect \fI-udp\fR \fI?port?\fR

In this form, dp_connect creates a UDP protocol INET socket
(a connectionless socket).  Since this socket is connectionless, only the
dp_sendTo and dp_receiveFrom commands described below may
be used with this socket to transmit and receive data.

\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
If the \fIport\fR argument is missing or 0, the system
will select an unused port number for you.  This command
returns a list containing a \fIsockId\fR (that represents the
created socket) and the \fIport\fR number (where the socket will
receive and transmit data using the UDP protocol).

.TP
\fBdp_accept \fIsockId\fR

The \fIsockId\fR argument must represent a listening (server)
socket (i.e., a \fIsockId\fR returned by the dp_connect
command that was called with the \fI-server\fR flag).  If this
listening socket is readable (i.e., a client process is
attempting to connect), the dp_accept command creates a new
socket that is connected to the client process.  If the listening
socket is not readable, th dp_accept command will block until
a client process attempts to connect to the listening socket.
The listening socket (represented by the \fIsockId\fR argument)
will remain a listening socket.  This command returns a new
\fIsockId\fR to represent the newly created socket that is
connected to the accepted client process, and the internet address
of the connecting party (eg, "128.32.149.117").  If the connection
occurs on a Unix domain socket, the second element of the
return value will be "0.0.0.0"

.TP 
\fBdp_shutdown \fIsockId\fR \fIcode\fR

Shutdown a socket for reading, writing, or both.  This command is
not the same as close, which you should use for truly
closing the socket.  The \fIsockId\fR argument must represent a
file descriptor that represents a socket, not an open file.

If \fIcode\fR is \fB"0"\fR, \fB"read"\fR or \fB"receives"\fR then
further reception of data from \fIsockId\fR will be disabled.

If \fIcode\fR is \fB"1"\fR, \fB"write"\fR or \fB"sends"\fR, then
further sending of data using \fIsockId\fR will be disabled (and
an EOF will be automatically sent down the socket).

If \fIcode\fR is \fB"2"\fR, \fB"all"\fR or \fB"both"\fR, then
further reception and sending of data on \fIsockId\fR will be
disabled.

As a side effect, the appropriate filehandlers previously
installed on the \fIsockId\fR will be deleted.  (See the
dp_filehandler man page.)

.SH "TRANSMITTING DATA"

Four pairs of commands are useful for sending and receiving data on
sockets.  The Tcl functions gets and puts can be used to
read and write string data to and from sockets.  These functions are
appropriate for communicating with text based programs (e.g., telnet).
Applications can detect closed connection when the Tcl command
eof \fIsockId\fR returns 1.

Dp_send and dp_receive are similar to gets and puts, but have the side
effect of automatically detecting closed connections.  When these
functions detect a closed connection, they remove any previously
instantiated file handlers for \fIsockId\fR and close the socket.
Applications can install callbacks associated with this "close-file"
event using the dp_atclose command.  Dp_send and dp_receive also
support non blocking input and are more efficient than gets and puts.

Dp_sendTo and dp_receiveFrom are used to send and receive data on
connectionless sockets (i.e., created using the dp_connect command
using the \fI-udp\fR option).  Dp_receiveFrom also supports non
blocking input and peeking (i.e., reading data from a socket without
advancing the file pointer).

Dp_packetSend and dp_packetReceive provide a message based protocol for
TCP sockets.  The extra protocol is necessary since TCP provides a
stream interface which does not preserve message boundaries.  The
protocol attaches an 8 byte binary header on the message containing a
magic number and the length of the message.  Due to the presence of
this header, applications should be careful about intermixing calls to
dp_packetSend and dp_packetReceive with other data transmission calls.

The options for each command are described below.

.TP
\fBdp_send\fR \fIsockId\fR \fImessage\fR ?\fInonewline\fP?

Writes the string \fImessage\fR to a connected socket.  Like the Tcl
puts command, dp_send normally outputs a newline character after
\fImessage\fR, but this feature may be suppressed by specifying the
\fInonewline\fP switch.

If insufficient buffer space exists to send \fImessage\fR, this command
will block until message is transmitted unless the socket is in
non-blocking mode (see dp_socketOption).  In this case, only part
of \fImessage\fR is transmitted.  The return value is the number of
characters sent.  The rest of the message can be sent when the socket
becomes writeable.  See the manual pages for the dp_filehandler and
dp_isready commands for testing when a socket becomes writeable.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a value of 0.

.TP
\fBdp_receive\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fP?

This command reads the immediately available data from \fIsockId\fR.
If \fInumBytes\fR is specified, at most this many bytes of the
immediately available data on will be returned.  If the socket is
non-blocking (see dp_socketOption), all data available on the socket
will be returned  -- should no data be available, dp_receive will
return a null string.

If the socket is in blocking mode (the default), dp_receive will block
until input is received.  If \fI-peek\fP is specified, the data present
on the socket is returned but not consumed, so that a subsequent
dp_receive call will see the same data.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a null string.

.TP
\fBdp_packetSend\fR \fIsockId\fR \fImessage\fR

Sends the string \fImessage\fR through the socket (\fIsockId\fR) to the
connected, remote process.  This command is similar to dp_sendTo,
except that it works with TCP sockets, so message delivery is
reliable.  It differs from dp_send in that message boundaries are
preserved.  When the remote socket calls dp_packetReceive, it will
never receive a partial \fImessage\fR.  The receiver \fImust\fP use
dp_packetReceive to read the message.

\fINotes:\fR
Message boundaries are preserved by attaching an 8 byte binary header
onto the message, half of which is a magic number indicating
a packet, and half of which indicates the size of the message.
Because this header represents binary data, care must be taken
if puts or dp_send calls are intermixed with dp_packetSend on the
same channel.

If dp_packetSend is used with non-blocking I/O mode and the send would
have blocked, dp_packetSend returns the number of bytes transmitted.
It is up to the caller to transmit the remaining characters in the
string using dp_send with the nonewline option (\fInot\fP
dp_packetSend) when the socket becomes writeable.  See dp_filehandler and
dp_isready manual pages for testing when a socket becomes writeable.)

.TP
\fBdp_packetReceive\fR \fIsockId\fR ?\fI-peek\fP?

Receives a single message from the connection (represented by the
\fIsockId\fR).  The connected, remote process which sent the message
must use the dp_packetSend command.  Dp_packetReceive differs from
dp_receive in that message boundaries are preserved.  If the entire
message is available, the return value is the message received.  If
only part of the packet is available when dp_packetReceive is called, a
zero length string is returned.  See the note in dp_packetSend above
about using dp_packetReceive and gets on the same channel.

If \fI-peek\fP is specified, the data present on the socket is returned
but not consumed, so that a subsequent dp_packetReceive calls will
see  the same data.

If no data is available at the socket and the socket is in non blocking
mode, a zero length string is returned.  Otherwise, this operation
blocks until at least some data (but possibly not the entire packet)
is received.

.TP
\fBdp_sendTo\fR \fIsockId\fR \fImessage\fR \fIaddr\fR

Sends the string \fImessage\fR to the process at the destination
address specified by the \fIaddr\fR handle.  The \fIaddr\fR handle must
be created using the dp_address command or taken from the return
value of the dp_receiveFrom command.  The \fIsockId\fR argument
must represent a connectionless socket (i.e., created using the
dp_connect command using the \fI-udp\fR option).  Dp_sendTo
uses \fIsockId\fR as the transmitting socket.

.TP
\fBdp_receiveFrom\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fR? ?\fI-noaddr\fR?

Receives a message that was sent from another process that used the
dp_sendTo command.  Normally, a list of two values is returned.  The
first value is the address (an \fIaddr\fR handle) of the sending
process, and the second element is the message received.  If the
\fI-noaddr\fR flag is specified, the address of the sending process is
ommitted.  If the socket is in non-blocking mode (see dp_socketOption)
and not readable, -1 will be returned.  Otherwise, this command will
block until a message arrives.  If \fI-peek\fR is specified, the
message is read from the socket but not removed from the queue.  If
\fInumBytes\fR is specified, at most this many bytes of the message is
returned.  Because of the way connectionless sockets work, the rest of
the datagram will be discarded from the queue, regardless of the value
of \fInumBytes\fR, unless \fI-peek\fR is specified.

The \fIsockId\fR argument must represent a connectionless socket
(i.e., created using the dp_connect command using the
\fI-udp\fR option).  The dp_receiveFrom command uses the
connectionless socket, \fIsockId\fR, as the reception socket.

.SH SEE ALSO
Tcl-DP, socket(2), accept(2), connect(2), listen(2), dp_address(n),
Tcl, dp_filehandler(n), dp_socketOption(n)

.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu),
.br
Steve Yen (syen@cs.berkeley.edu), and
.br
Lou Salkind (salkind@deshaw.com)
'\"@endhelp
'\"@help: dp/address
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: internet address record manipulation
dp_address \- internet address record manipulation
.TP
\fBdp_address \fIoption ?arg arg ...?\fR

The dp_address command provides access to an internal array of
internet address records.  These address records are appropriate
for use as arguments to the dp_sendTo and receiveFrom
network communication commands of Tcl-DP (Tcl Distributed
Programming).  The argument \fIoption\fP specifies the operation
to be performed.  The valid options are:
.RS
.TP
\fBdp_address create \fIhost port\fR

Creates an internal address record that represents the given
\fIhost\fR address and \fIport\fR internet information.
Returns an \fIaddr\fR handle that is appropriate for use as an
argument to the dp_sendTo and dp_receiveFrom commands and
as the \fIaddr\fP argument in the commands below.
\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
If specified by service name, it must be a UDP service.
.TP
\fBdp_address delete \fIaddr\fR

Delete the previously created internal address record that has
the given \fIaddr\fP handle.
.TP
\fBdp_address info \fIaddr\fR

Return a list of the form \fI{host port}\fP, which is the
internet information stored with the given \fIaddr\fR handle.
.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/after
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: to handle file descriptor conditions
dp_filehandler \- to handle file descriptor conditions
.sp
dp_isready \- Check if a socket has data pending
.sp
dp_update \- Process pending events and/or when-idle handlers
.sp
dp_after \- Execute a command after a certain amount of time has elapsed
.sp
dp_whenidle \- Execute a command when the system is idle
.sp
dp_waitvariable \- Wait for a variable to be modified
.SH SYNOPSIS
\fBdp_filehandler \fIsockId\fR ?\fImode\fR \fIcommand\fR?
.br
\fBdp_isready \fIsockId\fR
.br
\fBdp_update ?\fIidletasks\fR?
.br
\fBdp_after ms ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_whenidle command ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_waitvariable variable\fR
.SH DESCRIPTION
.LP

The dp_isready command checks whether \fIsockId\fP is readable or
writeable using a select(2) system call.  It returns a list of up two
boolean values (i.e., 1 or 0).  The first value specifies whether
\fIsockId\fP is readable, and the second value specifies whether
\fIsockId\fP is writeable.  For example, the tcl expression

.RS
if [lindex [dp_isready file3] 1] {MyOutput file3}
.RE

calls MyOutput if file3 is writeable.

The dp_update command is equivalent to the Tk "update" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "update" for an explanation of
it's usage.

The dp_after command is equivalent to the Tk "after" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "after" for an explanation of
it's usage.

The dp_whenidle command arranges for the specified Tcl/Tk \fIcommand\fR
to be evaluated whenever the system is about to go to sleep waiting for
an event to occur.

The dp_waitvariable command is equivalent to the Tk "tkwait variable"
command, except that it operates even if a connection to the X server
is not present.  See the Tk documentation on "tkwait" for an explanation of
it's usage.

The dp_filehander command allows one to specify a Tcl/Tk
\fIcommand\fR which will be evaluated whenever the file descriptor
represented by \fIsockId\fR is readable, writable, and/or has an
exceptional condition pending.  \fICommand\fR will be invoked with two
arguments appended: a single character indicating the \fImode\fR
('r', 'w', or 'e'), and the \fIsockId\fR.

A \fIsockId\fR is an identifier which represents a file descriptor.  It
is identical to the identifier manipulated by the Tcl-DP (Tcl
Distributed Programming) network connection management commands
(dp_connect, dp_shutdown, etc.).  \fISockId\fR's are also
manipulated by the read, eof, gets, puts, and close file management
commands of Tcl.

The \fImode\fR argument indicates the situations when the \fIcommand\fR
will be evaluated.  It may be any combination of the following values:

.RS
.TP
\fBr\fR
Eval \fIcommand\fR whenever there is data to be read from the
\fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBr\fR to indicate that data is readable on the file
descriptor, and the \fIsockId\fR, which represents the file descriptor
that is readable.  The \fIcommand\fR should read at least some data
from the \fIsockId\fR, or otherwise \fIcommand\fR will be called
continuously.

.TP
\fBw\fR
Eval \fIcommand\fR whenever data can be written to the \fIsockId\fR
without blocking.  The \fIcommand\fR is evaluated with two arguments
appended: \fBw\fR to indicate that the file descriptor is writable, and
the \fIsockId\fR, which represents the writable file descriptor.

.TP
\fBe\fR
Eval \fIcommand\fR whenever there is an exceptional condition pending
on the \fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBe\fR to indicate exception, and the \fIsockId\fR, which
represents the file descriptor with the exceptional condition.
.RE

If the \fImode\fR and \fIcommand\fR arguments are not specified, then
any previously specified \fIcommand\fR for the given \fIsockId\fR is
deleted.  Specifying a new \fIcommand\fR using the dp_filehandler
command will also delete any previously specified \fIcommand\fR for a
\fIsockId\fR.

.SH EXAMPLE

The following file handlers create a telnet like interface to the
sendmail process (the smtp port) running on the local host.  The command
"say" sends the string passed to it to sendmail.  The reply is
automatically printed on stdout by the get_remote procedure.

.DS
proc get_remote {mode fid} {
    # Exit if remote connection closed on us.
    if {[gets $fid input] == -1} {
	puts stdout "Connection closed by foreign host."
	exit
    }
    puts stdout $input
}

proc say {args} {
    global remote
    puts $remote $args;
}

set remote [lindex [dp_connect localhost smtp] 0]
dp_filehandler $remote r get_remote
.DE

.SH SEE ALSO
Tcl-DP, select(2)
.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu)
.br
and Steve Yen (syen@cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/atclose
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..


.SH NAME
'\"@brief: arrange for commands to be evaluated when a file or socket
dp_atclose \- arrange for commands to be evaluated when a file or socket
is closed
.TP
\fBdp_atclose \fIsockId\fR option ?\fIcmd\fR?

The dp_atclose command manages the \fIdp_atclose list\fP, a list of
callback routines that are evaluated just before \fIsockId\fP is actually
closed.  This is useful for networking applications, where filehandlers
associated with a socket must be deleted when a socket is closed.
The argument \fIoption\fP specifies the operation to be performed
on the dp_atclose list.  The valid options are:

.RS
.TP
\fBdp_atclose \fIsockId\fR list

Returns the current dp_atclose list associated with \fIsockId\fR.

.TP
\fBdp_atclose \fIsockId\fR set \fInewList\fP

Sets the dp_atclose list associated with \fIsockId\fR to \fInewList\fP.

.TP
\fBdp_atclose \fIsockId\fR append \fIcallback\fP

Append \fIcallback\fP to the end of the dp_atclose list associated with
\fIsockId\fR.

.TP
\fBdp_atclose \fIsockId\fR appendUnique \fIcallback\fP

Appends \fIcallback\fP to the end of the dp_atclose list associated with
\fIsockId\fR if it's not already a member of the list.

.TP
\fBdp_atclose \fIsockId\fR prepend \fIcallback\fP

Inserts \fIcallback\fP at the front of the dp_atclose list associated
with \fIsockId\fR.

.TP
\fBdp_atclose \fIsockId\fR insert \fIbeforeCallback\fP \fIcallback\fP

Inserts \fIcallback\fP before \fIbeforeCallback\fP in the dp_atclose
list associated with \fIsockId\fR.  If \fIbeforeCallback\fP is not in
the dp_atclose list associated with \fIsockId\fR, no action is taken.

.TP
\fBdp_atclose \fIsockId\fR delete \fIcallback\fP

Delete \fIcallback\fP from the dp_atclose list associated with
\fIsockId\fR. If \fIcallback\fP is not in the dp_atclose list associated
with \fIsockId\fR, no action is taken.

.TP
\fBdp_atclose \fIsockId\fR clear

Clears the dp_atclose list associated with \fIsockId\fR.

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/atexit
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..


.SH NAME
'\"@brief: arrange for commands to be evaluated when the process is exited.
dp_atexit \- arrange for commands to be evaluated when the process is exited.
.TP
\fBdp_atexit option ?\fIcmd\fR?

The dp_atexit command manages the \fIdp_atexit list\fP, a list of
callback routines that are evaluated just before the tcl+tk application
is exited.  This is useful for applications where clean up actions must be
performed before a process can safely exit.
The argument \fIoption\fP specifies the operation to be performed
on the dp_atexit list.  The valid options are:

.RS
.TP
\fBdp_atexit list

Returns the current dp_atexit list.

.TP
\fBdp_atexit set \fInewList\fP

Sets the dp_atexit list \fInewList\fP.

.TP
\fBdp_atexit append \fIcallback\fP

Append \fIcallback\fP to the end of the dp_atexit list.

.TP
\fBdp_atexit appendUnique \fIcallback\fP

Appends \fIcallback\fP to the end of the dp_atexit list if
it's not already a member of the list.

.TP
\fBdp_atexit prepend \fIcallback\fP

Inserts \fIcallback\fP at the front of the dp_atexit list.

.TP
\fBdp_atexit insert \fIbeforeCallback\fP \fIcallback\fP

Inserts \fIcallback\fP before \fIbeforeCallback\fP in the dp_atexit
list. If \fIbeforeCallback\fP is not in
the dp_atexit list, no action is taken.

.TP
\fBdp_atexit delete \fIcallback\fP

Delete \fIcallback\fP from the dp_atexit list.
If \fIcallback\fP is not in the dp_atexit list, no action is taken.

.TP
\fBdp_atexit clear

Clears the dp_atexit list.

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/connect
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: Tcl-DP connection management
dp_connect, dp_shutdown, dp_accept \- Tcl-DP connection management
.sp
dp_send, dp_receive \- Stream transmission over TCP sockets
.sp
dp_packetSend, dp_packetReceive \- Message transmission using TCP sockets
.sp
dp_sendTo, dp_receiveFrom \- Message transmission using UDP sockets
.SH DESCRIPTION
.LP

This manual page describes the Tcl commands for managing basic network
connections provided by the Tcl-DP (Tcl Distributed Programming)
extension to Tcl/Tk.  These commands provide basically the same level
of service to Tcl/Tk as the UNIX C socket(2) related system
calls. The manual page is divided into two sections.  The first
section describes the commands needed to set up and shut down
connections.  The second section describes various commands for
transmitting data between machines.

All connection management commands return and take as arguments
identifiers called \fIsockId\fR's.  (A \fIsockId\fR represents a UNIX
file descriptor, which UNIX uses to represent both open
files and open sockets.  A socket is an endpoint of network
communication.)  \fISockId\fR's are identical to the identifiers
manipulated by the read, gets, puts, eof, and
close file management commands of Tcl.

.SH "CONNECTION SETUP AND TEAR DOWN"

Three basic commands are useful for connection setup and tear down:
dp_connect, dp_accept, and dp_shutdown.
Dp_connect is used to create either internet (INET) or unix domain
TCP/IP sockets, or INET based UDP/IP sockets.  If given the
\fI-server\fR flag, dp_connect creates a \fIlistening\fP socket
which other clients can connect to.  
When a remote machine attempts to connect to this listening
socket, it becomes readable.  Servers use the
dp_accept command to accept the connection, which creates a
new \fIsockId\fR connected to the client as a side effect while the
listening socket continues to listen for new connections.  Client
may close half of a duplex connection using the dp_shutdown
command.  When clients wish to terminate a connection, the tcl
close command should be used.

The rest of this sections describes the various options for
dp_connect, dp_accept, and dp_shutdown.

.TP
\fBdp_connect \fI-server port ?-linger? ?-reuseAddr?\fR

In this form, dp_connect creates a listening (server) socket.
This listening socket will listen for client connections on the
specified \fIport\fR number and will become readable whenever a client
process attempts a connection.  The creator of the listening socket may
then dp_accept the client connection.  (See the dp_accept
command below.  Also see the dp_filehandler and
dp_isready manual pages for testing when a socket becomes readable.)

The \fIport\fR argument, which can be a number or
service name (see services(5) for more information),
must specify an unused port number.  If
the \fIport\fR number argument is empty or 0, the dp_connect
command will automatically select an unused port number.

The -linger flag changes the behavior of the close function on this
socket.  By default, the socket will close and any unsent data in the
socket will be discarded.  If -linger is specified, close will return
immediately and the system will attempt to deliver any data remaining
in the socket.

The -reuseAddr, if specified, instructs the system to allow reuse of the
specified port number.

This form of the dp_connect command returns a
list of two values.  The first value is the \fIsockId\fR that
represents the created listening socket.  The second value is the
port number that the socket is listening to.

.TP
\fBdp_connect \fI-server\fR \fIpath\fR

This command creates up a UNIX domain listening socket.  This
command is identical to the one above except that a UNIX domain
socket is created using an address specified by \fIpath\fR.

.TP
\fBdp_connect \fIhost\fR \fIport\fR

This command creates a TCP protocol INET socket and connects it
to a remote server process.  The remote server process should be
running on the machine given by the \fIhost\fR network address
and should be listening for and accepting client connections on
the given \fIport\fR.
\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
This command returns a list of two
values: a \fIsockId\fR to represent the newly created socket and
the port number used for the connection.

.TP
\fBdp_connect \fIpath\fR

This command creates a TCP protocol UNIX domain socket and connects it
to the UNIX domain socket specified by path.  It is otherwise identical
to dp_connect \fIhost\fR \fIport\fR.

.TP
\fBdp_connect \fI-udp\fR \fI?port?\fR

In this form, dp_connect creates a UDP protocol INET socket
(a connectionless socket).  Since this socket is connectionless, only the
dp_sendTo and dp_receiveFrom commands described below may
be used with this socket to transmit and receive data.

\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
If the \fIport\fR argument is missing or 0, the system
will select an unused port number for you.  This command
returns a list containing a \fIsockId\fR (that represents the
created socket) and the \fIport\fR number (where the socket will
receive and transmit data using the UDP protocol).

.TP
\fBdp_accept \fIsockId\fR

The \fIsockId\fR argument must represent a listening (server)
socket (i.e., a \fIsockId\fR returned by the dp_connect
command that was called with the \fI-server\fR flag).  If this
listening socket is readable (i.e., a client process is
attempting to connect), the dp_accept command creates a new
socket that is connected to the client process.  If the listening
socket is not readable, th dp_accept command will block until
a client process attempts to connect to the listening socket.
The listening socket (represented by the \fIsockId\fR argument)
will remain a listening socket.  This command returns a new
\fIsockId\fR to represent the newly created socket that is
connected to the accepted client process, and the internet address
of the connecting party (eg, "128.32.149.117").  If the connection
occurs on a Unix domain socket, the second element of the
return value will be "0.0.0.0"

.TP 
\fBdp_shutdown \fIsockId\fR \fIcode\fR

Shutdown a socket for reading, writing, or both.  This command is
not the same as close, which you should use for truly
closing the socket.  The \fIsockId\fR argument must represent a
file descriptor that represents a socket, not an open file.

If \fIcode\fR is \fB"0"\fR, \fB"read"\fR or \fB"receives"\fR then
further reception of data from \fIsockId\fR will be disabled.

If \fIcode\fR is \fB"1"\fR, \fB"write"\fR or \fB"sends"\fR, then
further sending of data using \fIsockId\fR will be disabled (and
an EOF will be automatically sent down the socket).

If \fIcode\fR is \fB"2"\fR, \fB"all"\fR or \fB"both"\fR, then
further reception and sending of data on \fIsockId\fR will be
disabled.

As a side effect, the appropriate filehandlers previously
installed on the \fIsockId\fR will be deleted.  (See the
dp_filehandler man page.)

.SH "TRANSMITTING DATA"

Four pairs of commands are useful for sending and receiving data on
sockets.  The Tcl functions gets and puts can be used to
read and write string data to and from sockets.  These functions are
appropriate for communicating with text based programs (e.g., telnet).
Applications can detect closed connection when the Tcl command
eof \fIsockId\fR returns 1.

Dp_send and dp_receive are similar to gets and puts, but have the side
effect of automatically detecting closed connections.  When these
functions detect a closed connection, they remove any previously
instantiated file handlers for \fIsockId\fR and close the socket.
Applications can install callbacks associated with this "close-file"
event using the dp_atclose command.  Dp_send and dp_receive also
support non blocking input and are more efficient than gets and puts.

Dp_sendTo and dp_receiveFrom are used to send and receive data on
connectionless sockets (i.e., created using the dp_connect command
using the \fI-udp\fR option).  Dp_receiveFrom also supports non
blocking input and peeking (i.e., reading data from a socket without
advancing the file pointer).

Dp_packetSend and dp_packetReceive provide a message based protocol for
TCP sockets.  The extra protocol is necessary since TCP provides a
stream interface which does not preserve message boundaries.  The
protocol attaches an 8 byte binary header on the message containing a
magic number and the length of the message.  Due to the presence of
this header, applications should be careful about intermixing calls to
dp_packetSend and dp_packetReceive with other data transmission calls.

The options for each command are described below.

.TP
\fBdp_send\fR \fIsockId\fR \fImessage\fR ?\fInonewline\fP?

Writes the string \fImessage\fR to a connected socket.  Like the Tcl
puts command, dp_send normally outputs a newline character after
\fImessage\fR, but this feature may be suppressed by specifying the
\fInonewline\fP switch.

If insufficient buffer space exists to send \fImessage\fR, this command
will block until message is transmitted unless the socket is in
non-blocking mode (see dp_socketOption).  In this case, only part
of \fImessage\fR is transmitted.  The return value is the number of
characters sent.  The rest of the message can be sent when the socket
becomes writeable.  See the manual pages for the dp_filehandler and
dp_isready commands for testing when a socket becomes writeable.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a value of 0.

.TP
\fBdp_receive\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fP?

This command reads the immediately available data from \fIsockId\fR.
If \fInumBytes\fR is specified, at most this many bytes of the
immediately available data on will be returned.  If the socket is
non-blocking (see dp_socketOption), all data available on the socket
will be returned  -- should no data be available, dp_receive will
return a null string.

If the socket is in blocking mode (the default), dp_receive will block
until input is received.  If \fI-peek\fP is specified, the data present
on the socket is returned but not consumed, so that a subsequent
dp_receive call will see the same data.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a null string.

.TP
\fBdp_packetSend\fR \fIsockId\fR \fImessage\fR

Sends the string \fImessage\fR through the socket (\fIsockId\fR) to the
connected, remote process.  This command is similar to dp_sendTo,
except that it works with TCP sockets, so message delivery is
reliable.  It differs from dp_send in that message boundaries are
preserved.  When the remote socket calls dp_packetReceive, it will
never receive a partial \fImessage\fR.  The receiver \fImust\fP use
dp_packetReceive to read the message.

\fINotes:\fR
Message boundaries are preserved by attaching an 8 byte binary header
onto the message, half of which is a magic number indicating
a packet, and half of which indicates the size of the message.
Because this header represents binary data, care must be taken
if puts or dp_send calls are intermixed with dp_packetSend on the
same channel.

If dp_packetSend is used with non-blocking I/O mode and the send would
have blocked, dp_packetSend returns the number of bytes transmitted.
It is up to the caller to transmit the remaining characters in the
string using dp_send with the nonewline option (\fInot\fP
dp_packetSend) when the socket becomes writeable.  See dp_filehandler and
dp_isready manual pages for testing when a socket becomes writeable.)

.TP
\fBdp_packetReceive\fR \fIsockId\fR ?\fI-peek\fP?

Receives a single message from the connection (represented by the
\fIsockId\fR).  The connected, remote process which sent the message
must use the dp_packetSend command.  Dp_packetReceive differs from
dp_receive in that message boundaries are preserved.  If the entire
message is available, the return value is the message received.  If
only part of the packet is available when dp_packetReceive is called, a
zero length string is returned.  See the note in dp_packetSend above
about using dp_packetReceive and gets on the same channel.

If \fI-peek\fP is specified, the data present on the socket is returned
but not consumed, so that a subsequent dp_packetReceive calls will
see  the same data.

If no data is available at the socket and the socket is in non blocking
mode, a zero length string is returned.  Otherwise, this operation
blocks until at least some data (but possibly not the entire packet)
is received.

.TP
\fBdp_sendTo\fR \fIsockId\fR \fImessage\fR \fIaddr\fR

Sends the string \fImessage\fR to the process at the destination
address specified by the \fIaddr\fR handle.  The \fIaddr\fR handle must
be created using the dp_address command or taken from the return
value of the dp_receiveFrom command.  The \fIsockId\fR argument
must represent a connectionless socket (i.e., created using the
dp_connect command using the \fI-udp\fR option).  Dp_sendTo
uses \fIsockId\fR as the transmitting socket.

.TP
\fBdp_receiveFrom\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fR? ?\fI-noaddr\fR?

Receives a message that was sent from another process that used the
dp_sendTo command.  Normally, a list of two values is returned.  The
first value is the address (an \fIaddr\fR handle) of the sending
process, and the second element is the message received.  If the
\fI-noaddr\fR flag is specified, the address of the sending process is
ommitted.  If the socket is in non-blocking mode (see dp_socketOption)
and not readable, -1 will be returned.  Otherwise, this command will
block until a message arrives.  If \fI-peek\fR is specified, the
message is read from the socket but not removed from the queue.  If
\fInumBytes\fR is specified, at most this many bytes of the message is
returned.  Because of the way connectionless sockets work, the rest of
the datagram will be discarded from the queue, regardless of the value
of \fInumBytes\fR, unless \fI-peek\fR is specified.

The \fIsockId\fR argument must represent a connectionless socket
(i.e., created using the dp_connect command using the
\fI-udp\fR option).  The dp_receiveFrom command uses the
connectionless socket, \fIsockId\fR, as the reception socket.

.SH SEE ALSO
Tcl-DP, socket(2), accept(2), connect(2), listen(2), dp_address(n),
Tcl, dp_filehandler(n), dp_socketOption(n)

.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu),
.br
Steve Yen (syen@cs.berkeley.edu), and
.br
Lou Salkind (salkind@deshaw.com)
'\"@endhelp
'\"@help: dp/distribObj
.SH NAME
'\"@brief: dp_DistributeObject, dp_UndistributeObject dp_setf, dp_getf
dp_DistributeObject, dp_UndistributeObject dp_setf, dp_getf
.sp
dp_SetTrigger, dp_AppendTrigger, dp_AppendTriggerUnique, dp_ReleaseTrigger,
dp_ClearTrigger, dp_GetTriggers
.sp
  \- Tcl-DP support for replicated, distributed objects 
.LP

The distributed object commands described here are part of the
Tcl-DP (Tcl Distributed Programming) extension to Tcl/Tk.  These
Tcl/Tk commands are used to manage objects which are distributed
among several Tcl/Tk processes.  The Tcl/Tk processes must be
linked by Tcl-DP remote procedure call (RPC) connections.

An object in Tcl-DP is a procedure, just like a widget instance
of Tk is a procedure.  A procedural object must take as its first
argument a method selector.  In other words, if \fIobject\fR is
the name of a procedural object:

\fIobject\fB \fImethod\fR ?\fIargs ...\fR?

Objects can have slots.  Objects which are to be distributed
using Tcl-DP must handle three methods, \fBconfigure\fR and
\fBslot-value\fR, which access the slots of the object, and
\fBdestroy\fR, which destroys the object.

The configure method must handle three different forms of
arguments, which makes it very much like the configure
option for Tk widgets:

\fIobject\fB \fBconfigure\fR ?\fI-slot\fR?
.br
\fIobject\fB \fBconfigure\fR ?\fI-slot value ...\fR?
.br
\fIobject\fB \fBconfigure\fR

When the Tcl/Tk expression "\fIobject\fB configure\fR" is
evaluated, the return value is a list of triplets of the form
\fI{-slot default current}\fR, one triplet for each slot of the
object.  The \fIslot\fR gives the name of the slot, \fIdefault\fR
gives the default value of the slot when the object is created,
and \fIcurrent\fR gives the current value of the slot within the
object.  Furthermore, when the command "\fIobject\fB configure\fI
-slot\fR" is evaluated, the return value should be the triplet
associated with the given \fIslot\fR.  The command "\fIobject\fB
configure\fI -slot value\fR" will set the value of the \fIslot\fP
of the \fIobject\fP to the given \fIvalue\fP.

The slot-value method must take one argument:

\fIobject\fB \fBslot-value\fR ?\fIslot\fR?

The slot-value method returns the current value of a
\fIslot\fR of an \fIobject\fR.

The destroy method takes no arguments:

\fIobject\fB \fBdestroy\fR

The destroy method frees up all memory associated with the
\fIobject\fR, and deletes the command "\fIobject\fP" from the
interpreter.

Objects are usually defined in C for speed, with a Tcl access
interface, just like Tk widgets are defined in C but have Tcl
access interfaces.  Objects can also be defined using Tcl/Tk
scripting only, as Tcl-DP supplies several utility procedures for
creating objects with Tcl/Tk scripting only.  (See dp_object(n).)

Each object to be distributed must also support a creator command
or \fImakeCmd\fR.  This is the command used to create an object.
It should be of the form "\fImakeCmd objName ?-slot1 value1
-slot2 value2 ...?\fR".  This command should create a procedural
object called \fIobjName\fR and initialize the slots the of new
object.

For example, suppose a point object named \fIp1\fR has two slots,
\fIx\fR and \fIy\fR, and the default value for each slot is
\fI0\fR.  Suppose the current value of \fIx\fR is \fI1\fR and the
current value of \fIy\fR is \fI2\fR.  If the \fImakeCmd\fR is
called \fIpoint\fR, then to create such an object, evaluate the
command "\fIpoint p1 -x 1 -y 2\fR".  Then the command "\fIp1
config\fR" will have the return value of \fI{{-x 0 1} {-y 0
2}}\fR, the command "\fIp1 config -x\fR" will have the return
value of \fI-x 0 1\fR, and the command "\fIp1 slot-value x\fR"
will have the return value of \fI1\fR.

Several assumptions were made in the development of the
distributed object system.  First, the graph of RPC connected
processes is assumed to be acyclic.  If this assumption is
violated, deadlock could result.  Second, each slot of an object
has an owner process.  Although the value of a slot can be set in
any process, it is most efficient to do so in the owner process.

.SH COMMANDS
.TP
\fBdp_setf \fIobject slot value\fR

The dp_setf command is used to set the \fIvalue\fR of a
\fIslot\fR in a distributed object.  The side effect of this
command includes replicating the new \fIvalue\fR of the
\fIslot\fR to all processes where the object is distributed.

.TP
\fBdp_getf \fIobject slot\fR

The dp_getf command is used to get the current value of a
\fIslot\fR in a distributed object.  It is the counterpart of
the dp_setf command.

.TP
\fBdp_DistributeObject \fIobject processes makeCmd\fR

Dp_DistributeObject arranges for \fIobject\fR to be
distributed to the given \fIprocesses\fR.  The argument
\fIobject\fR should be the name of the object to be distributed,
\fIprocesses\fR should be a list of \fIsockId\fR's (which we can
use with dp_RPC) which represent connections to remote
processes, and \fImakeCmd\fR should be the creator command for
the object, as described above.

.TP
\fBdp_UndistributeObject \fIobject processes\fR

Dp_UndistributeObject arranges for the slots of \fIobject\fR
to not be shared anymore with remote \fIprocesses\fR.  The
\fIprocesses\fR (which should be a list of \fIsockId\fR's which
represent dp_RPC connections to remote processes) supplied
should be the same as or a subset of the \fIprocesses\fR
originally passed into dp_DistributeObject.  The \fIobject\fR
still exists in all processes, but its slots are no longer
shared.

.TP
\fBdp_SetTrigger \fIwhen object slot trigger-list\fR

Dp_SetTrigger is used to cause each Tcl command in \fItrigger-list\fR
to be evaluated whenever a call to \fBdp_setf\fR causes the \fIslot\fR
of \fIobject\fR to change value.  If \fIwhen\fP is "before," each
command in \fItrigger-list\fP will be evaluated before the slot is
updated.  If \fIwhen\fP is "after," each command in \fItrigger-list\fP will
be evaluated after the slot is set.  The following commands can also be used
to manipulate this \fItrigger-list\fP.

.TP
\fBdp_GetTriggers \fIwhen object slot cmd\fR

Dp_GetTriggers returns the trigger list associated with
\fIslot\fP of \fIobject\fP.

.TP
\fBdp_AppendTrigger \fIwhen object slot cmd\fR

Dp_AppendTrigger is used to add \fIcmd\fP to the trigger list
associated with \fIslot\fP of \fIobject\fP.

.TP
\fBdp_AppendTriggerUnique \fIwhen object slot cmd\fR

Dp_AppendTriggerUnique is used to add \fIcmd\fP to the trigger list
associated with \fIslot\fP of \fIobject\fP only if \fIcmd\fP is not
already part of the trigger list.

.TP
\fBdp_ReleaseTrigger \fIwhen object slot cmd\fR

Dp_ReleaseTrigger deletes \fIcmd\fP from the trigger list
associated with \fIslot\fP of \fIobject\fP.

.TP
\fBdp_ClearTrigger \fIwhen object slot\fR

Dp_ClearTrigger clears the trigger list associated with
\fIslot\fP of \fIobject\fP.
.SH "SEE ALSO"
.PP
dp_connect, dp_rpc, Tcl-DP, object
.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/CancelRPfilehandler
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: to handle file descriptor conditions
dp_filehandler \- to handle file descriptor conditions
.sp
dp_isready \- Check if a socket has data pending
.sp
dp_update \- Process pending events and/or when-idle handlers
.sp
dp_after \- Execute a command after a certain amount of time has elapsed
.sp
dp_whenidle \- Execute a command when the system is idle
.sp
dp_waitvariable \- Wait for a variable to be modified
.SH SYNOPSIS
\fBdp_filehandler \fIsockId\fR ?\fImode\fR \fIcommand\fR?
.br
\fBdp_isready \fIsockId\fR
.br
\fBdp_update ?\fIidletasks\fR?
.br
\fBdp_after ms ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_whenidle command ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_waitvariable variable\fR
.SH DESCRIPTION
.LP

The dp_isready command checks whether \fIsockId\fP is readable or
writeable using a select(2) system call.  It returns a list of up two
boolean values (i.e., 1 or 0).  The first value specifies whether
\fIsockId\fP is readable, and the second value specifies whether
\fIsockId\fP is writeable.  For example, the tcl expression

.RS
if [lindex [dp_isready file3] 1] {MyOutput file3}
.RE

calls MyOutput if file3 is writeable.

The dp_update command is equivalent to the Tk "update" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "update" for an explanation of
it's usage.

The dp_after command is equivalent to the Tk "after" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "after" for an explanation of
it's usage.

The dp_whenidle command arranges for the specified Tcl/Tk \fIcommand\fR
to be evaluated whenever the system is about to go to sleep waiting for
an event to occur.

The dp_waitvariable command is equivalent to the Tk "tkwait variable"
command, except that it operates even if a connection to the X server
is not present.  See the Tk documentation on "tkwait" for an explanation of
it's usage.

The dp_filehander command allows one to specify a Tcl/Tk
\fIcommand\fR which will be evaluated whenever the file descriptor
represented by \fIsockId\fR is readable, writable, and/or has an
exceptional condition pending.  \fICommand\fR will be invoked with two
arguments appended: a single character indicating the \fImode\fR
('r', 'w', or 'e'), and the \fIsockId\fR.

A \fIsockId\fR is an identifier which represents a file descriptor.  It
is identical to the identifier manipulated by the Tcl-DP (Tcl
Distributed Programming) network connection management commands
(dp_connect, dp_shutdown, etc.).  \fISockId\fR's are also
manipulated by the read, eof, gets, puts, and close file management
commands of Tcl.

The \fImode\fR argument indicates the situations when the \fIcommand\fR
will be evaluated.  It may be any combination of the following values:

.RS
.TP
\fBr\fR
Eval \fIcommand\fR whenever there is data to be read from the
\fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBr\fR to indicate that data is readable on the file
descriptor, and the \fIsockId\fR, which represents the file descriptor
that is readable.  The \fIcommand\fR should read at least some data
from the \fIsockId\fR, or otherwise \fIcommand\fR will be called
continuously.

.TP
\fBw\fR
Eval \fIcommand\fR whenever data can be written to the \fIsockId\fR
without blocking.  The \fIcommand\fR is evaluated with two arguments
appended: \fBw\fR to indicate that the file descriptor is writable, and
the \fIsockId\fR, which represents the writable file descriptor.

.TP
\fBe\fR
Eval \fIcommand\fR whenever there is an exceptional condition pending
on the \fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBe\fR to indicate exception, and the \fIsockId\fR, which
represents the file descriptor with the exceptional condition.
.RE

If the \fImode\fR and \fIcommand\fR arguments are not specified, then
any previously specified \fIcommand\fR for the given \fIsockId\fR is
deleted.  Specifying a new \fIcommand\fR using the dp_filehandler
command will also delete any previously specified \fIcommand\fR for a
\fIsockId\fR.

.SH EXAMPLE

The following file handlers create a telnet like interface to the
sendmail process (the smtp port) running on the local host.  The command
"say" sends the string passed to it to sendmail.  The reply is
automatically printed on stdout by the get_remote procedure.

.DS
proc get_remote {mode fid} {
    # Exit if remote connection closed on us.
    if {[gets $fid input] == -1} {
	puts stdout "Connection closed by foreign host."
	exit
    }
    puts stdout $input
}

proc say {args} {
    global remote
    puts $remote $args;
}

set remote [lindex [dp_connect localhost smtp] 0]
dp_filehandler $remote r get_remote
.DE

.SH SEE ALSO
Tcl-DP, select(2)
.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu)
.br
and Steve Yen (syen@cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/isready
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: to handle file descriptor conditions
dp_filehandler \- to handle file descriptor conditions
.sp
dp_isready \- Check if a socket has data pending
.sp
dp_update \- Process pending events and/or when-idle handlers
.sp
dp_after \- Execute a command after a certain amount of time has elapsed
.sp
dp_whenidle \- Execute a command when the system is idle
.sp
dp_waitvariable \- Wait for a variable to be modified
.SH SYNOPSIS
\fBdp_filehandler \fIsockId\fR ?\fImode\fR \fIcommand\fR?
.br
\fBdp_isready \fIsockId\fR
.br
\fBdp_update ?\fIidletasks\fR?
.br
\fBdp_after ms ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_whenidle command ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_waitvariable variable\fR
.SH DESCRIPTION
.LP

The dp_isready command checks whether \fIsockId\fP is readable or
writeable using a select(2) system call.  It returns a list of up two
boolean values (i.e., 1 or 0).  The first value specifies whether
\fIsockId\fP is readable, and the second value specifies whether
\fIsockId\fP is writeable.  For example, the tcl expression

.RS
if [lindex [dp_isready file3] 1] {MyOutput file3}
.RE

calls MyOutput if file3 is writeable.

The dp_update command is equivalent to the Tk "update" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "update" for an explanation of
it's usage.

The dp_after command is equivalent to the Tk "after" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "after" for an explanation of
it's usage.

The dp_whenidle command arranges for the specified Tcl/Tk \fIcommand\fR
to be evaluated whenever the system is about to go to sleep waiting for
an event to occur.

The dp_waitvariable command is equivalent to the Tk "tkwait variable"
command, except that it operates even if a connection to the X server
is not present.  See the Tk documentation on "tkwait" for an explanation of
it's usage.

The dp_filehander command allows one to specify a Tcl/Tk
\fIcommand\fR which will be evaluated whenever the file descriptor
represented by \fIsockId\fR is readable, writable, and/or has an
exceptional condition pending.  \fICommand\fR will be invoked with two
arguments appended: a single character indicating the \fImode\fR
('r', 'w', or 'e'), and the \fIsockId\fR.

A \fIsockId\fR is an identifier which represents a file descriptor.  It
is identical to the identifier manipulated by the Tcl-DP (Tcl
Distributed Programming) network connection management commands
(dp_connect, dp_shutdown, etc.).  \fISockId\fR's are also
manipulated by the read, eof, gets, puts, and close file management
commands of Tcl.

The \fImode\fR argument indicates the situations when the \fIcommand\fR
will be evaluated.  It may be any combination of the following values:

.RS
.TP
\fBr\fR
Eval \fIcommand\fR whenever there is data to be read from the
\fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBr\fR to indicate that data is readable on the file
descriptor, and the \fIsockId\fR, which represents the file descriptor
that is readable.  The \fIcommand\fR should read at least some data
from the \fIsockId\fR, or otherwise \fIcommand\fR will be called
continuously.

.TP
\fBw\fR
Eval \fIcommand\fR whenever data can be written to the \fIsockId\fR
without blocking.  The \fIcommand\fR is evaluated with two arguments
appended: \fBw\fR to indicate that the file descriptor is writable, and
the \fIsockId\fR, which represents the writable file descriptor.

.TP
\fBe\fR
Eval \fIcommand\fR whenever there is an exceptional condition pending
on the \fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBe\fR to indicate exception, and the \fIsockId\fR, which
represents the file descriptor with the exceptional condition.
.RE

If the \fImode\fR and \fIcommand\fR arguments are not specified, then
any previously specified \fIcommand\fR for the given \fIsockId\fR is
deleted.  Specifying a new \fIcommand\fR using the dp_filehandler
command will also delete any previously specified \fIcommand\fR for a
\fIsockId\fR.

.SH EXAMPLE

The following file handlers create a telnet like interface to the
sendmail process (the smtp port) running on the local host.  The command
"say" sends the string passed to it to sendmail.  The reply is
automatically printed on stdout by the get_remote procedure.

.DS
proc get_remote {mode fid} {
    # Exit if remote connection closed on us.
    if {[gets $fid input] == -1} {
	puts stdout "Connection closed by foreign host."
	exit
    }
    puts stdout $input
}

proc say {args} {
    global remote
    puts $remote $args;
}

set remote [lindex [dp_connect localhost smtp] 0]
dp_filehandler $remote r get_remote
.DE

.SH SEE ALSO
Tcl-DP, select(2)
.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu)
.br
and Steve Yen (syen@cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/object
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: .LP
.LP 
dp_objectCreateProc, dp_objectExists, dp_objectFree, dp_objectConfigure
.dp
dp_objectSlot, dp_objectSlotSet, dp_objectSlotAppend, dp_objectSlots 
.dp
  \- dp_object manipulation using Tcl scripting
.SH SYNOPSIS
\fBdp_objectCreateProc\fR \fIclass\fR \fIobject\fR
.br
\fBdp_objectExists\fR \fIobject\fR
.br
\fBdp_objectSlots\fR \fIobject\fR
.br
\fBdp_objectFree\fR \fIobject\fR
.br
\fBdp_objectSlot\fR \fIobject\fR \fIslot\fR
.br
\fBdp_objectSlotSet\fR \fIobject\fR \fIslot\fR \fIvalue\fR
.br
\fBdp_objectSlotAppend\fR \fIobject\fR \fIslot\fR \fIvalue\fR
.br
\fBdp_objectConfigure\fR \fIclass\fR \fIobject\fR \fIoptions\fR
.SH DESCRIPTION
.LP

A procedural object is a Tcl procedure that represents an object.
The utility commands described in this man page allow one to
easily implement procedural objects using Tcl scripting only.

A procedural object is usually implemented in C (e.g., as a C
struct) for speed but has a Tcl access interface.  For example,
Tk implements its widget classes in C but provides Tcl interfaces
to access those widgets.  Tk uses a procedure to represent each
widget instance.

The first argument of one of these procedural objects is a method
selector.  In other words, if \fIobject\fR is the name of a
procedural object:

\fIobject\fB \fImethod\fR ?\fIargs ...\fR?

If you use the utility procedures described in this man page to
implement a procedural object, that object will have a class and
may have slots.  The class of the object determines what methods
the object will respond to.  No class inheritance is supported.
.SH COMMANDS 
.TP 
\fBdp_objectCreateProc \fIclass\fR \fIobject\fR

This command creates a new Tcl procedure to represent a new \fIobject\fR.
The new procedure will have the name \fIobject\fR and have the given
\fIclass\fR.
.TP
\fBdp_objectExists \fIobject\fR

This command returns 1 if a procedural object named \fIobject\fR
exists in the interpreter and returns 0 otherwise.
.TP
\fBdp_objectFree \fIobject\fR

This command frees up the resources associated with the
\fIobject\fR, which should have been created with
dp_objectCreateProc.  After using dp_objectFree on an
\fIobject\fR, no more references to that \fIobject\fR or its slots
should be made.
.TP
\fBdp_objectSlots \fIobject\fR

This command returns a list of the slots of the procedural
\fIobject\fR, which should have been created with
dp_objectCreateProc.
.TP
\fBdp_objectSlot \fIobject\fR \fIslot\fR

This command returns the value of a \fIslot\fR of the procedural
\fIobject\fR, which should have been created with
dp_objectCreateProc.
.TP
\fBdp_objectSlotSet \fIobject\fR \fIslot\fR \fIvalue\fR

This command sets the \fIvalue\fR of a \fIslot\fR of the
\fIobject\fR, which should have been created with
dp_objectCreateProc.  If \fIslot\fR is not yet a slot of the
\fIobject\fR, this command will make \fIslot\fR a slot of the
object.  Thus, slots can be dynamically added to objects created
using dp_objectCreateProc.  A \fIslot\fR may not be an array.
.TP
\fBdp_objectSlotAppend \fIobject\fR \fIslot\fR \fIvalue\fR

This command uses lappend to append the given \fIvalue\fR
to the current value of the \fIslot\fR of the \fIobject\fR, which
should have been created with dp_objectCreateProc.  If
\fIslot\fR is not yet a slot of the \fIobject\fR, this command
will make \fIslot\fR a slot of the object.  Thus, slots can be
dynamically added to objects created using
dp_objectCreateProc.
.TP
\fBdp_objectConfigure \fIclass\fR \fIobject\fR ?\fIoptions\fR?

This command provides a Tk "configure" style of slot access for
the procedural \fIobject\fR, which should have been created using
dp_objectCreateProc.  (See example usage below.)  The argument
\fIclass\fR should be the class of the \fIobject\fR.  The
optional \fIoptions\fR argument can be used in the following
three formats:

\fBdp_objectConfigure \fIclass\fR \fIobject\fR ?\fI-slot\fR?
.br
\fBdp_objectConfigure \fIclass\fR \fIobject\fR ?\fI-slot val -slot val ...\fR?
.br
\fBdp_objectConfigure \fIclass\fR \fIobject\fR
.br

The first format of dp_objectConfigure retrieves the
configuration entry for a given \fIslot\fR.  A configuration
entry for a \fIslot\fR is a triplet of the format of \fI{-slot
default value}\fR, where \fI-slot\fR is the slot name prepended
with a hyphen, \fIdefault\fR is the default value for the
\fIslot\fR, and \fIvalue\fR is the current value of the
\fIslot\fR.  (Note that this configuration entry format for slots
is different than the configuration entry format of Tk widget
options.)

The second format of dp_objectConfigure sets the current
values of several \fIslot\fRs of an \fIobject\fR.  

The third format of dp_objectConfigure retrieves the
configuration entries of all the slots of the \fIobject\fR.

Note that to use dp_objectConfigure, you must prepend a hyphen
('-') to each slot name.  (e.g., "slot" becomes "-slot".)  This
was designed for pseudo-compatability with the Tk style of widget
option configuration, since widget options in Tk are all prefixed
with a '-'.  Also, any slot names, \fIslot\fR, should be fully
specified and not abbreviated.
.SH "CLASSES AND METHODS"
.LP

The command dp_objectCreateProc creates a new Tcl procedure whose
name is \fIobject\fR to represent a new procedural object.  
You may invoke various methods on the procedural \fIobject\fR,
using the following general form:
.DS C
\fIobject method \fR?\fIarg0 arg1 ...\fR?
.DE

The \fImethod\fR argument and the \fIclass\fR of the \fIobject\fR
determine the method invoked.
.LP
Methods for classes are specified using the following form:
.DS C
proc \fIclass\fR.\fImethod\fR {\fIself arg0 ... argN\fR} {
   ...method body...
}
.DE

The first argument \fIself\fR is required in the method
specification.  The \fIself\fR argument is set to the name of the
\fIobject\fR that the \fImethod\fR will get called upon.
.SH EXAMPLE
.LP
The following is a simple example of using the above commands to
create a procedural object using Tcl scripting only:
.DS C
# Define point creator.
#
proc makePoint {aPoint args} {
   eval dp_objectCreateProc point $aPoint;
   dp_objectSlotSet $aPoint x 0;
   dp_objectSlotSet $aPoint y 0;
   eval $aPoint configure $args
   return $aPoint;
}

# Define methods of point class.
#
proc point.configure {aPoint args} {
   eval dp_objectConfigure point $aPoint $args;
}

proc point.slot-value {aPoint slot} {
  dp_objectSlot $aPoint $slot;
}

proc point.destroy {aPoint slot} {
  dp_objectFree $aPoint $slot;
}

proc point.draw {aPoint} {
   set x [dp_objectSlot $aPoint x];
   set y [dp_objectSlot $aPoint y];
   dot $x $y;
}

# Instatiate a point and test it out.
#
makePoint p;			# Makes the point
p configure -x 10 -y 20;	# sets the value to (10,20)
p configure -x;			# returns {-x {} 10}
p configure;			# returns {{-x {} 10} {-y {} 20}}
p slot-value x;			# returns 10
p draw;				# calls "dot 10 20"
dp_objectExists p;		# returns 1
dp_objectExists p1;		# returns 0
p destroy;			# destroys the object
.DE
.SH KEYWORDS
object, method, class, slots, associative arrays, configure, options,
prototyping
.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/packetReceive
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: Tcl-DP connection management
dp_connect, dp_shutdown, dp_accept \- Tcl-DP connection management
.sp
dp_send, dp_receive \- Stream transmission over TCP sockets
.sp
dp_packetSend, dp_packetReceive \- Message transmission using TCP sockets
.sp
dp_sendTo, dp_receiveFrom \- Message transmission using UDP sockets
.SH DESCRIPTION
.LP

This manual page describes the Tcl commands for managing basic network
connections provided by the Tcl-DP (Tcl Distributed Programming)
extension to Tcl/Tk.  These commands provide basically the same level
of service to Tcl/Tk as the UNIX C socket(2) related system
calls. The manual page is divided into two sections.  The first
section describes the commands needed to set up and shut down
connections.  The second section describes various commands for
transmitting data between machines.

All connection management commands return and take as arguments
identifiers called \fIsockId\fR's.  (A \fIsockId\fR represents a UNIX
file descriptor, which UNIX uses to represent both open
files and open sockets.  A socket is an endpoint of network
communication.)  \fISockId\fR's are identical to the identifiers
manipulated by the read, gets, puts, eof, and
close file management commands of Tcl.

.SH "CONNECTION SETUP AND TEAR DOWN"

Three basic commands are useful for connection setup and tear down:
dp_connect, dp_accept, and dp_shutdown.
Dp_connect is used to create either internet (INET) or unix domain
TCP/IP sockets, or INET based UDP/IP sockets.  If given the
\fI-server\fR flag, dp_connect creates a \fIlistening\fP socket
which other clients can connect to.  
When a remote machine attempts to connect to this listening
socket, it becomes readable.  Servers use the
dp_accept command to accept the connection, which creates a
new \fIsockId\fR connected to the client as a side effect while the
listening socket continues to listen for new connections.  Client
may close half of a duplex connection using the dp_shutdown
command.  When clients wish to terminate a connection, the tcl
close command should be used.

The rest of this sections describes the various options for
dp_connect, dp_accept, and dp_shutdown.

.TP
\fBdp_connect \fI-server port ?-linger? ?-reuseAddr?\fR

In this form, dp_connect creates a listening (server) socket.
This listening socket will listen for client connections on the
specified \fIport\fR number and will become readable whenever a client
process attempts a connection.  The creator of the listening socket may
then dp_accept the client connection.  (See the dp_accept
command below.  Also see the dp_filehandler and
dp_isready manual pages for testing when a socket becomes readable.)

The \fIport\fR argument, which can be a number or
service name (see services(5) for more information),
must specify an unused port number.  If
the \fIport\fR number argument is empty or 0, the dp_connect
command will automatically select an unused port number.

The -linger flag changes the behavior of the close function on this
socket.  By default, the socket will close and any unsent data in the
socket will be discarded.  If -linger is specified, close will return
immediately and the system will attempt to deliver any data remaining
in the socket.

The -reuseAddr, if specified, instructs the system to allow reuse of the
specified port number.

This form of the dp_connect command returns a
list of two values.  The first value is the \fIsockId\fR that
represents the created listening socket.  The second value is the
port number that the socket is listening to.

.TP
\fBdp_connect \fI-server\fR \fIpath\fR

This command creates up a UNIX domain listening socket.  This
command is identical to the one above except that a UNIX domain
socket is created using an address specified by \fIpath\fR.

.TP
\fBdp_connect \fIhost\fR \fIport\fR

This command creates a TCP protocol INET socket and connects it
to a remote server process.  The remote server process should be
running on the machine given by the \fIhost\fR network address
and should be listening for and accepting client connections on
the given \fIport\fR.
\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
This command returns a list of two
values: a \fIsockId\fR to represent the newly created socket and
the port number used for the connection.

.TP
\fBdp_connect \fIpath\fR

This command creates a TCP protocol UNIX domain socket and connects it
to the UNIX domain socket specified by path.  It is otherwise identical
to dp_connect \fIhost\fR \fIport\fR.

.TP
\fBdp_connect \fI-udp\fR \fI?port?\fR

In this form, dp_connect creates a UDP protocol INET socket
(a connectionless socket).  Since this socket is connectionless, only the
dp_sendTo and dp_receiveFrom commands described below may
be used with this socket to transmit and receive data.

\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
If the \fIport\fR argument is missing or 0, the system
will select an unused port number for you.  This command
returns a list containing a \fIsockId\fR (that represents the
created socket) and the \fIport\fR number (where the socket will
receive and transmit data using the UDP protocol).

.TP
\fBdp_accept \fIsockId\fR

The \fIsockId\fR argument must represent a listening (server)
socket (i.e., a \fIsockId\fR returned by the dp_connect
command that was called with the \fI-server\fR flag).  If this
listening socket is readable (i.e., a client process is
attempting to connect), the dp_accept command creates a new
socket that is connected to the client process.  If the listening
socket is not readable, th dp_accept command will block until
a client process attempts to connect to the listening socket.
The listening socket (represented by the \fIsockId\fR argument)
will remain a listening socket.  This command returns a new
\fIsockId\fR to represent the newly created socket that is
connected to the accepted client process, and the internet address
of the connecting party (eg, "128.32.149.117").  If the connection
occurs on a Unix domain socket, the second element of the
return value will be "0.0.0.0"

.TP 
\fBdp_shutdown \fIsockId\fR \fIcode\fR

Shutdown a socket for reading, writing, or both.  This command is
not the same as close, which you should use for truly
closing the socket.  The \fIsockId\fR argument must represent a
file descriptor that represents a socket, not an open file.

If \fIcode\fR is \fB"0"\fR, \fB"read"\fR or \fB"receives"\fR then
further reception of data from \fIsockId\fR will be disabled.

If \fIcode\fR is \fB"1"\fR, \fB"write"\fR or \fB"sends"\fR, then
further sending of data using \fIsockId\fR will be disabled (and
an EOF will be automatically sent down the socket).

If \fIcode\fR is \fB"2"\fR, \fB"all"\fR or \fB"both"\fR, then
further reception and sending of data on \fIsockId\fR will be
disabled.

As a side effect, the appropriate filehandlers previously
installed on the \fIsockId\fR will be deleted.  (See the
dp_filehandler man page.)

.SH "TRANSMITTING DATA"

Four pairs of commands are useful for sending and receiving data on
sockets.  The Tcl functions gets and puts can be used to
read and write string data to and from sockets.  These functions are
appropriate for communicating with text based programs (e.g., telnet).
Applications can detect closed connection when the Tcl command
eof \fIsockId\fR returns 1.

Dp_send and dp_receive are similar to gets and puts, but have the side
effect of automatically detecting closed connections.  When these
functions detect a closed connection, they remove any previously
instantiated file handlers for \fIsockId\fR and close the socket.
Applications can install callbacks associated with this "close-file"
event using the dp_atclose command.  Dp_send and dp_receive also
support non blocking input and are more efficient than gets and puts.

Dp_sendTo and dp_receiveFrom are used to send and receive data on
connectionless sockets (i.e., created using the dp_connect command
using the \fI-udp\fR option).  Dp_receiveFrom also supports non
blocking input and peeking (i.e., reading data from a socket without
advancing the file pointer).

Dp_packetSend and dp_packetReceive provide a message based protocol for
TCP sockets.  The extra protocol is necessary since TCP provides a
stream interface which does not preserve message boundaries.  The
protocol attaches an 8 byte binary header on the message containing a
magic number and the length of the message.  Due to the presence of
this header, applications should be careful about intermixing calls to
dp_packetSend and dp_packetReceive with other data transmission calls.

The options for each command are described below.

.TP
\fBdp_send\fR \fIsockId\fR \fImessage\fR ?\fInonewline\fP?

Writes the string \fImessage\fR to a connected socket.  Like the Tcl
puts command, dp_send normally outputs a newline character after
\fImessage\fR, but this feature may be suppressed by specifying the
\fInonewline\fP switch.

If insufficient buffer space exists to send \fImessage\fR, this command
will block until message is transmitted unless the socket is in
non-blocking mode (see dp_socketOption).  In this case, only part
of \fImessage\fR is transmitted.  The return value is the number of
characters sent.  The rest of the message can be sent when the socket
becomes writeable.  See the manual pages for the dp_filehandler and
dp_isready commands for testing when a socket becomes writeable.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a value of 0.

.TP
\fBdp_receive\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fP?

This command reads the immediately available data from \fIsockId\fR.
If \fInumBytes\fR is specified, at most this many bytes of the
immediately available data on will be returned.  If the socket is
non-blocking (see dp_socketOption), all data available on the socket
will be returned  -- should no data be available, dp_receive will
return a null string.

If the socket is in blocking mode (the default), dp_receive will block
until input is received.  If \fI-peek\fP is specified, the data present
on the socket is returned but not consumed, so that a subsequent
dp_receive call will see the same data.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a null string.

.TP
\fBdp_packetSend\fR \fIsockId\fR \fImessage\fR

Sends the string \fImessage\fR through the socket (\fIsockId\fR) to the
connected, remote process.  This command is similar to dp_sendTo,
except that it works with TCP sockets, so message delivery is
reliable.  It differs from dp_send in that message boundaries are
preserved.  When the remote socket calls dp_packetReceive, it will
never receive a partial \fImessage\fR.  The receiver \fImust\fP use
dp_packetReceive to read the message.

\fINotes:\fR
Message boundaries are preserved by attaching an 8 byte binary header
onto the message, half of which is a magic number indicating
a packet, and half of which indicates the size of the message.
Because this header represents binary data, care must be taken
if puts or dp_send calls are intermixed with dp_packetSend on the
same channel.

If dp_packetSend is used with non-blocking I/O mode and the send would
have blocked, dp_packetSend returns the number of bytes transmitted.
It is up to the caller to transmit the remaining characters in the
string using dp_send with the nonewline option (\fInot\fP
dp_packetSend) when the socket becomes writeable.  See dp_filehandler and
dp_isready manual pages for testing when a socket becomes writeable.)

.TP
\fBdp_packetReceive\fR \fIsockId\fR ?\fI-peek\fP?

Receives a single message from the connection (represented by the
\fIsockId\fR).  The connected, remote process which sent the message
must use the dp_packetSend command.  Dp_packetReceive differs from
dp_receive in that message boundaries are preserved.  If the entire
message is available, the return value is the message received.  If
only part of the packet is available when dp_packetReceive is called, a
zero length string is returned.  See the note in dp_packetSend above
about using dp_packetReceive and gets on the same channel.

If \fI-peek\fP is specified, the data present on the socket is returned
but not consumed, so that a subsequent dp_packetReceive calls will
see  the same data.

If no data is available at the socket and the socket is in non blocking
mode, a zero length string is returned.  Otherwise, this operation
blocks until at least some data (but possibly not the entire packet)
is received.

.TP
\fBdp_sendTo\fR \fIsockId\fR \fImessage\fR \fIaddr\fR

Sends the string \fImessage\fR to the process at the destination
address specified by the \fIaddr\fR handle.  The \fIaddr\fR handle must
be created using the dp_address command or taken from the return
value of the dp_receiveFrom command.  The \fIsockId\fR argument
must represent a connectionless socket (i.e., created using the
dp_connect command using the \fI-udp\fR option).  Dp_sendTo
uses \fIsockId\fR as the transmitting socket.

.TP
\fBdp_receiveFrom\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fR? ?\fI-noaddr\fR?

Receives a message that was sent from another process that used the
dp_sendTo command.  Normally, a list of two values is returned.  The
first value is the address (an \fIaddr\fR handle) of the sending
process, and the second element is the message received.  If the
\fI-noaddr\fR flag is specified, the address of the sending process is
ommitted.  If the socket is in non-blocking mode (see dp_socketOption)
and not readable, -1 will be returned.  Otherwise, this command will
block until a message arrives.  If \fI-peek\fR is specified, the
message is read from the socket but not removed from the queue.  If
\fInumBytes\fR is specified, at most this many bytes of the message is
returned.  Because of the way connectionless sockets work, the rest of
the datagram will be discarded from the queue, regardless of the value
of \fInumBytes\fR, unless \fI-peek\fR is specified.

The \fIsockId\fR argument must represent a connectionless socket
(i.e., created using the dp_connect command using the
\fI-udp\fR option).  The dp_receiveFrom command uses the
connectionless socket, \fIsockId\fR, as the reception socket.

.SH SEE ALSO
Tcl-DP, socket(2), accept(2), connect(2), listen(2), dp_address(n),
Tcl, dp_filehandler(n), dp_socketOption(n)

.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu),
.br
Steve Yen (syen@cs.berkeley.edu), and
.br
Lou Salkind (salkind@deshaw.com)
'\"@endhelp
'\"@help: dp/packetSend
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: Tcl-DP connection management
dp_connect, dp_shutdown, dp_accept \- Tcl-DP connection management
.sp
dp_send, dp_receive \- Stream transmission over TCP sockets
.sp
dp_packetSend, dp_packetReceive \- Message transmission using TCP sockets
.sp
dp_sendTo, dp_receiveFrom \- Message transmission using UDP sockets
.SH DESCRIPTION
.LP

This manual page describes the Tcl commands for managing basic network
connections provided by the Tcl-DP (Tcl Distributed Programming)
extension to Tcl/Tk.  These commands provide basically the same level
of service to Tcl/Tk as the UNIX C socket(2) related system
calls. The manual page is divided into two sections.  The first
section describes the commands needed to set up and shut down
connections.  The second section describes various commands for
transmitting data between machines.

All connection management commands return and take as arguments
identifiers called \fIsockId\fR's.  (A \fIsockId\fR represents a UNIX
file descriptor, which UNIX uses to represent both open
files and open sockets.  A socket is an endpoint of network
communication.)  \fISockId\fR's are identical to the identifiers
manipulated by the read, gets, puts, eof, and
close file management commands of Tcl.

.SH "CONNECTION SETUP AND TEAR DOWN"

Three basic commands are useful for connection setup and tear down:
dp_connect, dp_accept, and dp_shutdown.
Dp_connect is used to create either internet (INET) or unix domain
TCP/IP sockets, or INET based UDP/IP sockets.  If given the
\fI-server\fR flag, dp_connect creates a \fIlistening\fP socket
which other clients can connect to.  
When a remote machine attempts to connect to this listening
socket, it becomes readable.  Servers use the
dp_accept command to accept the connection, which creates a
new \fIsockId\fR connected to the client as a side effect while the
listening socket continues to listen for new connections.  Client
may close half of a duplex connection using the dp_shutdown
command.  When clients wish to terminate a connection, the tcl
close command should be used.

The rest of this sections describes the various options for
dp_connect, dp_accept, and dp_shutdown.

.TP
\fBdp_connect \fI-server port ?-linger? ?-reuseAddr?\fR

In this form, dp_connect creates a listening (server) socket.
This listening socket will listen for client connections on the
specified \fIport\fR number and will become readable whenever a client
process attempts a connection.  The creator of the listening socket may
then dp_accept the client connection.  (See the dp_accept
command below.  Also see the dp_filehandler and
dp_isready manual pages for testing when a socket becomes readable.)

The \fIport\fR argument, which can be a number or
service name (see services(5) for more information),
must specify an unused port number.  If
the \fIport\fR number argument is empty or 0, the dp_connect
command will automatically select an unused port number.

The -linger flag changes the behavior of the close function on this
socket.  By default, the socket will close and any unsent data in the
socket will be discarded.  If -linger is specified, close will return
immediately and the system will attempt to deliver any data remaining
in the socket.

The -reuseAddr, if specified, instructs the system to allow reuse of the
specified port number.

This form of the dp_connect command returns a
list of two values.  The first value is the \fIsockId\fR that
represents the created listening socket.  The second value is the
port number that the socket is listening to.

.TP
\fBdp_connect \fI-server\fR \fIpath\fR

This command creates up a UNIX domain listening socket.  This
command is identical to the one above except that a UNIX domain
socket is created using an address specified by \fIpath\fR.

.TP
\fBdp_connect \fIhost\fR \fIport\fR

This command creates a TCP protocol INET socket and connects it
to a remote server process.  The remote server process should be
running on the machine given by the \fIhost\fR network address
and should be listening for and accepting client connections on
the given \fIport\fR.
\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
This command returns a list of two
values: a \fIsockId\fR to represent the newly created socket and
the port number used for the connection.

.TP
\fBdp_connect \fIpath\fR

This command creates a TCP protocol UNIX domain socket and connects it
to the UNIX domain socket specified by path.  It is otherwise identical
to dp_connect \fIhost\fR \fIport\fR.

.TP
\fBdp_connect \fI-udp\fR \fI?port?\fR

In this form, dp_connect creates a UDP protocol INET socket
(a connectionless socket).  Since this socket is connectionless, only the
dp_sendTo and dp_receiveFrom commands described below may
be used with this socket to transmit and receive data.

\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
If the \fIport\fR argument is missing or 0, the system
will select an unused port number for you.  This command
returns a list containing a \fIsockId\fR (that represents the
created socket) and the \fIport\fR number (where the socket will
receive and transmit data using the UDP protocol).

.TP
\fBdp_accept \fIsockId\fR

The \fIsockId\fR argument must represent a listening (server)
socket (i.e., a \fIsockId\fR returned by the dp_connect
command that was called with the \fI-server\fR flag).  If this
listening socket is readable (i.e., a client process is
attempting to connect), the dp_accept command creates a new
socket that is connected to the client process.  If the listening
socket is not readable, th dp_accept command will block until
a client process attempts to connect to the listening socket.
The listening socket (represented by the \fIsockId\fR argument)
will remain a listening socket.  This command returns a new
\fIsockId\fR to represent the newly created socket that is
connected to the accepted client process, and the internet address
of the connecting party (eg, "128.32.149.117").  If the connection
occurs on a Unix domain socket, the second element of the
return value will be "0.0.0.0"

.TP 
\fBdp_shutdown \fIsockId\fR \fIcode\fR

Shutdown a socket for reading, writing, or both.  This command is
not the same as close, which you should use for truly
closing the socket.  The \fIsockId\fR argument must represent a
file descriptor that represents a socket, not an open file.

If \fIcode\fR is \fB"0"\fR, \fB"read"\fR or \fB"receives"\fR then
further reception of data from \fIsockId\fR will be disabled.

If \fIcode\fR is \fB"1"\fR, \fB"write"\fR or \fB"sends"\fR, then
further sending of data using \fIsockId\fR will be disabled (and
an EOF will be automatically sent down the socket).

If \fIcode\fR is \fB"2"\fR, \fB"all"\fR or \fB"both"\fR, then
further reception and sending of data on \fIsockId\fR will be
disabled.

As a side effect, the appropriate filehandlers previously
installed on the \fIsockId\fR will be deleted.  (See the
dp_filehandler man page.)

.SH "TRANSMITTING DATA"

Four pairs of commands are useful for sending and receiving data on
sockets.  The Tcl functions gets and puts can be used to
read and write string data to and from sockets.  These functions are
appropriate for communicating with text based programs (e.g., telnet).
Applications can detect closed connection when the Tcl command
eof \fIsockId\fR returns 1.

Dp_send and dp_receive are similar to gets and puts, but have the side
effect of automatically detecting closed connections.  When these
functions detect a closed connection, they remove any previously
instantiated file handlers for \fIsockId\fR and close the socket.
Applications can install callbacks associated with this "close-file"
event using the dp_atclose command.  Dp_send and dp_receive also
support non blocking input and are more efficient than gets and puts.

Dp_sendTo and dp_receiveFrom are used to send and receive data on
connectionless sockets (i.e., created using the dp_connect command
using the \fI-udp\fR option).  Dp_receiveFrom also supports non
blocking input and peeking (i.e., reading data from a socket without
advancing the file pointer).

Dp_packetSend and dp_packetReceive provide a message based protocol for
TCP sockets.  The extra protocol is necessary since TCP provides a
stream interface which does not preserve message boundaries.  The
protocol attaches an 8 byte binary header on the message containing a
magic number and the length of the message.  Due to the presence of
this header, applications should be careful about intermixing calls to
dp_packetSend and dp_packetReceive with other data transmission calls.

The options for each command are described below.

.TP
\fBdp_send\fR \fIsockId\fR \fImessage\fR ?\fInonewline\fP?

Writes the string \fImessage\fR to a connected socket.  Like the Tcl
puts command, dp_send normally outputs a newline character after
\fImessage\fR, but this feature may be suppressed by specifying the
\fInonewline\fP switch.

If insufficient buffer space exists to send \fImessage\fR, this command
will block until message is transmitted unless the socket is in
non-blocking mode (see dp_socketOption).  In this case, only part
of \fImessage\fR is transmitted.  The return value is the number of
characters sent.  The rest of the message can be sent when the socket
becomes writeable.  See the manual pages for the dp_filehandler and
dp_isready commands for testing when a socket becomes writeable.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a value of 0.

.TP
\fBdp_receive\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fP?

This command reads the immediately available data from \fIsockId\fR.
If \fInumBytes\fR is specified, at most this many bytes of the
immediately available data on will be returned.  If the socket is
non-blocking (see dp_socketOption), all data available on the socket
will be returned  -- should no data be available, dp_receive will
return a null string.

If the socket is in blocking mode (the default), dp_receive will block
until input is received.  If \fI-peek\fP is specified, the data present
on the socket is returned but not consumed, so that a subsequent
dp_receive call will see the same data.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a null string.

.TP
\fBdp_packetSend\fR \fIsockId\fR \fImessage\fR

Sends the string \fImessage\fR through the socket (\fIsockId\fR) to the
connected, remote process.  This command is similar to dp_sendTo,
except that it works with TCP sockets, so message delivery is
reliable.  It differs from dp_send in that message boundaries are
preserved.  When the remote socket calls dp_packetReceive, it will
never receive a partial \fImessage\fR.  The receiver \fImust\fP use
dp_packetReceive to read the message.

\fINotes:\fR
Message boundaries are preserved by attaching an 8 byte binary header
onto the message, half of which is a magic number indicating
a packet, and half of which indicates the size of the message.
Because this header represents binary data, care must be taken
if puts or dp_send calls are intermixed with dp_packetSend on the
same channel.

If dp_packetSend is used with non-blocking I/O mode and the send would
have blocked, dp_packetSend returns the number of bytes transmitted.
It is up to the caller to transmit the remaining characters in the
string using dp_send with the nonewline option (\fInot\fP
dp_packetSend) when the socket becomes writeable.  See dp_filehandler and
dp_isready manual pages for testing when a socket becomes writeable.)

.TP
\fBdp_packetReceive\fR \fIsockId\fR ?\fI-peek\fP?

Receives a single message from the connection (represented by the
\fIsockId\fR).  The connected, remote process which sent the message
must use the dp_packetSend command.  Dp_packetReceive differs from
dp_receive in that message boundaries are preserved.  If the entire
message is available, the return value is the message received.  If
only part of the packet is available when dp_packetReceive is called, a
zero length string is returned.  See the note in dp_packetSend above
about using dp_packetReceive and gets on the same channel.

If \fI-peek\fP is specified, the data present on the socket is returned
but not consumed, so that a subsequent dp_packetReceive calls will
see  the same data.

If no data is available at the socket and the socket is in non blocking
mode, a zero length string is returned.  Otherwise, this operation
blocks until at least some data (but possibly not the entire packet)
is received.

.TP
\fBdp_sendTo\fR \fIsockId\fR \fImessage\fR \fIaddr\fR

Sends the string \fImessage\fR to the process at the destination
address specified by the \fIaddr\fR handle.  The \fIaddr\fR handle must
be created using the dp_address command or taken from the return
value of the dp_receiveFrom command.  The \fIsockId\fR argument
must represent a connectionless socket (i.e., created using the
dp_connect command using the \fI-udp\fR option).  Dp_sendTo
uses \fIsockId\fR as the transmitting socket.

.TP
\fBdp_receiveFrom\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fR? ?\fI-noaddr\fR?

Receives a message that was sent from another process that used the
dp_sendTo command.  Normally, a list of two values is returned.  The
first value is the address (an \fIaddr\fR handle) of the sending
process, and the second element is the message received.  If the
\fI-noaddr\fR flag is specified, the address of the sending process is
ommitted.  If the socket is in non-blocking mode (see dp_socketOption)
and not readable, -1 will be returned.  Otherwise, this command will
block until a message arrives.  If \fI-peek\fR is specified, the
message is read from the socket but not removed from the queue.  If
\fInumBytes\fR is specified, at most this many bytes of the message is
returned.  Because of the way connectionless sockets work, the rest of
the datagram will be discarded from the queue, regardless of the value
of \fInumBytes\fR, unless \fI-peek\fR is specified.

The \fIsockId\fR argument must represent a connectionless socket
(i.e., created using the dp_connect command using the
\fI-udp\fR option).  The dp_receiveFrom command uses the
connectionless socket, \fIsockId\fR, as the reception socket.

.SH SEE ALSO
Tcl-DP, socket(2), accept(2), connect(2), listen(2), dp_address(n),
Tcl, dp_filehandler(n), dp_socketOption(n)

.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu),
.br
Steve Yen (syen@cs.berkeley.edu), and
.br
Lou Salkind (salkind@deshaw.com)
'\"@endhelp
'\"@help: dp/receive
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: Tcl-DP connection management
dp_connect, dp_shutdown, dp_accept \- Tcl-DP connection management
.sp
dp_send, dp_receive \- Stream transmission over TCP sockets
.sp
dp_packetSend, dp_packetReceive \- Message transmission using TCP sockets
.sp
dp_sendTo, dp_receiveFrom \- Message transmission using UDP sockets
.SH DESCRIPTION
.LP

This manual page describes the Tcl commands for managing basic network
connections provided by the Tcl-DP (Tcl Distributed Programming)
extension to Tcl/Tk.  These commands provide basically the same level
of service to Tcl/Tk as the UNIX C socket(2) related system
calls. The manual page is divided into two sections.  The first
section describes the commands needed to set up and shut down
connections.  The second section describes various commands for
transmitting data between machines.

All connection management commands return and take as arguments
identifiers called \fIsockId\fR's.  (A \fIsockId\fR represents a UNIX
file descriptor, which UNIX uses to represent both open
files and open sockets.  A socket is an endpoint of network
communication.)  \fISockId\fR's are identical to the identifiers
manipulated by the read, gets, puts, eof, and
close file management commands of Tcl.

.SH "CONNECTION SETUP AND TEAR DOWN"

Three basic commands are useful for connection setup and tear down:
dp_connect, dp_accept, and dp_shutdown.
Dp_connect is used to create either internet (INET) or unix domain
TCP/IP sockets, or INET based UDP/IP sockets.  If given the
\fI-server\fR flag, dp_connect creates a \fIlistening\fP socket
which other clients can connect to.  
When a remote machine attempts to connect to this listening
socket, it becomes readable.  Servers use the
dp_accept command to accept the connection, which creates a
new \fIsockId\fR connected to the client as a side effect while the
listening socket continues to listen for new connections.  Client
may close half of a duplex connection using the dp_shutdown
command.  When clients wish to terminate a connection, the tcl
close command should be used.

The rest of this sections describes the various options for
dp_connect, dp_accept, and dp_shutdown.

.TP
\fBdp_connect \fI-server port ?-linger? ?-reuseAddr?\fR

In this form, dp_connect creates a listening (server) socket.
This listening socket will listen for client connections on the
specified \fIport\fR number and will become readable whenever a client
process attempts a connection.  The creator of the listening socket may
then dp_accept the client connection.  (See the dp_accept
command below.  Also see the dp_filehandler and
dp_isready manual pages for testing when a socket becomes readable.)

The \fIport\fR argument, which can be a number or
service name (see services(5) for more information),
must specify an unused port number.  If
the \fIport\fR number argument is empty or 0, the dp_connect
command will automatically select an unused port number.

The -linger flag changes the behavior of the close function on this
socket.  By default, the socket will close and any unsent data in the
socket will be discarded.  If -linger is specified, close will return
immediately and the system will attempt to deliver any data remaining
in the socket.

The -reuseAddr, if specified, instructs the system to allow reuse of the
specified port number.

This form of the dp_connect command returns a
list of two values.  The first value is the \fIsockId\fR that
represents the created listening socket.  The second value is the
port number that the socket is listening to.

.TP
\fBdp_connect \fI-server\fR \fIpath\fR

This command creates up a UNIX domain listening socket.  This
command is identical to the one above except that a UNIX domain
socket is created using an address specified by \fIpath\fR.

.TP
\fBdp_connect \fIhost\fR \fIport\fR

This command creates a TCP protocol INET socket and connects it
to a remote server process.  The remote server process should be
running on the machine given by the \fIhost\fR network address
and should be listening for and accepting client connections on
the given \fIport\fR.
\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
This command returns a list of two
values: a \fIsockId\fR to represent the newly created socket and
the port number used for the connection.

.TP
\fBdp_connect \fIpath\fR

This command creates a TCP protocol UNIX domain socket and connects it
to the UNIX domain socket specified by path.  It is otherwise identical
to dp_connect \fIhost\fR \fIport\fR.

.TP
\fBdp_connect \fI-udp\fR \fI?port?\fR

In this form, dp_connect creates a UDP protocol INET socket
(a connectionless socket).  Since this socket is connectionless, only the
dp_sendTo and dp_receiveFrom commands described below may
be used with this socket to transmit and receive data.

\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
If the \fIport\fR argument is missing or 0, the system
will select an unused port number for you.  This command
returns a list containing a \fIsockId\fR (that represents the
created socket) and the \fIport\fR number (where the socket will
receive and transmit data using the UDP protocol).

.TP
\fBdp_accept \fIsockId\fR

The \fIsockId\fR argument must represent a listening (server)
socket (i.e., a \fIsockId\fR returned by the dp_connect
command that was called with the \fI-server\fR flag).  If this
listening socket is readable (i.e., a client process is
attempting to connect), the dp_accept command creates a new
socket that is connected to the client process.  If the listening
socket is not readable, th dp_accept command will block until
a client process attempts to connect to the listening socket.
The listening socket (represented by the \fIsockId\fR argument)
will remain a listening socket.  This command returns a new
\fIsockId\fR to represent the newly created socket that is
connected to the accepted client process, and the internet address
of the connecting party (eg, "128.32.149.117").  If the connection
occurs on a Unix domain socket, the second element of the
return value will be "0.0.0.0"

.TP 
\fBdp_shutdown \fIsockId\fR \fIcode\fR

Shutdown a socket for reading, writing, or both.  This command is
not the same as close, which you should use for truly
closing the socket.  The \fIsockId\fR argument must represent a
file descriptor that represents a socket, not an open file.

If \fIcode\fR is \fB"0"\fR, \fB"read"\fR or \fB"receives"\fR then
further reception of data from \fIsockId\fR will be disabled.

If \fIcode\fR is \fB"1"\fR, \fB"write"\fR or \fB"sends"\fR, then
further sending of data using \fIsockId\fR will be disabled (and
an EOF will be automatically sent down the socket).

If \fIcode\fR is \fB"2"\fR, \fB"all"\fR or \fB"both"\fR, then
further reception and sending of data on \fIsockId\fR will be
disabled.

As a side effect, the appropriate filehandlers previously
installed on the \fIsockId\fR will be deleted.  (See the
dp_filehandler man page.)

.SH "TRANSMITTING DATA"

Four pairs of commands are useful for sending and receiving data on
sockets.  The Tcl functions gets and puts can be used to
read and write string data to and from sockets.  These functions are
appropriate for communicating with text based programs (e.g., telnet).
Applications can detect closed connection when the Tcl command
eof \fIsockId\fR returns 1.

Dp_send and dp_receive are similar to gets and puts, but have the side
effect of automatically detecting closed connections.  When these
functions detect a closed connection, they remove any previously
instantiated file handlers for \fIsockId\fR and close the socket.
Applications can install callbacks associated with this "close-file"
event using the dp_atclose command.  Dp_send and dp_receive also
support non blocking input and are more efficient than gets and puts.

Dp_sendTo and dp_receiveFrom are used to send and receive data on
connectionless sockets (i.e., created using the dp_connect command
using the \fI-udp\fR option).  Dp_receiveFrom also supports non
blocking input and peeking (i.e., reading data from a socket without
advancing the file pointer).

Dp_packetSend and dp_packetReceive provide a message based protocol for
TCP sockets.  The extra protocol is necessary since TCP provides a
stream interface which does not preserve message boundaries.  The
protocol attaches an 8 byte binary header on the message containing a
magic number and the length of the message.  Due to the presence of
this header, applications should be careful about intermixing calls to
dp_packetSend and dp_packetReceive with other data transmission calls.

The options for each command are described below.

.TP
\fBdp_send\fR \fIsockId\fR \fImessage\fR ?\fInonewline\fP?

Writes the string \fImessage\fR to a connected socket.  Like the Tcl
puts command, dp_send normally outputs a newline character after
\fImessage\fR, but this feature may be suppressed by specifying the
\fInonewline\fP switch.

If insufficient buffer space exists to send \fImessage\fR, this command
will block until message is transmitted unless the socket is in
non-blocking mode (see dp_socketOption).  In this case, only part
of \fImessage\fR is transmitted.  The return value is the number of
characters sent.  The rest of the message can be sent when the socket
becomes writeable.  See the manual pages for the dp_filehandler and
dp_isready commands for testing when a socket becomes writeable.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a value of 0.

.TP
\fBdp_receive\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fP?

This command reads the immediately available data from \fIsockId\fR.
If \fInumBytes\fR is specified, at most this many bytes of the
immediately available data on will be returned.  If the socket is
non-blocking (see dp_socketOption), all data available on the socket
will be returned  -- should no data be available, dp_receive will
return a null string.

If the socket is in blocking mode (the default), dp_receive will block
until input is received.  If \fI-peek\fP is specified, the data present
on the socket is returned but not consumed, so that a subsequent
dp_receive call will see the same data.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a null string.

.TP
\fBdp_packetSend\fR \fIsockId\fR \fImessage\fR

Sends the string \fImessage\fR through the socket (\fIsockId\fR) to the
connected, remote process.  This command is similar to dp_sendTo,
except that it works with TCP sockets, so message delivery is
reliable.  It differs from dp_send in that message boundaries are
preserved.  When the remote socket calls dp_packetReceive, it will
never receive a partial \fImessage\fR.  The receiver \fImust\fP use
dp_packetReceive to read the message.

\fINotes:\fR
Message boundaries are preserved by attaching an 8 byte binary header
onto the message, half of which is a magic number indicating
a packet, and half of which indicates the size of the message.
Because this header represents binary data, care must be taken
if puts or dp_send calls are intermixed with dp_packetSend on the
same channel.

If dp_packetSend is used with non-blocking I/O mode and the send would
have blocked, dp_packetSend returns the number of bytes transmitted.
It is up to the caller to transmit the remaining characters in the
string using dp_send with the nonewline option (\fInot\fP
dp_packetSend) when the socket becomes writeable.  See dp_filehandler and
dp_isready manual pages for testing when a socket becomes writeable.)

.TP
\fBdp_packetReceive\fR \fIsockId\fR ?\fI-peek\fP?

Receives a single message from the connection (represented by the
\fIsockId\fR).  The connected, remote process which sent the message
must use the dp_packetSend command.  Dp_packetReceive differs from
dp_receive in that message boundaries are preserved.  If the entire
message is available, the return value is the message received.  If
only part of the packet is available when dp_packetReceive is called, a
zero length string is returned.  See the note in dp_packetSend above
about using dp_packetReceive and gets on the same channel.

If \fI-peek\fP is specified, the data present on the socket is returned
but not consumed, so that a subsequent dp_packetReceive calls will
see  the same data.

If no data is available at the socket and the socket is in non blocking
mode, a zero length string is returned.  Otherwise, this operation
blocks until at least some data (but possibly not the entire packet)
is received.

.TP
\fBdp_sendTo\fR \fIsockId\fR \fImessage\fR \fIaddr\fR

Sends the string \fImessage\fR to the process at the destination
address specified by the \fIaddr\fR handle.  The \fIaddr\fR handle must
be created using the dp_address command or taken from the return
value of the dp_receiveFrom command.  The \fIsockId\fR argument
must represent a connectionless socket (i.e., created using the
dp_connect command using the \fI-udp\fR option).  Dp_sendTo
uses \fIsockId\fR as the transmitting socket.

.TP
\fBdp_receiveFrom\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fR? ?\fI-noaddr\fR?

Receives a message that was sent from another process that used the
dp_sendTo command.  Normally, a list of two values is returned.  The
first value is the address (an \fIaddr\fR handle) of the sending
process, and the second element is the message received.  If the
\fI-noaddr\fR flag is specified, the address of the sending process is
ommitted.  If the socket is in non-blocking mode (see dp_socketOption)
and not readable, -1 will be returned.  Otherwise, this command will
block until a message arrives.  If \fI-peek\fR is specified, the
message is read from the socket but not removed from the queue.  If
\fInumBytes\fR is specified, at most this many bytes of the message is
returned.  Because of the way connectionless sockets work, the rest of
the datagram will be discarded from the queue, regardless of the value
of \fInumBytes\fR, unless \fI-peek\fR is specified.

The \fIsockId\fR argument must represent a connectionless socket
(i.e., created using the dp_connect command using the
\fI-udp\fR option).  The dp_receiveFrom command uses the
connectionless socket, \fIsockId\fR, as the reception socket.

.SH SEE ALSO
Tcl-DP, socket(2), accept(2), connect(2), listen(2), dp_address(n),
Tcl, dp_filehandler(n), dp_socketOption(n)

.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu),
.br
Steve Yen (syen@cs.berkeley.edu), and
.br
Lou Salkind (salkind@deshaw.com)
'\"@endhelp
'\"@help: dp/receiveFrom
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: Tcl-DP connection management
dp_connect, dp_shutdown, dp_accept \- Tcl-DP connection management
.sp
dp_send, dp_receive \- Stream transmission over TCP sockets
.sp
dp_packetSend, dp_packetReceive \- Message transmission using TCP sockets
.sp
dp_sendTo, dp_receiveFrom \- Message transmission using UDP sockets
.SH DESCRIPTION
.LP

This manual page describes the Tcl commands for managing basic network
connections provided by the Tcl-DP (Tcl Distributed Programming)
extension to Tcl/Tk.  These commands provide basically the same level
of service to Tcl/Tk as the UNIX C socket(2) related system
calls. The manual page is divided into two sections.  The first
section describes the commands needed to set up and shut down
connections.  The second section describes various commands for
transmitting data between machines.

All connection management commands return and take as arguments
identifiers called \fIsockId\fR's.  (A \fIsockId\fR represents a UNIX
file descriptor, which UNIX uses to represent both open
files and open sockets.  A socket is an endpoint of network
communication.)  \fISockId\fR's are identical to the identifiers
manipulated by the read, gets, puts, eof, and
close file management commands of Tcl.

.SH "CONNECTION SETUP AND TEAR DOWN"

Three basic commands are useful for connection setup and tear down:
dp_connect, dp_accept, and dp_shutdown.
Dp_connect is used to create either internet (INET) or unix domain
TCP/IP sockets, or INET based UDP/IP sockets.  If given the
\fI-server\fR flag, dp_connect creates a \fIlistening\fP socket
which other clients can connect to.  
When a remote machine attempts to connect to this listening
socket, it becomes readable.  Servers use the
dp_accept command to accept the connection, which creates a
new \fIsockId\fR connected to the client as a side effect while the
listening socket continues to listen for new connections.  Client
may close half of a duplex connection using the dp_shutdown
command.  When clients wish to terminate a connection, the tcl
close command should be used.

The rest of this sections describes the various options for
dp_connect, dp_accept, and dp_shutdown.

.TP
\fBdp_connect \fI-server port ?-linger? ?-reuseAddr?\fR

In this form, dp_connect creates a listening (server) socket.
This listening socket will listen for client connections on the
specified \fIport\fR number and will become readable whenever a client
process attempts a connection.  The creator of the listening socket may
then dp_accept the client connection.  (See the dp_accept
command below.  Also see the dp_filehandler and
dp_isready manual pages for testing when a socket becomes readable.)

The \fIport\fR argument, which can be a number or
service name (see services(5) for more information),
must specify an unused port number.  If
the \fIport\fR number argument is empty or 0, the dp_connect
command will automatically select an unused port number.

The -linger flag changes the behavior of the close function on this
socket.  By default, the socket will close and any unsent data in the
socket will be discarded.  If -linger is specified, close will return
immediately and the system will attempt to deliver any data remaining
in the socket.

The -reuseAddr, if specified, instructs the system to allow reuse of the
specified port number.

This form of the dp_connect command returns a
list of two values.  The first value is the \fIsockId\fR that
represents the created listening socket.  The second value is the
port number that the socket is listening to.

.TP
\fBdp_connect \fI-server\fR \fIpath\fR

This command creates up a UNIX domain listening socket.  This
command is identical to the one above except that a UNIX domain
socket is created using an address specified by \fIpath\fR.

.TP
\fBdp_connect \fIhost\fR \fIport\fR

This command creates a TCP protocol INET socket and connects it
to a remote server process.  The remote server process should be
running on the machine given by the \fIhost\fR network address
and should be listening for and accepting client connections on
the given \fIport\fR.
\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
This command returns a list of two
values: a \fIsockId\fR to represent the newly created socket and
the port number used for the connection.

.TP
\fBdp_connect \fIpath\fR

This command creates a TCP protocol UNIX domain socket and connects it
to the UNIX domain socket specified by path.  It is otherwise identical
to dp_connect \fIhost\fR \fIport\fR.

.TP
\fBdp_connect \fI-udp\fR \fI?port?\fR

In this form, dp_connect creates a UDP protocol INET socket
(a connectionless socket).  Since this socket is connectionless, only the
dp_sendTo and dp_receiveFrom commands described below may
be used with this socket to transmit and receive data.

\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
If the \fIport\fR argument is missing or 0, the system
will select an unused port number for you.  This command
returns a list containing a \fIsockId\fR (that represents the
created socket) and the \fIport\fR number (where the socket will
receive and transmit data using the UDP protocol).

.TP
\fBdp_accept \fIsockId\fR

The \fIsockId\fR argument must represent a listening (server)
socket (i.e., a \fIsockId\fR returned by the dp_connect
command that was called with the \fI-server\fR flag).  If this
listening socket is readable (i.e., a client process is
attempting to connect), the dp_accept command creates a new
socket that is connected to the client process.  If the listening
socket is not readable, th dp_accept command will block until
a client process attempts to connect to the listening socket.
The listening socket (represented by the \fIsockId\fR argument)
will remain a listening socket.  This command returns a new
\fIsockId\fR to represent the newly created socket that is
connected to the accepted client process, and the internet address
of the connecting party (eg, "128.32.149.117").  If the connection
occurs on a Unix domain socket, the second element of the
return value will be "0.0.0.0"

.TP 
\fBdp_shutdown \fIsockId\fR \fIcode\fR

Shutdown a socket for reading, writing, or both.  This command is
not the same as close, which you should use for truly
closing the socket.  The \fIsockId\fR argument must represent a
file descriptor that represents a socket, not an open file.

If \fIcode\fR is \fB"0"\fR, \fB"read"\fR or \fB"receives"\fR then
further reception of data from \fIsockId\fR will be disabled.

If \fIcode\fR is \fB"1"\fR, \fB"write"\fR or \fB"sends"\fR, then
further sending of data using \fIsockId\fR will be disabled (and
an EOF will be automatically sent down the socket).

If \fIcode\fR is \fB"2"\fR, \fB"all"\fR or \fB"both"\fR, then
further reception and sending of data on \fIsockId\fR will be
disabled.

As a side effect, the appropriate filehandlers previously
installed on the \fIsockId\fR will be deleted.  (See the
dp_filehandler man page.)

.SH "TRANSMITTING DATA"

Four pairs of commands are useful for sending and receiving data on
sockets.  The Tcl functions gets and puts can be used to
read and write string data to and from sockets.  These functions are
appropriate for communicating with text based programs (e.g., telnet).
Applications can detect closed connection when the Tcl command
eof \fIsockId\fR returns 1.

Dp_send and dp_receive are similar to gets and puts, but have the side
effect of automatically detecting closed connections.  When these
functions detect a closed connection, they remove any previously
instantiated file handlers for \fIsockId\fR and close the socket.
Applications can install callbacks associated with this "close-file"
event using the dp_atclose command.  Dp_send and dp_receive also
support non blocking input and are more efficient than gets and puts.

Dp_sendTo and dp_receiveFrom are used to send and receive data on
connectionless sockets (i.e., created using the dp_connect command
using the \fI-udp\fR option).  Dp_receiveFrom also supports non
blocking input and peeking (i.e., reading data from a socket without
advancing the file pointer).

Dp_packetSend and dp_packetReceive provide a message based protocol for
TCP sockets.  The extra protocol is necessary since TCP provides a
stream interface which does not preserve message boundaries.  The
protocol attaches an 8 byte binary header on the message containing a
magic number and the length of the message.  Due to the presence of
this header, applications should be careful about intermixing calls to
dp_packetSend and dp_packetReceive with other data transmission calls.

The options for each command are described below.

.TP
\fBdp_send\fR \fIsockId\fR \fImessage\fR ?\fInonewline\fP?

Writes the string \fImessage\fR to a connected socket.  Like the Tcl
puts command, dp_send normally outputs a newline character after
\fImessage\fR, but this feature may be suppressed by specifying the
\fInonewline\fP switch.

If insufficient buffer space exists to send \fImessage\fR, this command
will block until message is transmitted unless the socket is in
non-blocking mode (see dp_socketOption).  In this case, only part
of \fImessage\fR is transmitted.  The return value is the number of
characters sent.  The rest of the message can be sent when the socket
becomes writeable.  See the manual pages for the dp_filehandler and
dp_isready commands for testing when a socket becomes writeable.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a value of 0.

.TP
\fBdp_receive\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fP?

This command reads the immediately available data from \fIsockId\fR.
If \fInumBytes\fR is specified, at most this many bytes of the
immediately available data on will be returned.  If the socket is
non-blocking (see dp_socketOption), all data available on the socket
will be returned  -- should no data be available, dp_receive will
return a null string.

If the socket is in blocking mode (the default), dp_receive will block
until input is received.  If \fI-peek\fP is specified, the data present
on the socket is returned but not consumed, so that a subsequent
dp_receive call will see the same data.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a null string.

.TP
\fBdp_packetSend\fR \fIsockId\fR \fImessage\fR

Sends the string \fImessage\fR through the socket (\fIsockId\fR) to the
connected, remote process.  This command is similar to dp_sendTo,
except that it works with TCP sockets, so message delivery is
reliable.  It differs from dp_send in that message boundaries are
preserved.  When the remote socket calls dp_packetReceive, it will
never receive a partial \fImessage\fR.  The receiver \fImust\fP use
dp_packetReceive to read the message.

\fINotes:\fR
Message boundaries are preserved by attaching an 8 byte binary header
onto the message, half of which is a magic number indicating
a packet, and half of which indicates the size of the message.
Because this header represents binary data, care must be taken
if puts or dp_send calls are intermixed with dp_packetSend on the
same channel.

If dp_packetSend is used with non-blocking I/O mode and the send would
have blocked, dp_packetSend returns the number of bytes transmitted.
It is up to the caller to transmit the remaining characters in the
string using dp_send with the nonewline option (\fInot\fP
dp_packetSend) when the socket becomes writeable.  See dp_filehandler and
dp_isready manual pages for testing when a socket becomes writeable.)

.TP
\fBdp_packetReceive\fR \fIsockId\fR ?\fI-peek\fP?

Receives a single message from the connection (represented by the
\fIsockId\fR).  The connected, remote process which sent the message
must use the dp_packetSend command.  Dp_packetReceive differs from
dp_receive in that message boundaries are preserved.  If the entire
message is available, the return value is the message received.  If
only part of the packet is available when dp_packetReceive is called, a
zero length string is returned.  See the note in dp_packetSend above
about using dp_packetReceive and gets on the same channel.

If \fI-peek\fP is specified, the data present on the socket is returned
but not consumed, so that a subsequent dp_packetReceive calls will
see  the same data.

If no data is available at the socket and the socket is in non blocking
mode, a zero length string is returned.  Otherwise, this operation
blocks until at least some data (but possibly not the entire packet)
is received.

.TP
\fBdp_sendTo\fR \fIsockId\fR \fImessage\fR \fIaddr\fR

Sends the string \fImessage\fR to the process at the destination
address specified by the \fIaddr\fR handle.  The \fIaddr\fR handle must
be created using the dp_address command or taken from the return
value of the dp_receiveFrom command.  The \fIsockId\fR argument
must represent a connectionless socket (i.e., created using the
dp_connect command using the \fI-udp\fR option).  Dp_sendTo
uses \fIsockId\fR as the transmitting socket.

.TP
\fBdp_receiveFrom\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fR? ?\fI-noaddr\fR?

Receives a message that was sent from another process that used the
dp_sendTo command.  Normally, a list of two values is returned.  The
first value is the address (an \fIaddr\fR handle) of the sending
process, and the second element is the message received.  If the
\fI-noaddr\fR flag is specified, the address of the sending process is
ommitted.  If the socket is in non-blocking mode (see dp_socketOption)
and not readable, -1 will be returned.  Otherwise, this command will
block until a message arrives.  If \fI-peek\fR is specified, the
message is read from the socket but not removed from the queue.  If
\fInumBytes\fR is specified, at most this many bytes of the message is
returned.  Because of the way connectionless sockets work, the rest of
the datagram will be discarded from the queue, regardless of the value
of \fInumBytes\fR, unless \fI-peek\fR is specified.

The \fIsockId\fR argument must represent a connectionless socket
(i.e., created using the dp_connect command using the
\fI-udp\fR option).  The dp_receiveFrom command uses the
connectionless socket, \fIsockId\fR, as the reception socket.

.SH SEE ALSO
Tcl-DP, socket(2), accept(2), connect(2), listen(2), dp_address(n),
Tcl, dp_filehandler(n), dp_socketOption(n)

.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu),
.br
Steve Yen (syen@cs.berkeley.edu), and
.br
Lou Salkind (salkind@deshaw.com)
'\"@endhelp
'\"@help: dp/rpc
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_RPC, dp_RDO, dp_MakeRPCClient, dp_MakeRPCServer, dp_CloseRPC, dp_CancelRPC,
dp_Host, dp_SetCheckCmd
.sp
  \- Tcl-DP remote procedure call support
.SH DESCRIPTION
.LP

The commands described here are part of the Tcl-DP (Tcl
Distributed Programming) extension to Tcl/Tk.  These Tcl/Tk
commands provide support for Tcl/Tk remote procedure calls
(RPC's).
.SH COMMANDS
.TP
\fBdp_MakeRPCServer \fI?port? ?loginProc? ?cmdCheckProc? ?retFile?\fR

Dp_MakeRPCServer arranges for the current Tcl/Tk interpreter to accept
RPC client connections.  Clients will connect to the server at the
given \fIport\fR (see dp_MakeRPCClient below).  The \fIport\fR should
be an unused port or 0 if you want a port number automatically chosen
for you.  If \fIport\fR is not supplied, a default value of 0 is used.
The port number used is returned unless \fIretFile\fP in non-zero,
in which case both the file identifier and the port number for the
listening socket is returned.

\fILoginProc\fR can be used to refuse connection
attempts by unauthorized hosts.  When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.  The default \fIloginProc\fR is
"dp_CheckHost."

Dp_CheckHost checks an internal access control list
to verify that the host is allowed to connect.  Host may be added
to (or deleted from) this access control using the dp_Host
command described below.

When a host attempts to connect,
\fIloginProc\fR is called with the internet address of the connecting
party as an argument.  If \fIloginProc\fR calls the Tcl error
function during evaluation, the connection is refused and the error
message is returned to the client.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over an RPC channel.  When an RPC request is
received, the requested command will be passed as a string to
\fIcmdCheckProc\fR before evaluation.  If \fIcmdCheckProc\fR is the
keyword "none," no command checking is performed.  \fICmdCheckProc\fR
defaults to "none." See dp_SetCheckCmd for more details on security.

.TP
\fBdp_Host \fI[+/-]host\fR

This command is used to modify the internal access control list
used in Tcl-DP to determine if hosts are authorized to connect to this
server.  For backwards compatibilty, all hosts are initially allowed to
connect.  Dp_Host is functionally similar to xhost(1).
New additions to the access control list override previous directives.
Dp_Host accepts the following options:

.RS
.TP
\fBdp_Host \fI+[name]\fR
The given \fIname\fP is added to the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  The pattern matching is the same as used in the
Tcl "string match" command.  If \fIname\fP is not supplied, any
host may connect (the default).

.TP
\fBdp_Host \fI-[name]\fR
The given \fIname\fP is removed from the list allowed to connect to the
server.  The name can be a host name or a pattern or internet addresses
(e.g., 128.32.149.*).  Existing connections are not broken, but new
connection attempts will be denied.  The pattern matching is the same
as used in the Tcl "string match" command.  If \fIname\fP is not
supplied, all connections will be refused.

.RE

.TP
\fBdp_MakeRPCClient \fIhost port ?cmdCheckProc?\fR

\fBdp_MakeRPCClient\fP establishes an RPC connection to the RPC server
at the \fIport\fR running on the machine with the \fIhost\fR network
address.  \fIPort\fP can be specified either by number or by service
name (see services(5) for further information on specifying services by
name).  A \fIsockId\fR representing the RPC connection is returned.
This \fIsockId\fR is refered to below as a \fIpeer\fR, since RPC
connections are peer to peer.  The transmission protocol used for
Tcl-DP RPC services is TCP/IP.

\fICmdCheckProc\fR, if supplied, can be used to intercept the execution
of unauthorized commands over the connection.  See dp_MakeRPCServer
and dp_SetCheckCmd for more details.

.TP
\fBdp_SetCheckCmd \fIpeer cmdCheckProc\fR

\fBDp_SetCheckCmd\fR arranges for \fIcmdCheckProc\fR to be called when
an RPC/RDO request comes from the specified \fIpeer\fR.
\fICmdCheckProc\fR is passed the inbound RPC/RDO request as its args
(\fIcmdCheckProc\fR should accept multiple arguments).
If \fIcmdCheckProc\fR returns normally, the requested command is evaluated
normally (i.e., no further checking).  If \fIcmdCheckProc\fR returns
with the "continue" code (see the Tcl return command for how to return
with a special code) then the requested command will be executed, but
any commands it issues will also be checked.  If \fIcmdCheckProc\fR
returns with a "return" code, then the result of \fIcmdCheckProc\fR is
returned as the result of the requested command.  If \fIcmdCheckProc\fR
returns with an "error" code, the requested command will not be
executed, and the error message from the check command will be used as
the error message from the requested command.  Any other return codes
of \fIcmdCheckProc\fR ("break", etc.) will prevent the requested
command from being executed, and an error message will be sent to the
caller.

For example, the following procedure allows the commands "Safe" and
"puts" to be executed without checking, "set" to be called with
one argument (i.e., read, but not write, variables), and "eval" to
be used with any resulting evaluations checked.

.DS
proc MyCheck {cmd args} {
    set argc [llength $args]
    case $cmd in {
	Safe   	{return}
	puts	{return}
	eval	{return -code continue}
	set	{
		    if {$argc == 2} {
			error "Permission to set variables denied"
		    } else {
			return
		    }
		}
    }
    return -code break
}
.DE


.TP
\fBdp_CloseRPC \fIpeer\fR
.br
.sp
This command arranges a clean closing of an RPC connection, on
both sides of the connection.
.TP
\fBdp_CancelRPC ?\fIpeer\fR? ?\fIpeer\fR? ...
.br
.sp
This command cancels current RPC invocations that are presently
waiting for a return value.  If no \fIpeer\fRs are specified,
then all current but waiting RPC invocations are canceled.
These cancelled RPC's will return an error.
.TP
\fBdp_RPC \fIpeer\fR ?\fI-events events\fR? 
.br
?\fI-timeout millisecs\fR ??\fI-timeoutReturn callback\fR???
.br
\fIcommand\fR ?\fIargs ...\fR?

This command arranges for the Tcl/Tk \fIcommand\fR and its
\fIargs\fR to be evaluated in the remote Tcl/Tk interpreter,
using the RPC connection specified by \fIpeer\fR.  Before the
remote evaluation of \fIcommand\fR and \fIargs\fR, the global
variable rpcFile in the remote Tcl/Tk interpreter is bound
to the \fIpeer\fR whose request is being evaluated.  (Thus, in
your \fIcommand\fR, you can access the rpcFile variable to
figure out the RPC peer that originated the \fIcommand\fR.)

The \fI-events\fR flag to the dp_RPC command lets you specify
which events should be handled while waiting for the return value
of a RPC.  The \fI-events\fR parameter should be a list of the
tokens \fIX\fR, \fIrpc\fR, \fIfile\fR, \fItimer\fR, \fIidle\fR,
\fIall\fR, or \fInone\fR, where each token represents an event
type.  Presently, a \fIrpc\fR token is the same as a \fIfile\fR
token.  The \fInone\fR token is the default.  See
Tk_DoOneEvent(3) for more information on these event types.

The \fI-timeout\fR flag to the dp_RPC command lets you specify
an integer millisecond timeout value for the RPC, which by
default will return an error value if the timeout occurs.
Supplying a \fI-timeout\fR value of zero or less than zero means
that no timeout will be checked.  If you want to use timeouts,
you must also specify \fI-events\fR to be anything but none.

The \fI-timeoutReturn\fR callback, if specified, is evaluated
when a timeout occurs.  The callback is evaluated with the
\fIpeer\fR identifier appended.  If a timeout occurs and a
\fI-timeoutReturn\fR callback was specified, then the return
value of the callback is used as the return value of the
timed-out dp_RPC.  Otherwise the timed-out RPC returns an
error.
.TP
\fBdp_RDO \fIpeer\fR ?\fI-callback resultCallback\fR?
?\fI-onerror errorCallback\fR? \fIcommand\fR ?\fIargs ...\fR?

This command arranges for \fIcommand\fR and its \fIargs\fR to be
remotely evaluated in the Tcl/Tk interpreter whose connection is
specified by \fIpeer\fR argument.  Unlike the dp_RPC command,
the dp_RDO command does not wait for a return value to be
returned by the remote Tcl/Tk interpreter, but returns
immediately.  Before the remote evaluation, the global variable
rpcFile in the remote Tcl/Tk interpreter is set as
described above for the dp_RPC command.

You can use the \fIresultCallback\fR parameter of dp_RDO to
asynchronously retrieve the value of the remote evaluation.  If
specified, the \fIcallback\fR command appended with the return
value of the remote \fIcommand\fR evaluation is evaluated in the
local Tcl/Tk interpreter.

If you specify an \fIerrorCallback\fR and an error occurs during the
remote evaluation, \fIerrorCallback\fP will be evaluated with the error
message as a parameter.  The default value for \fIerrorCallback\fR is
tkerror.  If you wish to ignore errors generated during RDO
evaluation, specify the keyword "none" as \fIerrorCallback\fR.

.SH EXAMPLES

The following example creates an RPC server to return unique 
integer identifiers.  
On the host zonker (the server):
.DS
	dp_MakeRPCServer 4545

	dp_Host -
	dp_Host +128.32.149.*
	set myId 0
	proc GetId {} {global myId; incr myId; return $myId}
.DE

On host linus (the client, address 128.32.149.59):
.DS
	set server [dp_MakeRPCClient zonker 4545]
	dp_RPC $server GetId
.DE

On a host not on the 128.32.149 subnet:
.DS
	set server [dp_MakeRPCClient zonker 4545]
	error -> Connection refused: Host not authorized
.DE

.SH "SEE ALSO"
.PP
Tcl-DP(n) dp_connect(n) dp_filehandler(n) dpwish(1)

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/send
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: Tcl-DP connection management
dp_connect, dp_shutdown, dp_accept \- Tcl-DP connection management
.sp
dp_send, dp_receive \- Stream transmission over TCP sockets
.sp
dp_packetSend, dp_packetReceive \- Message transmission using TCP sockets
.sp
dp_sendTo, dp_receiveFrom \- Message transmission using UDP sockets
.SH DESCRIPTION
.LP

This manual page describes the Tcl commands for managing basic network
connections provided by the Tcl-DP (Tcl Distributed Programming)
extension to Tcl/Tk.  These commands provide basically the same level
of service to Tcl/Tk as the UNIX C socket(2) related system
calls. The manual page is divided into two sections.  The first
section describes the commands needed to set up and shut down
connections.  The second section describes various commands for
transmitting data between machines.

All connection management commands return and take as arguments
identifiers called \fIsockId\fR's.  (A \fIsockId\fR represents a UNIX
file descriptor, which UNIX uses to represent both open
files and open sockets.  A socket is an endpoint of network
communication.)  \fISockId\fR's are identical to the identifiers
manipulated by the read, gets, puts, eof, and
close file management commands of Tcl.

.SH "CONNECTION SETUP AND TEAR DOWN"

Three basic commands are useful for connection setup and tear down:
dp_connect, dp_accept, and dp_shutdown.
Dp_connect is used to create either internet (INET) or unix domain
TCP/IP sockets, or INET based UDP/IP sockets.  If given the
\fI-server\fR flag, dp_connect creates a \fIlistening\fP socket
which other clients can connect to.  
When a remote machine attempts to connect to this listening
socket, it becomes readable.  Servers use the
dp_accept command to accept the connection, which creates a
new \fIsockId\fR connected to the client as a side effect while the
listening socket continues to listen for new connections.  Client
may close half of a duplex connection using the dp_shutdown
command.  When clients wish to terminate a connection, the tcl
close command should be used.

The rest of this sections describes the various options for
dp_connect, dp_accept, and dp_shutdown.

.TP
\fBdp_connect \fI-server port ?-linger? ?-reuseAddr?\fR

In this form, dp_connect creates a listening (server) socket.
This listening socket will listen for client connections on the
specified \fIport\fR number and will become readable whenever a client
process attempts a connection.  The creator of the listening socket may
then dp_accept the client connection.  (See the dp_accept
command below.  Also see the dp_filehandler and
dp_isready manual pages for testing when a socket becomes readable.)

The \fIport\fR argument, which can be a number or
service name (see services(5) for more information),
must specify an unused port number.  If
the \fIport\fR number argument is empty or 0, the dp_connect
command will automatically select an unused port number.

The -linger flag changes the behavior of the close function on this
socket.  By default, the socket will close and any unsent data in the
socket will be discarded.  If -linger is specified, close will return
immediately and the system will attempt to deliver any data remaining
in the socket.

The -reuseAddr, if specified, instructs the system to allow reuse of the
specified port number.

This form of the dp_connect command returns a
list of two values.  The first value is the \fIsockId\fR that
represents the created listening socket.  The second value is the
port number that the socket is listening to.

.TP
\fBdp_connect \fI-server\fR \fIpath\fR

This command creates up a UNIX domain listening socket.  This
command is identical to the one above except that a UNIX domain
socket is created using an address specified by \fIpath\fR.

.TP
\fBdp_connect \fIhost\fR \fIport\fR

This command creates a TCP protocol INET socket and connects it
to a remote server process.  The remote server process should be
running on the machine given by the \fIhost\fR network address
and should be listening for and accepting client connections on
the given \fIport\fR.
\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
This command returns a list of two
values: a \fIsockId\fR to represent the newly created socket and
the port number used for the connection.

.TP
\fBdp_connect \fIpath\fR

This command creates a TCP protocol UNIX domain socket and connects it
to the UNIX domain socket specified by path.  It is otherwise identical
to dp_connect \fIhost\fR \fIport\fR.

.TP
\fBdp_connect \fI-udp\fR \fI?port?\fR

In this form, dp_connect creates a UDP protocol INET socket
(a connectionless socket).  Since this socket is connectionless, only the
dp_sendTo and dp_receiveFrom commands described below may
be used with this socket to transmit and receive data.

\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
If the \fIport\fR argument is missing or 0, the system
will select an unused port number for you.  This command
returns a list containing a \fIsockId\fR (that represents the
created socket) and the \fIport\fR number (where the socket will
receive and transmit data using the UDP protocol).

.TP
\fBdp_accept \fIsockId\fR

The \fIsockId\fR argument must represent a listening (server)
socket (i.e., a \fIsockId\fR returned by the dp_connect
command that was called with the \fI-server\fR flag).  If this
listening socket is readable (i.e., a client process is
attempting to connect), the dp_accept command creates a new
socket that is connected to the client process.  If the listening
socket is not readable, th dp_accept command will block until
a client process attempts to connect to the listening socket.
The listening socket (represented by the \fIsockId\fR argument)
will remain a listening socket.  This command returns a new
\fIsockId\fR to represent the newly created socket that is
connected to the accepted client process, and the internet address
of the connecting party (eg, "128.32.149.117").  If the connection
occurs on a Unix domain socket, the second element of the
return value will be "0.0.0.0"

.TP 
\fBdp_shutdown \fIsockId\fR \fIcode\fR

Shutdown a socket for reading, writing, or both.  This command is
not the same as close, which you should use for truly
closing the socket.  The \fIsockId\fR argument must represent a
file descriptor that represents a socket, not an open file.

If \fIcode\fR is \fB"0"\fR, \fB"read"\fR or \fB"receives"\fR then
further reception of data from \fIsockId\fR will be disabled.

If \fIcode\fR is \fB"1"\fR, \fB"write"\fR or \fB"sends"\fR, then
further sending of data using \fIsockId\fR will be disabled (and
an EOF will be automatically sent down the socket).

If \fIcode\fR is \fB"2"\fR, \fB"all"\fR or \fB"both"\fR, then
further reception and sending of data on \fIsockId\fR will be
disabled.

As a side effect, the appropriate filehandlers previously
installed on the \fIsockId\fR will be deleted.  (See the
dp_filehandler man page.)

.SH "TRANSMITTING DATA"

Four pairs of commands are useful for sending and receiving data on
sockets.  The Tcl functions gets and puts can be used to
read and write string data to and from sockets.  These functions are
appropriate for communicating with text based programs (e.g., telnet).
Applications can detect closed connection when the Tcl command
eof \fIsockId\fR returns 1.

Dp_send and dp_receive are similar to gets and puts, but have the side
effect of automatically detecting closed connections.  When these
functions detect a closed connection, they remove any previously
instantiated file handlers for \fIsockId\fR and close the socket.
Applications can install callbacks associated with this "close-file"
event using the dp_atclose command.  Dp_send and dp_receive also
support non blocking input and are more efficient than gets and puts.

Dp_sendTo and dp_receiveFrom are used to send and receive data on
connectionless sockets (i.e., created using the dp_connect command
using the \fI-udp\fR option).  Dp_receiveFrom also supports non
blocking input and peeking (i.e., reading data from a socket without
advancing the file pointer).

Dp_packetSend and dp_packetReceive provide a message based protocol for
TCP sockets.  The extra protocol is necessary since TCP provides a
stream interface which does not preserve message boundaries.  The
protocol attaches an 8 byte binary header on the message containing a
magic number and the length of the message.  Due to the presence of
this header, applications should be careful about intermixing calls to
dp_packetSend and dp_packetReceive with other data transmission calls.

The options for each command are described below.

.TP
\fBdp_send\fR \fIsockId\fR \fImessage\fR ?\fInonewline\fP?

Writes the string \fImessage\fR to a connected socket.  Like the Tcl
puts command, dp_send normally outputs a newline character after
\fImessage\fR, but this feature may be suppressed by specifying the
\fInonewline\fP switch.

If insufficient buffer space exists to send \fImessage\fR, this command
will block until message is transmitted unless the socket is in
non-blocking mode (see dp_socketOption).  In this case, only part
of \fImessage\fR is transmitted.  The return value is the number of
characters sent.  The rest of the message can be sent when the socket
becomes writeable.  See the manual pages for the dp_filehandler and
dp_isready commands for testing when a socket becomes writeable.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a value of 0.

.TP
\fBdp_receive\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fP?

This command reads the immediately available data from \fIsockId\fR.
If \fInumBytes\fR is specified, at most this many bytes of the
immediately available data on will be returned.  If the socket is
non-blocking (see dp_socketOption), all data available on the socket
will be returned  -- should no data be available, dp_receive will
return a null string.

If the socket is in blocking mode (the default), dp_receive will block
until input is received.  If \fI-peek\fP is specified, the data present
on the socket is returned but not consumed, so that a subsequent
dp_receive call will see the same data.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a null string.

.TP
\fBdp_packetSend\fR \fIsockId\fR \fImessage\fR

Sends the string \fImessage\fR through the socket (\fIsockId\fR) to the
connected, remote process.  This command is similar to dp_sendTo,
except that it works with TCP sockets, so message delivery is
reliable.  It differs from dp_send in that message boundaries are
preserved.  When the remote socket calls dp_packetReceive, it will
never receive a partial \fImessage\fR.  The receiver \fImust\fP use
dp_packetReceive to read the message.

\fINotes:\fR
Message boundaries are preserved by attaching an 8 byte binary header
onto the message, half of which is a magic number indicating
a packet, and half of which indicates the size of the message.
Because this header represents binary data, care must be taken
if puts or dp_send calls are intermixed with dp_packetSend on the
same channel.

If dp_packetSend is used with non-blocking I/O mode and the send would
have blocked, dp_packetSend returns the number of bytes transmitted.
It is up to the caller to transmit the remaining characters in the
string using dp_send with the nonewline option (\fInot\fP
dp_packetSend) when the socket becomes writeable.  See dp_filehandler and
dp_isready manual pages for testing when a socket becomes writeable.)

.TP
\fBdp_packetReceive\fR \fIsockId\fR ?\fI-peek\fP?

Receives a single message from the connection (represented by the
\fIsockId\fR).  The connected, remote process which sent the message
must use the dp_packetSend command.  Dp_packetReceive differs from
dp_receive in that message boundaries are preserved.  If the entire
message is available, the return value is the message received.  If
only part of the packet is available when dp_packetReceive is called, a
zero length string is returned.  See the note in dp_packetSend above
about using dp_packetReceive and gets on the same channel.

If \fI-peek\fP is specified, the data present on the socket is returned
but not consumed, so that a subsequent dp_packetReceive calls will
see  the same data.

If no data is available at the socket and the socket is in non blocking
mode, a zero length string is returned.  Otherwise, this operation
blocks until at least some data (but possibly not the entire packet)
is received.

.TP
\fBdp_sendTo\fR \fIsockId\fR \fImessage\fR \fIaddr\fR

Sends the string \fImessage\fR to the process at the destination
address specified by the \fIaddr\fR handle.  The \fIaddr\fR handle must
be created using the dp_address command or taken from the return
value of the dp_receiveFrom command.  The \fIsockId\fR argument
must represent a connectionless socket (i.e., created using the
dp_connect command using the \fI-udp\fR option).  Dp_sendTo
uses \fIsockId\fR as the transmitting socket.

.TP
\fBdp_receiveFrom\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fR? ?\fI-noaddr\fR?

Receives a message that was sent from another process that used the
dp_sendTo command.  Normally, a list of two values is returned.  The
first value is the address (an \fIaddr\fR handle) of the sending
process, and the second element is the message received.  If the
\fI-noaddr\fR flag is specified, the address of the sending process is
ommitted.  If the socket is in non-blocking mode (see dp_socketOption)
and not readable, -1 will be returned.  Otherwise, this command will
block until a message arrives.  If \fI-peek\fR is specified, the
message is read from the socket but not removed from the queue.  If
\fInumBytes\fR is specified, at most this many bytes of the message is
returned.  Because of the way connectionless sockets work, the rest of
the datagram will be discarded from the queue, regardless of the value
of \fInumBytes\fR, unless \fI-peek\fR is specified.

The \fIsockId\fR argument must represent a connectionless socket
(i.e., created using the dp_connect command using the
\fI-udp\fR option).  The dp_receiveFrom command uses the
connectionless socket, \fIsockId\fR, as the reception socket.

.SH SEE ALSO
Tcl-DP, socket(2), accept(2), connect(2), listen(2), dp_address(n),
Tcl, dp_filehandler(n), dp_socketOption(n)

.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu),
.br
Steve Yen (syen@cs.berkeley.edu), and
.br
Lou Salkind (salkind@deshaw.com)
'\"@endhelp
'\"@help: dp/sendTo
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: Tcl-DP connection management
dp_connect, dp_shutdown, dp_accept \- Tcl-DP connection management
.sp
dp_send, dp_receive \- Stream transmission over TCP sockets
.sp
dp_packetSend, dp_packetReceive \- Message transmission using TCP sockets
.sp
dp_sendTo, dp_receiveFrom \- Message transmission using UDP sockets
.SH DESCRIPTION
.LP

This manual page describes the Tcl commands for managing basic network
connections provided by the Tcl-DP (Tcl Distributed Programming)
extension to Tcl/Tk.  These commands provide basically the same level
of service to Tcl/Tk as the UNIX C socket(2) related system
calls. The manual page is divided into two sections.  The first
section describes the commands needed to set up and shut down
connections.  The second section describes various commands for
transmitting data between machines.

All connection management commands return and take as arguments
identifiers called \fIsockId\fR's.  (A \fIsockId\fR represents a UNIX
file descriptor, which UNIX uses to represent both open
files and open sockets.  A socket is an endpoint of network
communication.)  \fISockId\fR's are identical to the identifiers
manipulated by the read, gets, puts, eof, and
close file management commands of Tcl.

.SH "CONNECTION SETUP AND TEAR DOWN"

Three basic commands are useful for connection setup and tear down:
dp_connect, dp_accept, and dp_shutdown.
Dp_connect is used to create either internet (INET) or unix domain
TCP/IP sockets, or INET based UDP/IP sockets.  If given the
\fI-server\fR flag, dp_connect creates a \fIlistening\fP socket
which other clients can connect to.  
When a remote machine attempts to connect to this listening
socket, it becomes readable.  Servers use the
dp_accept command to accept the connection, which creates a
new \fIsockId\fR connected to the client as a side effect while the
listening socket continues to listen for new connections.  Client
may close half of a duplex connection using the dp_shutdown
command.  When clients wish to terminate a connection, the tcl
close command should be used.

The rest of this sections describes the various options for
dp_connect, dp_accept, and dp_shutdown.

.TP
\fBdp_connect \fI-server port ?-linger? ?-reuseAddr?\fR

In this form, dp_connect creates a listening (server) socket.
This listening socket will listen for client connections on the
specified \fIport\fR number and will become readable whenever a client
process attempts a connection.  The creator of the listening socket may
then dp_accept the client connection.  (See the dp_accept
command below.  Also see the dp_filehandler and
dp_isready manual pages for testing when a socket becomes readable.)

The \fIport\fR argument, which can be a number or
service name (see services(5) for more information),
must specify an unused port number.  If
the \fIport\fR number argument is empty or 0, the dp_connect
command will automatically select an unused port number.

The -linger flag changes the behavior of the close function on this
socket.  By default, the socket will close and any unsent data in the
socket will be discarded.  If -linger is specified, close will return
immediately and the system will attempt to deliver any data remaining
in the socket.

The -reuseAddr, if specified, instructs the system to allow reuse of the
specified port number.

This form of the dp_connect command returns a
list of two values.  The first value is the \fIsockId\fR that
represents the created listening socket.  The second value is the
port number that the socket is listening to.

.TP
\fBdp_connect \fI-server\fR \fIpath\fR

This command creates up a UNIX domain listening socket.  This
command is identical to the one above except that a UNIX domain
socket is created using an address specified by \fIpath\fR.

.TP
\fBdp_connect \fIhost\fR \fIport\fR

This command creates a TCP protocol INET socket and connects it
to a remote server process.  The remote server process should be
running on the machine given by the \fIhost\fR network address
and should be listening for and accepting client connections on
the given \fIport\fR.
\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
This command returns a list of two
values: a \fIsockId\fR to represent the newly created socket and
the port number used for the connection.

.TP
\fBdp_connect \fIpath\fR

This command creates a TCP protocol UNIX domain socket and connects it
to the UNIX domain socket specified by path.  It is otherwise identical
to dp_connect \fIhost\fR \fIport\fR.

.TP
\fBdp_connect \fI-udp\fR \fI?port?\fR

In this form, dp_connect creates a UDP protocol INET socket
(a connectionless socket).  Since this socket is connectionless, only the
dp_sendTo and dp_receiveFrom commands described below may
be used with this socket to transmit and receive data.

\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
If the \fIport\fR argument is missing or 0, the system
will select an unused port number for you.  This command
returns a list containing a \fIsockId\fR (that represents the
created socket) and the \fIport\fR number (where the socket will
receive and transmit data using the UDP protocol).

.TP
\fBdp_accept \fIsockId\fR

The \fIsockId\fR argument must represent a listening (server)
socket (i.e., a \fIsockId\fR returned by the dp_connect
command that was called with the \fI-server\fR flag).  If this
listening socket is readable (i.e., a client process is
attempting to connect), the dp_accept command creates a new
socket that is connected to the client process.  If the listening
socket is not readable, th dp_accept command will block until
a client process attempts to connect to the listening socket.
The listening socket (represented by the \fIsockId\fR argument)
will remain a listening socket.  This command returns a new
\fIsockId\fR to represent the newly created socket that is
connected to the accepted client process, and the internet address
of the connecting party (eg, "128.32.149.117").  If the connection
occurs on a Unix domain socket, the second element of the
return value will be "0.0.0.0"

.TP 
\fBdp_shutdown \fIsockId\fR \fIcode\fR

Shutdown a socket for reading, writing, or both.  This command is
not the same as close, which you should use for truly
closing the socket.  The \fIsockId\fR argument must represent a
file descriptor that represents a socket, not an open file.

If \fIcode\fR is \fB"0"\fR, \fB"read"\fR or \fB"receives"\fR then
further reception of data from \fIsockId\fR will be disabled.

If \fIcode\fR is \fB"1"\fR, \fB"write"\fR or \fB"sends"\fR, then
further sending of data using \fIsockId\fR will be disabled (and
an EOF will be automatically sent down the socket).

If \fIcode\fR is \fB"2"\fR, \fB"all"\fR or \fB"both"\fR, then
further reception and sending of data on \fIsockId\fR will be
disabled.

As a side effect, the appropriate filehandlers previously
installed on the \fIsockId\fR will be deleted.  (See the
dp_filehandler man page.)

.SH "TRANSMITTING DATA"

Four pairs of commands are useful for sending and receiving data on
sockets.  The Tcl functions gets and puts can be used to
read and write string data to and from sockets.  These functions are
appropriate for communicating with text based programs (e.g., telnet).
Applications can detect closed connection when the Tcl command
eof \fIsockId\fR returns 1.

Dp_send and dp_receive are similar to gets and puts, but have the side
effect of automatically detecting closed connections.  When these
functions detect a closed connection, they remove any previously
instantiated file handlers for \fIsockId\fR and close the socket.
Applications can install callbacks associated with this "close-file"
event using the dp_atclose command.  Dp_send and dp_receive also
support non blocking input and are more efficient than gets and puts.

Dp_sendTo and dp_receiveFrom are used to send and receive data on
connectionless sockets (i.e., created using the dp_connect command
using the \fI-udp\fR option).  Dp_receiveFrom also supports non
blocking input and peeking (i.e., reading data from a socket without
advancing the file pointer).

Dp_packetSend and dp_packetReceive provide a message based protocol for
TCP sockets.  The extra protocol is necessary since TCP provides a
stream interface which does not preserve message boundaries.  The
protocol attaches an 8 byte binary header on the message containing a
magic number and the length of the message.  Due to the presence of
this header, applications should be careful about intermixing calls to
dp_packetSend and dp_packetReceive with other data transmission calls.

The options for each command are described below.

.TP
\fBdp_send\fR \fIsockId\fR \fImessage\fR ?\fInonewline\fP?

Writes the string \fImessage\fR to a connected socket.  Like the Tcl
puts command, dp_send normally outputs a newline character after
\fImessage\fR, but this feature may be suppressed by specifying the
\fInonewline\fP switch.

If insufficient buffer space exists to send \fImessage\fR, this command
will block until message is transmitted unless the socket is in
non-blocking mode (see dp_socketOption).  In this case, only part
of \fImessage\fR is transmitted.  The return value is the number of
characters sent.  The rest of the message can be sent when the socket
becomes writeable.  See the manual pages for the dp_filehandler and
dp_isready commands for testing when a socket becomes writeable.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a value of 0.

.TP
\fBdp_receive\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fP?

This command reads the immediately available data from \fIsockId\fR.
If \fInumBytes\fR is specified, at most this many bytes of the
immediately available data on will be returned.  If the socket is
non-blocking (see dp_socketOption), all data available on the socket
will be returned  -- should no data be available, dp_receive will
return a null string.

If the socket is in blocking mode (the default), dp_receive will block
until input is received.  If \fI-peek\fP is specified, the data present
on the socket is returned but not consumed, so that a subsequent
dp_receive call will see the same data.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a null string.

.TP
\fBdp_packetSend\fR \fIsockId\fR \fImessage\fR

Sends the string \fImessage\fR through the socket (\fIsockId\fR) to the
connected, remote process.  This command is similar to dp_sendTo,
except that it works with TCP sockets, so message delivery is
reliable.  It differs from dp_send in that message boundaries are
preserved.  When the remote socket calls dp_packetReceive, it will
never receive a partial \fImessage\fR.  The receiver \fImust\fP use
dp_packetReceive to read the message.

\fINotes:\fR
Message boundaries are preserved by attaching an 8 byte binary header
onto the message, half of which is a magic number indicating
a packet, and half of which indicates the size of the message.
Because this header represents binary data, care must be taken
if puts or dp_send calls are intermixed with dp_packetSend on the
same channel.

If dp_packetSend is used with non-blocking I/O mode and the send would
have blocked, dp_packetSend returns the number of bytes transmitted.
It is up to the caller to transmit the remaining characters in the
string using dp_send with the nonewline option (\fInot\fP
dp_packetSend) when the socket becomes writeable.  See dp_filehandler and
dp_isready manual pages for testing when a socket becomes writeable.)

.TP
\fBdp_packetReceive\fR \fIsockId\fR ?\fI-peek\fP?

Receives a single message from the connection (represented by the
\fIsockId\fR).  The connected, remote process which sent the message
must use the dp_packetSend command.  Dp_packetReceive differs from
dp_receive in that message boundaries are preserved.  If the entire
message is available, the return value is the message received.  If
only part of the packet is available when dp_packetReceive is called, a
zero length string is returned.  See the note in dp_packetSend above
about using dp_packetReceive and gets on the same channel.

If \fI-peek\fP is specified, the data present on the socket is returned
but not consumed, so that a subsequent dp_packetReceive calls will
see  the same data.

If no data is available at the socket and the socket is in non blocking
mode, a zero length string is returned.  Otherwise, this operation
blocks until at least some data (but possibly not the entire packet)
is received.

.TP
\fBdp_sendTo\fR \fIsockId\fR \fImessage\fR \fIaddr\fR

Sends the string \fImessage\fR to the process at the destination
address specified by the \fIaddr\fR handle.  The \fIaddr\fR handle must
be created using the dp_address command or taken from the return
value of the dp_receiveFrom command.  The \fIsockId\fR argument
must represent a connectionless socket (i.e., created using the
dp_connect command using the \fI-udp\fR option).  Dp_sendTo
uses \fIsockId\fR as the transmitting socket.

.TP
\fBdp_receiveFrom\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fR? ?\fI-noaddr\fR?

Receives a message that was sent from another process that used the
dp_sendTo command.  Normally, a list of two values is returned.  The
first value is the address (an \fIaddr\fR handle) of the sending
process, and the second element is the message received.  If the
\fI-noaddr\fR flag is specified, the address of the sending process is
ommitted.  If the socket is in non-blocking mode (see dp_socketOption)
and not readable, -1 will be returned.  Otherwise, this command will
block until a message arrives.  If \fI-peek\fR is specified, the
message is read from the socket but not removed from the queue.  If
\fInumBytes\fR is specified, at most this many bytes of the message is
returned.  Because of the way connectionless sockets work, the rest of
the datagram will be discarded from the queue, regardless of the value
of \fInumBytes\fR, unless \fI-peek\fR is specified.

The \fIsockId\fR argument must represent a connectionless socket
(i.e., created using the dp_connect command using the
\fI-udp\fR option).  The dp_receiveFrom command uses the
connectionless socket, \fIsockId\fR, as the reception socket.

.SH SEE ALSO
Tcl-DP, socket(2), accept(2), connect(2), listen(2), dp_address(n),
Tcl, dp_filehandler(n), dp_socketOption(n)

.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu),
.br
Steve Yen (syen@cs.berkeley.edu), and
.br
Lou Salkind (salkind@deshaw.com)
'\"@endhelp
'\"@help: dp/shutdown
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: Tcl-DP connection management
dp_connect, dp_shutdown, dp_accept \- Tcl-DP connection management
.sp
dp_send, dp_receive \- Stream transmission over TCP sockets
.sp
dp_packetSend, dp_packetReceive \- Message transmission using TCP sockets
.sp
dp_sendTo, dp_receiveFrom \- Message transmission using UDP sockets
.SH DESCRIPTION
.LP

This manual page describes the Tcl commands for managing basic network
connections provided by the Tcl-DP (Tcl Distributed Programming)
extension to Tcl/Tk.  These commands provide basically the same level
of service to Tcl/Tk as the UNIX C socket(2) related system
calls. The manual page is divided into two sections.  The first
section describes the commands needed to set up and shut down
connections.  The second section describes various commands for
transmitting data between machines.

All connection management commands return and take as arguments
identifiers called \fIsockId\fR's.  (A \fIsockId\fR represents a UNIX
file descriptor, which UNIX uses to represent both open
files and open sockets.  A socket is an endpoint of network
communication.)  \fISockId\fR's are identical to the identifiers
manipulated by the read, gets, puts, eof, and
close file management commands of Tcl.

.SH "CONNECTION SETUP AND TEAR DOWN"

Three basic commands are useful for connection setup and tear down:
dp_connect, dp_accept, and dp_shutdown.
Dp_connect is used to create either internet (INET) or unix domain
TCP/IP sockets, or INET based UDP/IP sockets.  If given the
\fI-server\fR flag, dp_connect creates a \fIlistening\fP socket
which other clients can connect to.  
When a remote machine attempts to connect to this listening
socket, it becomes readable.  Servers use the
dp_accept command to accept the connection, which creates a
new \fIsockId\fR connected to the client as a side effect while the
listening socket continues to listen for new connections.  Client
may close half of a duplex connection using the dp_shutdown
command.  When clients wish to terminate a connection, the tcl
close command should be used.

The rest of this sections describes the various options for
dp_connect, dp_accept, and dp_shutdown.

.TP
\fBdp_connect \fI-server port ?-linger? ?-reuseAddr?\fR

In this form, dp_connect creates a listening (server) socket.
This listening socket will listen for client connections on the
specified \fIport\fR number and will become readable whenever a client
process attempts a connection.  The creator of the listening socket may
then dp_accept the client connection.  (See the dp_accept
command below.  Also see the dp_filehandler and
dp_isready manual pages for testing when a socket becomes readable.)

The \fIport\fR argument, which can be a number or
service name (see services(5) for more information),
must specify an unused port number.  If
the \fIport\fR number argument is empty or 0, the dp_connect
command will automatically select an unused port number.

The -linger flag changes the behavior of the close function on this
socket.  By default, the socket will close and any unsent data in the
socket will be discarded.  If -linger is specified, close will return
immediately and the system will attempt to deliver any data remaining
in the socket.

The -reuseAddr, if specified, instructs the system to allow reuse of the
specified port number.

This form of the dp_connect command returns a
list of two values.  The first value is the \fIsockId\fR that
represents the created listening socket.  The second value is the
port number that the socket is listening to.

.TP
\fBdp_connect \fI-server\fR \fIpath\fR

This command creates up a UNIX domain listening socket.  This
command is identical to the one above except that a UNIX domain
socket is created using an address specified by \fIpath\fR.

.TP
\fBdp_connect \fIhost\fR \fIport\fR

This command creates a TCP protocol INET socket and connects it
to a remote server process.  The remote server process should be
running on the machine given by the \fIhost\fR network address
and should be listening for and accepting client connections on
the given \fIport\fR.
\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
This command returns a list of two
values: a \fIsockId\fR to represent the newly created socket and
the port number used for the connection.

.TP
\fBdp_connect \fIpath\fR

This command creates a TCP protocol UNIX domain socket and connects it
to the UNIX domain socket specified by path.  It is otherwise identical
to dp_connect \fIhost\fR \fIport\fR.

.TP
\fBdp_connect \fI-udp\fR \fI?port?\fR

In this form, dp_connect creates a UDP protocol INET socket
(a connectionless socket).  Since this socket is connectionless, only the
dp_sendTo and dp_receiveFrom commands described below may
be used with this socket to transmit and receive data.

\fIPort\fP can be specified by number or
by service name (see services(5) for more information).
If the \fIport\fR argument is missing or 0, the system
will select an unused port number for you.  This command
returns a list containing a \fIsockId\fR (that represents the
created socket) and the \fIport\fR number (where the socket will
receive and transmit data using the UDP protocol).

.TP
\fBdp_accept \fIsockId\fR

The \fIsockId\fR argument must represent a listening (server)
socket (i.e., a \fIsockId\fR returned by the dp_connect
command that was called with the \fI-server\fR flag).  If this
listening socket is readable (i.e., a client process is
attempting to connect), the dp_accept command creates a new
socket that is connected to the client process.  If the listening
socket is not readable, th dp_accept command will block until
a client process attempts to connect to the listening socket.
The listening socket (represented by the \fIsockId\fR argument)
will remain a listening socket.  This command returns a new
\fIsockId\fR to represent the newly created socket that is
connected to the accepted client process, and the internet address
of the connecting party (eg, "128.32.149.117").  If the connection
occurs on a Unix domain socket, the second element of the
return value will be "0.0.0.0"

.TP 
\fBdp_shutdown \fIsockId\fR \fIcode\fR

Shutdown a socket for reading, writing, or both.  This command is
not the same as close, which you should use for truly
closing the socket.  The \fIsockId\fR argument must represent a
file descriptor that represents a socket, not an open file.

If \fIcode\fR is \fB"0"\fR, \fB"read"\fR or \fB"receives"\fR then
further reception of data from \fIsockId\fR will be disabled.

If \fIcode\fR is \fB"1"\fR, \fB"write"\fR or \fB"sends"\fR, then
further sending of data using \fIsockId\fR will be disabled (and
an EOF will be automatically sent down the socket).

If \fIcode\fR is \fB"2"\fR, \fB"all"\fR or \fB"both"\fR, then
further reception and sending of data on \fIsockId\fR will be
disabled.

As a side effect, the appropriate filehandlers previously
installed on the \fIsockId\fR will be deleted.  (See the
dp_filehandler man page.)

.SH "TRANSMITTING DATA"

Four pairs of commands are useful for sending and receiving data on
sockets.  The Tcl functions gets and puts can be used to
read and write string data to and from sockets.  These functions are
appropriate for communicating with text based programs (e.g., telnet).
Applications can detect closed connection when the Tcl command
eof \fIsockId\fR returns 1.

Dp_send and dp_receive are similar to gets and puts, but have the side
effect of automatically detecting closed connections.  When these
functions detect a closed connection, they remove any previously
instantiated file handlers for \fIsockId\fR and close the socket.
Applications can install callbacks associated with this "close-file"
event using the dp_atclose command.  Dp_send and dp_receive also
support non blocking input and are more efficient than gets and puts.

Dp_sendTo and dp_receiveFrom are used to send and receive data on
connectionless sockets (i.e., created using the dp_connect command
using the \fI-udp\fR option).  Dp_receiveFrom also supports non
blocking input and peeking (i.e., reading data from a socket without
advancing the file pointer).

Dp_packetSend and dp_packetReceive provide a message based protocol for
TCP sockets.  The extra protocol is necessary since TCP provides a
stream interface which does not preserve message boundaries.  The
protocol attaches an 8 byte binary header on the message containing a
magic number and the length of the message.  Due to the presence of
this header, applications should be careful about intermixing calls to
dp_packetSend and dp_packetReceive with other data transmission calls.

The options for each command are described below.

.TP
\fBdp_send\fR \fIsockId\fR \fImessage\fR ?\fInonewline\fP?

Writes the string \fImessage\fR to a connected socket.  Like the Tcl
puts command, dp_send normally outputs a newline character after
\fImessage\fR, but this feature may be suppressed by specifying the
\fInonewline\fP switch.

If insufficient buffer space exists to send \fImessage\fR, this command
will block until message is transmitted unless the socket is in
non-blocking mode (see dp_socketOption).  In this case, only part
of \fImessage\fR is transmitted.  The return value is the number of
characters sent.  The rest of the message can be sent when the socket
becomes writeable.  See the manual pages for the dp_filehandler and
dp_isready commands for testing when a socket becomes writeable.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a value of 0.

.TP
\fBdp_receive\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fP?

This command reads the immediately available data from \fIsockId\fR.
If \fInumBytes\fR is specified, at most this many bytes of the
immediately available data on will be returned.  If the socket is
non-blocking (see dp_socketOption), all data available on the socket
will be returned  -- should no data be available, dp_receive will
return a null string.

If the socket is in blocking mode (the default), dp_receive will block
until input is received.  If \fI-peek\fP is specified, the data present
on the socket is returned but not consumed, so that a subsequent
dp_receive call will see the same data.

The \fIsockId\fR argument must represent a connected (i.e., TCP
protocol) socket.  If the connection is broken, dp_send will
automatically close the socket, delete any previously created file
handlers, and return a null string.

.TP
\fBdp_packetSend\fR \fIsockId\fR \fImessage\fR

Sends the string \fImessage\fR through the socket (\fIsockId\fR) to the
connected, remote process.  This command is similar to dp_sendTo,
except that it works with TCP sockets, so message delivery is
reliable.  It differs from dp_send in that message boundaries are
preserved.  When the remote socket calls dp_packetReceive, it will
never receive a partial \fImessage\fR.  The receiver \fImust\fP use
dp_packetReceive to read the message.

\fINotes:\fR
Message boundaries are preserved by attaching an 8 byte binary header
onto the message, half of which is a magic number indicating
a packet, and half of which indicates the size of the message.
Because this header represents binary data, care must be taken
if puts or dp_send calls are intermixed with dp_packetSend on the
same channel.

If dp_packetSend is used with non-blocking I/O mode and the send would
have blocked, dp_packetSend returns the number of bytes transmitted.
It is up to the caller to transmit the remaining characters in the
string using dp_send with the nonewline option (\fInot\fP
dp_packetSend) when the socket becomes writeable.  See dp_filehandler and
dp_isready manual pages for testing when a socket becomes writeable.)

.TP
\fBdp_packetReceive\fR \fIsockId\fR ?\fI-peek\fP?

Receives a single message from the connection (represented by the
\fIsockId\fR).  The connected, remote process which sent the message
must use the dp_packetSend command.  Dp_packetReceive differs from
dp_receive in that message boundaries are preserved.  If the entire
message is available, the return value is the message received.  If
only part of the packet is available when dp_packetReceive is called, a
zero length string is returned.  See the note in dp_packetSend above
about using dp_packetReceive and gets on the same channel.

If \fI-peek\fP is specified, the data present on the socket is returned
but not consumed, so that a subsequent dp_packetReceive calls will
see  the same data.

If no data is available at the socket and the socket is in non blocking
mode, a zero length string is returned.  Otherwise, this operation
blocks until at least some data (but possibly not the entire packet)
is received.

.TP
\fBdp_sendTo\fR \fIsockId\fR \fImessage\fR \fIaddr\fR

Sends the string \fImessage\fR to the process at the destination
address specified by the \fIaddr\fR handle.  The \fIaddr\fR handle must
be created using the dp_address command or taken from the return
value of the dp_receiveFrom command.  The \fIsockId\fR argument
must represent a connectionless socket (i.e., created using the
dp_connect command using the \fI-udp\fR option).  Dp_sendTo
uses \fIsockId\fR as the transmitting socket.

.TP
\fBdp_receiveFrom\fR \fIsockId\fR ?\fInumBytes\fR? ?\fI-peek\fR? ?\fI-noaddr\fR?

Receives a message that was sent from another process that used the
dp_sendTo command.  Normally, a list of two values is returned.  The
first value is the address (an \fIaddr\fR handle) of the sending
process, and the second element is the message received.  If the
\fI-noaddr\fR flag is specified, the address of the sending process is
ommitted.  If the socket is in non-blocking mode (see dp_socketOption)
and not readable, -1 will be returned.  Otherwise, this command will
block until a message arrives.  If \fI-peek\fR is specified, the
message is read from the socket but not removed from the queue.  If
\fInumBytes\fR is specified, at most this many bytes of the message is
returned.  Because of the way connectionless sockets work, the rest of
the datagram will be discarded from the queue, regardless of the value
of \fInumBytes\fR, unless \fI-peek\fR is specified.

The \fIsockId\fR argument must represent a connectionless socket
(i.e., created using the dp_connect command using the
\fI-udp\fR option).  The dp_receiveFrom command uses the
connectionless socket, \fIsockId\fR, as the reception socket.

.SH SEE ALSO
Tcl-DP, socket(2), accept(2), connect(2), listen(2), dp_address(n),
Tcl, dp_filehandler(n), dp_socketOption(n)

.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu),
.br
Steve Yen (syen@cs.berkeley.edu), and
.br
Lou Salkind (salkind@deshaw.com)
'\"@endhelp
'\"@help: dp/socketOption
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: Change the options on a socket
dp_socketOption \- Change the options on a socket
.TP
\fBdp_socketOption \fIsockId option ?arg?\fR

The dp_socketOption command provides access to the setsockopt(2)
and getsockopt(2) system calls.  If the optional \fIarg\fP is provided,
the \fIoption\fP is set on the socket \fIsockId\fP.  Otherwise, the
current value of \fIoption\fP associated with \fIsockId\fP is returned.
Currently, 3 socket options can be adjusted:
.RS
.TP
\fBdp_socketOption \fIsockId sendBuffer ?bytes?\fR
Sets/gets the size of the send buffer
for \fIsockId\fP.  The send buffer is the number of bytes that can be buffered
in the system before a send/recv or read/write call will block.
The default value is machine dependent.

.TP
\fBdp_socketOption \fIsockId recvBuffer ?bytes?\fR
Sets/gets the size of the receive buffer
for \fIsockId\fP.  The receive buffer is the number of bytes that can be
buffered in the system before data will cease to flow on a tcp socket, or be
dropped on a udp socket.
The default value is machine dependent.

.TP
\fBdp_socketOption \fIsockId noblock ?yes|no? \fR
Sets/gets the non blocking i/o
mode for the connection associated with \fIsockId\fP.  This option
will change the behavior of various transmission routines as described
in dp_connect(n).
The default value is "no."

.TP
\fBdp_socketOption \fIsockId autoClose ?yes|no? \fR
Sets/gets the autoClose
flag for the connection associated with \fIsockId\fP.  If
the autoClose flag is "yes", then any errors detected in
transmission will automatically close the file.  This case
typically arrives when the connection is closed unexpectedly.
Users can attach callbacks to the closing of the file using
the dp_atclose facility.  The default value is "yes."

.TP
\fBdp_socketOption \fIsockId keepAlive ?yes|no? \fR
Sets/gets the "Keep Alive" flag for
the tcp connection associated with \fIsockId\fP.  If the "Keep Alive" flag
is on, the system sends periodic transmission of messages on a tcp
socket.  Should  the connected  party fail to respond to these messages,
the connection is considered broken and will be closed automatically.
The default value is "no."

.SH "SEE ALSO"
setsockopt(2), getsockopt(2),  dp_connect(n)

.SH AUTHOR
Brian Smith (bsmith@cs.berkeley.edu)
.br
Steve Yen (syen@cs.berkeley.edu)
.br
Stephen Tu (tus@roger-rabbit.cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/update
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: to handle file descriptor conditions
dp_filehandler \- to handle file descriptor conditions
.sp
dp_isready \- Check if a socket has data pending
.sp
dp_update \- Process pending events and/or when-idle handlers
.sp
dp_after \- Execute a command after a certain amount of time has elapsed
.sp
dp_whenidle \- Execute a command when the system is idle
.sp
dp_waitvariable \- Wait for a variable to be modified
.SH SYNOPSIS
\fBdp_filehandler \fIsockId\fR ?\fImode\fR \fIcommand\fR?
.br
\fBdp_isready \fIsockId\fR
.br
\fBdp_update ?\fIidletasks\fR?
.br
\fBdp_after ms ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_whenidle command ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_waitvariable variable\fR
.SH DESCRIPTION
.LP

The dp_isready command checks whether \fIsockId\fP is readable or
writeable using a select(2) system call.  It returns a list of up two
boolean values (i.e., 1 or 0).  The first value specifies whether
\fIsockId\fP is readable, and the second value specifies whether
\fIsockId\fP is writeable.  For example, the tcl expression

.RS
if [lindex [dp_isready file3] 1] {MyOutput file3}
.RE

calls MyOutput if file3 is writeable.

The dp_update command is equivalent to the Tk "update" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "update" for an explanation of
it's usage.

The dp_after command is equivalent to the Tk "after" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "after" for an explanation of
it's usage.

The dp_whenidle command arranges for the specified Tcl/Tk \fIcommand\fR
to be evaluated whenever the system is about to go to sleep waiting for
an event to occur.

The dp_waitvariable command is equivalent to the Tk "tkwait variable"
command, except that it operates even if a connection to the X server
is not present.  See the Tk documentation on "tkwait" for an explanation of
it's usage.

The dp_filehander command allows one to specify a Tcl/Tk
\fIcommand\fR which will be evaluated whenever the file descriptor
represented by \fIsockId\fR is readable, writable, and/or has an
exceptional condition pending.  \fICommand\fR will be invoked with two
arguments appended: a single character indicating the \fImode\fR
('r', 'w', or 'e'), and the \fIsockId\fR.

A \fIsockId\fR is an identifier which represents a file descriptor.  It
is identical to the identifier manipulated by the Tcl-DP (Tcl
Distributed Programming) network connection management commands
(dp_connect, dp_shutdown, etc.).  \fISockId\fR's are also
manipulated by the read, eof, gets, puts, and close file management
commands of Tcl.

The \fImode\fR argument indicates the situations when the \fIcommand\fR
will be evaluated.  It may be any combination of the following values:

.RS
.TP
\fBr\fR
Eval \fIcommand\fR whenever there is data to be read from the
\fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBr\fR to indicate that data is readable on the file
descriptor, and the \fIsockId\fR, which represents the file descriptor
that is readable.  The \fIcommand\fR should read at least some data
from the \fIsockId\fR, or otherwise \fIcommand\fR will be called
continuously.

.TP
\fBw\fR
Eval \fIcommand\fR whenever data can be written to the \fIsockId\fR
without blocking.  The \fIcommand\fR is evaluated with two arguments
appended: \fBw\fR to indicate that the file descriptor is writable, and
the \fIsockId\fR, which represents the writable file descriptor.

.TP
\fBe\fR
Eval \fIcommand\fR whenever there is an exceptional condition pending
on the \fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBe\fR to indicate exception, and the \fIsockId\fR, which
represents the file descriptor with the exceptional condition.
.RE

If the \fImode\fR and \fIcommand\fR arguments are not specified, then
any previously specified \fIcommand\fR for the given \fIsockId\fR is
deleted.  Specifying a new \fIcommand\fR using the dp_filehandler
command will also delete any previously specified \fIcommand\fR for a
\fIsockId\fR.

.SH EXAMPLE

The following file handlers create a telnet like interface to the
sendmail process (the smtp port) running on the local host.  The command
"say" sends the string passed to it to sendmail.  The reply is
automatically printed on stdout by the get_remote procedure.

.DS
proc get_remote {mode fid} {
    # Exit if remote connection closed on us.
    if {[gets $fid input] == -1} {
	puts stdout "Connection closed by foreign host."
	exit
    }
    puts stdout $input
}

proc say {args} {
    global remote
    puts $remote $args;
}

set remote [lindex [dp_connect localhost smtp] 0]
dp_filehandler $remote r get_remote
.DE

.SH SEE ALSO
Tcl-DP, select(2)
.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu)
.br
and Steve Yen (syen@cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/waitvariable
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: to handle file descriptor conditions
dp_filehandler \- to handle file descriptor conditions
.sp
dp_isready \- Check if a socket has data pending
.sp
dp_update \- Process pending events and/or when-idle handlers
.sp
dp_after \- Execute a command after a certain amount of time has elapsed
.sp
dp_whenidle \- Execute a command when the system is idle
.sp
dp_waitvariable \- Wait for a variable to be modified
.SH SYNOPSIS
\fBdp_filehandler \fIsockId\fR ?\fImode\fR \fIcommand\fR?
.br
\fBdp_isready \fIsockId\fR
.br
\fBdp_update ?\fIidletasks\fR?
.br
\fBdp_after ms ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_whenidle command ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_waitvariable variable\fR
.SH DESCRIPTION
.LP

The dp_isready command checks whether \fIsockId\fP is readable or
writeable using a select(2) system call.  It returns a list of up two
boolean values (i.e., 1 or 0).  The first value specifies whether
\fIsockId\fP is readable, and the second value specifies whether
\fIsockId\fP is writeable.  For example, the tcl expression

.RS
if [lindex [dp_isready file3] 1] {MyOutput file3}
.RE

calls MyOutput if file3 is writeable.

The dp_update command is equivalent to the Tk "update" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "update" for an explanation of
it's usage.

The dp_after command is equivalent to the Tk "after" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "after" for an explanation of
it's usage.

The dp_whenidle command arranges for the specified Tcl/Tk \fIcommand\fR
to be evaluated whenever the system is about to go to sleep waiting for
an event to occur.

The dp_waitvariable command is equivalent to the Tk "tkwait variable"
command, except that it operates even if a connection to the X server
is not present.  See the Tk documentation on "tkwait" for an explanation of
it's usage.

The dp_filehander command allows one to specify a Tcl/Tk
\fIcommand\fR which will be evaluated whenever the file descriptor
represented by \fIsockId\fR is readable, writable, and/or has an
exceptional condition pending.  \fICommand\fR will be invoked with two
arguments appended: a single character indicating the \fImode\fR
('r', 'w', or 'e'), and the \fIsockId\fR.

A \fIsockId\fR is an identifier which represents a file descriptor.  It
is identical to the identifier manipulated by the Tcl-DP (Tcl
Distributed Programming) network connection management commands
(dp_connect, dp_shutdown, etc.).  \fISockId\fR's are also
manipulated by the read, eof, gets, puts, and close file management
commands of Tcl.

The \fImode\fR argument indicates the situations when the \fIcommand\fR
will be evaluated.  It may be any combination of the following values:

.RS
.TP
\fBr\fR
Eval \fIcommand\fR whenever there is data to be read from the
\fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBr\fR to indicate that data is readable on the file
descriptor, and the \fIsockId\fR, which represents the file descriptor
that is readable.  The \fIcommand\fR should read at least some data
from the \fIsockId\fR, or otherwise \fIcommand\fR will be called
continuously.

.TP
\fBw\fR
Eval \fIcommand\fR whenever data can be written to the \fIsockId\fR
without blocking.  The \fIcommand\fR is evaluated with two arguments
appended: \fBw\fR to indicate that the file descriptor is writable, and
the \fIsockId\fR, which represents the writable file descriptor.

.TP
\fBe\fR
Eval \fIcommand\fR whenever there is an exceptional condition pending
on the \fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBe\fR to indicate exception, and the \fIsockId\fR, which
represents the file descriptor with the exceptional condition.
.RE

If the \fImode\fR and \fIcommand\fR arguments are not specified, then
any previously specified \fIcommand\fR for the given \fIsockId\fR is
deleted.  Specifying a new \fIcommand\fR using the dp_filehandler
command will also delete any previously specified \fIcommand\fR for a
\fIsockId\fR.

.SH EXAMPLE

The following file handlers create a telnet like interface to the
sendmail process (the smtp port) running on the local host.  The command
"say" sends the string passed to it to sendmail.  The reply is
automatically printed on stdout by the get_remote procedure.

.DS
proc get_remote {mode fid} {
    # Exit if remote connection closed on us.
    if {[gets $fid input] == -1} {
	puts stdout "Connection closed by foreign host."
	exit
    }
    puts stdout $input
}

proc say {args} {
    global remote
    puts $remote $args;
}

set remote [lindex [dp_connect localhost smtp] 0]
dp_filehandler $remote r get_remote
.DE

.SH SEE ALSO
Tcl-DP, select(2)
.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu)
.br
and Steve Yen (syen@cs.berkeley.edu)
'\"@endhelp
'\"@help: dp/whenidle
'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.SH NAME
'\"@brief: to handle file descriptor conditions
dp_filehandler \- to handle file descriptor conditions
.sp
dp_isready \- Check if a socket has data pending
.sp
dp_update \- Process pending events and/or when-idle handlers
.sp
dp_after \- Execute a command after a certain amount of time has elapsed
.sp
dp_whenidle \- Execute a command when the system is idle
.sp
dp_waitvariable \- Wait for a variable to be modified
.SH SYNOPSIS
\fBdp_filehandler \fIsockId\fR ?\fImode\fR \fIcommand\fR?
.br
\fBdp_isready \fIsockId\fR
.br
\fBdp_update ?\fIidletasks\fR?
.br
\fBdp_after ms ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_whenidle command ?\fIarg1 arg2 arg3 ...\fR?
.br
\fBdp_waitvariable variable\fR
.SH DESCRIPTION
.LP

The dp_isready command checks whether \fIsockId\fP is readable or
writeable using a select(2) system call.  It returns a list of up two
boolean values (i.e., 1 or 0).  The first value specifies whether
\fIsockId\fP is readable, and the second value specifies whether
\fIsockId\fP is writeable.  For example, the tcl expression

.RS
if [lindex [dp_isready file3] 1] {MyOutput file3}
.RE

calls MyOutput if file3 is writeable.

The dp_update command is equivalent to the Tk "update" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "update" for an explanation of
it's usage.

The dp_after command is equivalent to the Tk "after" command,
except that it operates even if a connection to the X server is not
present.  See the Tk documentation on "after" for an explanation of
it's usage.

The dp_whenidle command arranges for the specified Tcl/Tk \fIcommand\fR
to be evaluated whenever the system is about to go to sleep waiting for
an event to occur.

The dp_waitvariable command is equivalent to the Tk "tkwait variable"
command, except that it operates even if a connection to the X server
is not present.  See the Tk documentation on "tkwait" for an explanation of
it's usage.

The dp_filehander command allows one to specify a Tcl/Tk
\fIcommand\fR which will be evaluated whenever the file descriptor
represented by \fIsockId\fR is readable, writable, and/or has an
exceptional condition pending.  \fICommand\fR will be invoked with two
arguments appended: a single character indicating the \fImode\fR
('r', 'w', or 'e'), and the \fIsockId\fR.

A \fIsockId\fR is an identifier which represents a file descriptor.  It
is identical to the identifier manipulated by the Tcl-DP (Tcl
Distributed Programming) network connection management commands
(dp_connect, dp_shutdown, etc.).  \fISockId\fR's are also
manipulated by the read, eof, gets, puts, and close file management
commands of Tcl.

The \fImode\fR argument indicates the situations when the \fIcommand\fR
will be evaluated.  It may be any combination of the following values:

.RS
.TP
\fBr\fR
Eval \fIcommand\fR whenever there is data to be read from the
\fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBr\fR to indicate that data is readable on the file
descriptor, and the \fIsockId\fR, which represents the file descriptor
that is readable.  The \fIcommand\fR should read at least some data
from the \fIsockId\fR, or otherwise \fIcommand\fR will be called
continuously.

.TP
\fBw\fR
Eval \fIcommand\fR whenever data can be written to the \fIsockId\fR
without blocking.  The \fIcommand\fR is evaluated with two arguments
appended: \fBw\fR to indicate that the file descriptor is writable, and
the \fIsockId\fR, which represents the writable file descriptor.

.TP
\fBe\fR
Eval \fIcommand\fR whenever there is an exceptional condition pending
on the \fIsockId\fR.  The \fIcommand\fR is evaluated with two arguments
appended: \fBe\fR to indicate exception, and the \fIsockId\fR, which
represents the file descriptor with the exceptional condition.
.RE

If the \fImode\fR and \fIcommand\fR arguments are not specified, then
any previously specified \fIcommand\fR for the given \fIsockId\fR is
deleted.  Specifying a new \fIcommand\fR using the dp_filehandler
command will also delete any previously specified \fIcommand\fR for a
\fIsockId\fR.

.SH EXAMPLE

The following file handlers create a telnet like interface to the
sendmail process (the smtp port) running on the local host.  The command
"say" sends the string passed to it to sendmail.  The reply is
automatically printed on stdout by the get_remote procedure.

.DS
proc get_remote {mode fid} {
    # Exit if remote connection closed on us.
    if {[gets $fid input] == -1} {
	puts stdout "Connection closed by foreign host."
	exit
    }
    puts stdout $input
}

proc say {args} {
    global remote
    puts $remote $args;
}

set remote [lindex [dp_connect localhost smtp] 0]
dp_filehandler $remote r get_remote
.DE

.SH SEE ALSO
Tcl-DP, select(2)
.SH AUTHOR
Pekka Nikander, Telecom Finland (Pekka.Nikander@ajk.tele.fi)
.br
Extended by Tim MacKenzie (tym@dibbler.cs.monash.edu.au)
.br
Further enhancements by Brian Smith (bsmith@cs.berkeley.edu)
.br
and Steve Yen (syen@cs.berkeley.edu)
'\"@endhelp
